# vim: set ft=sh sw=2 ts=8 et :
deploy_reqmgr_variants="default prod preprod dev offsite"

deploy_reqmgr_deps()
{
  deploy backend
  deploy wmcore-auth
  case $variant in
    offsite )
      deploy couchdb offsite
      deploy wmcore ;;
    * )
      deploy couchdb ;;
  esac
  deploy reqmon
  deploy acdcserver
}

deploy_reqmgr_prep()
{
  case $variant in offsite ) extra=install ;; * ) extra= ;; esac
  mkproj $extra
}

deploy_reqmgr_sw()
{
  case $variant in
    offsite )
      deploy_pkg comp external+cherrypy
      deploy_pkg comp external+py2-cheetah
      deploy_pkg comp external+py2-openid
      deploy_pkg comp external+py2-cjson
      deploy_pkg comp cms+dls-client
      deploy_pkg comp cms+dbs-client

      local wmcore_etc=$root/current/apps/wmcore/etc
      local couchdb_ini=$root/current/config/couchdb/local.ini
      local mysql_config=$root/current/config/mysql/my.cnf

      # get manage script from wmcore
      cp $wmcore_etc/deploy/wmagent-manage $project_config/manage

      # override the webtools couch config
      cp $wmcore_etc/deploy/wmagent-couch.ini $couchdb_ini
      perl -p -i -e "s{deploy_project_root}{$root/projects}g" $couchdb_ini

      # grab the WMAgent MySQL config
      cp $wmcore_etc/deploy/wmagent-mysql.cnf $mysql_config
      ;;
    * )
      case $variant in prod ) secrets= ;; preprod ) secrets=Preprod ;; * ) secrets=Dev ;; esac
      deploy_pkg \
        -a dmwm-service-cert.pem:wmcore/dmwm-service-cert.pem \
        -a dmwm-service-key.pem:wmcore/dmwm-service-key.pem \
        -a ReqMgrSecrets.py:reqmgr/ReqMgrSecrets${secrets}.py comp cms+reqmgr

      if grep -rq "replace me" $project_auth; then
        note "WARNING: replace certificates in $project_auth with real ones"
      else :; fi
      ;;
  esac
}

deploy_reqmgr_post()
{
  case $host in vocms13[89] ) disable ;; * ) enable ;; esac

  case $variant in
    offsite )
      ;;
    * )
      # Tell couchdb to pick up reqmgr on the next restart
      local couchdb_config=$root/current/config/couchdb
      local couchdb_state=$root/state/couchdb
      local reqmgrapp=$root/current/apps/reqmgr

      for area in stagingarea replication; do
        rm -f $couchdb_state/$area/reqmgr
        touch $couchdb_state/$area/reqmgr
      done

      echo "couchapp push $reqmgrapp/data/couchapps/ReqMgr" \
           "http://localhost:5984/reqmgr_workload_cache" \
        >> $couchdb_state/stagingarea/reqmgr
      echo "couchapp push $reqmgrapp/data/couchapps/ConfigCache" \
           "http://localhost:5984/reqmgr_config_cache" \
        >> $couchdb_state/stagingarea/reqmgr
      $MIGRATION rm -rf $couchdb_state/database/{\.,}ops_clipboard*

      # Setup ReqMgr cronjobs
      (mkcrontab
       sysboot
       case $host in
         vocms10[67] | vocms13[2689] | vocms16[13] ) ;;
	 * )
           local cmd="$project_config/manage updateversions 'I did read documentation'"
           $nogroups || cmd="sudo -H -u _reqmgr bashs -l -c \"${cmd}\""
           echo "58 * * * * $cmd" ;;
       esac) | crontab -
      ;;
  esac
}

deploy_reqmgr_auth()
{
  case $1 in
    */*-cert.pem )
      echo "replace me with your dmwm service certificate" ;;
    */*-key.pem )
      echo "replace me with your dmwm service key" ;;
    */ReqMgrSecrets*.py )
      echo 'connectUrl = "oracle://FOO:BAR@ZOINKS"' ;;
  esac
}
