#!/bin/sh

##H Usage: manage ACTION [ARG] [SECURITY-STRING]
##H
##H Available actions:
##H   help        show this help
##H   version     get current version of the service
##H   status      show current service's status
##H   sysboot     start server from crond if not running
##H   restart     (re)start the service
##H   start       (re)start the service
##H   stop        stop the service
##H   cron ARG    run cronjob named ARG (dataframe|models|verify)
##H

if [ $(id -un)  = cmsweb ]; then
  echo "ERROR: please use another account" 1>&2
  exit 1
fi

echo_e=-e
case $(uname) in Darwin )
  md5sum() { md5 -r ${1+"$@"}; }
  echo_e=
  ;;
esac

ME=$(basename $(dirname $0))
TOP=$(cd $(dirname $0)/../../.. && pwd)
ROOT=$(cd $(dirname $0)/../.. && pwd)
LOGDIR=$TOP/logs/$ME
STATEDIR=$TOP/state/$ME
COLOR_OK="\\033[0;32m"
COLOR_WARN="\\033[0;31m"
COLOR_NORMAL="\\033[0;39m"

. $ROOT/apps/DCAFPilot/etc/profile.d/init.sh

export DCAFPILOT_ROOT
export DCAFPILOT_PORT=8330
export PYTHONUNBUFFERED=1
export X509_USER_PROXY=$STATEDIR/proxy/proxy.cert
export X509_USER_CERT=$X509_USER_PROXY
export X509_USER_KEY=$X509_USER_PROXY
export DCAFPILOT_CONFIG=$ROOT/config/$ME/dcaf.cfg
export DCAFPILOT_PREDICTIONS=$STATEDIR/analytics/predictions

cd $STATEDIR
host=`hostname -s`

# Start service conditionally on crond restart.
sysboot()
{
  dostart=false
  if [ $(pgrep -u $(id -u) -f "[/]DCAF/web/server" | wc -l) = 0 ]; then
      dostart=true
  fi
  $dostart && start
}

start()
{
  echo "starting $ME"
  # start service
  $DCAFPILOT_ROOT/bin/dcaf_server --config=$DCAFPILOT_CONFIG \
      </dev/null 2>&1 | rotatelogs $LOGDIR/dcaf-%Y%m%d.log 86400 >/dev/null 2>&1 &
}

# Stop the service.
stop()
{
  echo "stopping $ME"
  for pid in $(pgrep -u $(id -u) -f "[/]DCAF/web/server"); do
      kill -9 $pid
  done
}

# Check if the server is running.
status()
{
  local pid=$(pgrep -u $(id -u) -f "[/]DCAF/web/server" | sort -n)
  if [ X"$pid" = X ]; then
    echo $echo_e "$ME $pat is ${COLOR_WARN}NOT RUNNING${COLOR_NORMAL}."
  else
    echo $echo_e "$ME $pat is ${COLOR_OK}RUNNING${COLOR_NORMAL}, PID" $pid
  fi
}

# Runs actions to be done through cronjobs
cron()
{
  local action=$1
  case $action in
    dataframe )
      $DCAFPILOT_ROOT/bin/cron4dataframe.sh $DCAFPILOT_CONFIG \
                 $STATEDIR/analytics $STATEDIR/analytics/data \
                 &> $LOGDIR/cron4dataframe.log
      ;;
    models )
      $DCAFPILOT_ROOT/bin/cron4models.sh                      \
                 $STATEDIR/analytics $STATEDIR/analytics/data \
                 &> $LOGDIR/cron4models.log
      ;;
    verify )
      $DCAFPILOT_ROOT/bin/cron4verify.sh                      \
                 $STATEDIR/analytics/predictions              \
                 &> $LOGDIR/cron4verify.log
      ;;
    * )
      echo "You must specify the cron action to run: dataframe|models|verify "
      exit 1
      ;;
  esac
}

# Verify the security string.
check()
{
  CHECK=$(echo "$1" | md5sum | awk '{print $1}')
  if [ $CHECK != 94e261a5a70785552d34a65068819993 ]; then
    echo "$0: cannot complete operation, please check documentation." 1>&2
    exit 2;
  fi
}

# Main routine, perform action requested on command line.
case ${1:-status} in
  sysboot )
    sysboot
    ;;

  start | restart )
    check "$2"
    stop
    start
    ;;

  status )
    status
    ;;

  stop )
    check "$2"
    stop
    ;;

  cron )
    check "$3"
    cron $2
    ;;

  help )
    perl -ne '/^##H/ && do { s/^##H ?//; print }' < $0
    ;;

  version )
    echo "$DCAFPILOT_VERSION"
    ;;

  * )
    echo "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
    exit 1
    ;;
esac
