# vim: set ft=sh sw=2 ts=8 et :
deploy_bigcouch_variants="default offsite"

deploy_bigcouch_deps()
{
  deploy $stage backend
  deploy $stage wmcore-auth
}

deploy_bigcouch_prep()
{
  mkproj database replication stagingarea
  case $variant in default ) ;; * ) mkproxy ;; esac
}

deploy_bigcouch_sw()
{
  deploy_pkg -a bigcouch/hmackey.ini -a bigcouch/erlang.cookie comp external+bigcouch

  # path relocations
  perl -p -i -e "s|{ROOT}|$root|g" $root/$cfgversion/config/bigcouch/{local.ini,vm.args}

  case $variant in
    default )
      ;;
    * )
      # Offsite instances only allow connections through localhost because
      # they are not protected by the front-ends. Additionally, enable ssl
      # configuration so it can use a proxy certificate to authenticate
      # with the central couch.
      perl -p -i -e 's,bind_address = 0.0.0.0,bind_address = 127.0.0.1,g;' \
                 -e 's,^;(\[ssl\]|(cert|key|cacert)_file),\1,g' $root/$cfgversion/config/bigcouch/local.ini
      ;;
  esac
}

deploy_bigcouch_post()
{
  # set the machine identification for the distributed erlang
  perl -p -i -e "s|{HOST}|$host|g" $project_config/vm.args

  (mkcrontab
   case $host in
     vocms013[2689] | vocms016[135] | vocms0140 | vocms0306 | vocms0307 | vocms0318 )
       disable ;;
     * )
       enable
       sysboot
       #local cmd="$project_config/manage compact all 'I did read documentation'"
       #$nogroups || cmd="sudo -H -u _bigcouch bashs -l -c \"${cmd}\""
       #echo "12 0 * * * $cmd"
       ;;
   esac) | crontab -
}

deploy_bigcouch_auth()
{
  case $1 in
    */hmackey.ini )
     perl -e \
       'undef $/; print "[couch_cms_auth]\n";
        print "hmac_secret = ", unpack("h*", <STDIN>), "\n"' < \
       $root/$cfgversion/auth/wmcore-auth/header-auth-key
     ;;
    */erlang.cookie )
     perl -e 'open(R, "< /dev/urandom") or die; sysread(R, $K, 20) or die;
              print unpack("h*", $K)'
     ;;
  esac
}
