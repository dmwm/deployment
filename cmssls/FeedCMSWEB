#!/usr/bin/env python2.6

from os import path
import sys
import time
import re
import urllib2
import subprocess
from xml.sax.saxutils import escape
from collections import defaultdict

TPL_URL = "https://metricmgr.cern.ch/api/v2/mix/production/yaml/"
HOSTSCMD = "curl -s -u : --negotiate -H 'Accept: application/json' -k 'https://judy.cern.ch:9081//v3/facts/hostgroup?query=%5B%22%7E%22%2C+%22value%22%2C+%22vocms%2Fcmsweb%22%5D'" #query=["~","value","vocms/cmsweb"]
ALARMCMD = "curl -s -u : --negotiate -H 'Accept: application/json' -k 'https://judy.cern.ch:9081//v3/nodes/%s.cern.ch/facts?query=%%5B%%22%%7E%%22%%2C+%%22name%%22%%2C+%%22alarmed%%22%%5D' | grep -1 app_alarmed" #query=["~","name","alarmed"]
LEMONCMD = 'lemon-cli --script-mode -s -n "%s" -m "%s"'
LEMON_EXPIRED = 86400 # time in seconds to consider lemon feeds as expired

XML_TEMPLATE = """\
<?xml version="1.0" encoding="utf-8" ?>
  <serviceupdate xmlns="http://sls.cern.ch/SLS/XML/update">
    <id>%(slsid)s</id>
    <timestamp>%(tstamp)s</timestamp>
    <status>%(status)s</status>
    <availabilitydesc>
      %(availdesc)s
    </availabilitydesc>
    <contact>
      %(contact)s
    </contact>
    <webpage>
      %(webpage)s
    </webpage>
    <availabilityinfo>
      %(availinfo)s
    </availabilityinfo>
  </serviceupdate>
"""

def spit_xml(feedname, lemonfeeds, isexcept, xml_out_dir):
  nexceptions = 0
  hosts = []

  for f in lemonfeeds:
    host,id,v = f.split(" ",2)

    if isexcept[id]:
      state, code = v.split(" ",3)[1:3]
      if int(state) == 1 and code in ['000', '005', '135']:
        nexceptions += 1
        if host not in hosts:
          hosts.append(host)

  if nexceptions > 0:
    status = "unavailable"
    availinfo = "Found " + str(nexceptions) + " exception(s) in following server(s):\n      " + str("\n      ").join(hosts)
  else:
    status = "available"
    availinfo = "This service is running well."

  f=open(path.join(xml_out_dir,"sls_cmsweb_"+feedname+".xml"),"wt")
  f.write(XML_TEMPLATE % {
    'slsid': "cmsweb_"+feedname,
    'tstamp': time.strftime("%Y-%m-%dT%H:%M:%S", time.localtime()),
    'status': status,
    'availdesc': "This service becomes \"unavailable\" if there exist a lemon alarm in any of the CMSWEB machines running it.",
    'contact': "cms-service-webtools@cern.ch",
    'webpage': "https://cern.ch/cms-http-group/ops-trouble.html",
    'availinfo': availinfo
  })
  f.close()

  return (feedname, status)

def aggregate_xml(feeds_availability, xml_out_dir):
  nworkingservices = 0
  failedservices = []

  for (n, a) in feeds_availability:
    if a == "available":
      nworkingservices += 1
    else:
      failedservices.append(n)

  if nworkingservices == 0:
    status = "unavailable"
  elif nworkingservices < len(feeds_availability):
    status = "degraded"
  else:
    status = "available"

  if len(failedservices) > 0:
    availinfo = "Found exceptions in the following service(s):\n      " + str("\n      ").join(failedservices)
  else:
    availinfo = "All services on CMSWEB are running properly."

  f=open(path.join(xml_out_dir,"sls_cmsweb.xml"),"wt")
  f.write(XML_TEMPLATE % {
    'slsid': "cmsweb",
    'tstamp': time.strftime("%Y-%m-%dT%H:%M:%S", time.localtime()),
    'status': status,
    'availdesc': "CMSWEB becomes \"degraded\" if one or more services are not working properly.\n      Any other value than \"available\" represents a critical issue, and requires immediate action!",
    'contact': "cms-service-webtools@cern.ch",
    'webpage': "https://cern.ch/cms-http-group/ops-trouble.html",
    'availinfo': availinfo
  })
  f.close()

def build_metric_ids():
  name_ids = {}
  isexcept = {}
  metrics_page = urllib2.urlopen(TPL_URL).read()
  
  # Exceptions and DQM special metrics
  x = re.findall('lemon_([0-9]+):\n.*exception.cmsweb_(.*)\n',metrics_page)
  y = re.findall('lemon_([0-9]+):\n.*cmsweb_(dqm_[^_]*_agents_import_queue)\n',metrics_page)
  for (id,name) in x+y:
    name_ids[id] = name
    isexcept[id] = (id,name) in x
  
  return (name_ids,isexcept)

if __name__ == "__main__":
  if len(sys.argv) != 2:
    print "Syntax: %s <xml_output_dir>" % sys.argv[0]
    sys.exit(1)
  xml_out_dir = sys.argv[1]

  HOSTS = []
  hosts = subprocess.Popen(HOSTSCMD,stdout=subprocess.PIPE,shell=True).stdout.read()
  hosts = re.findall('vocms[0-9]+',hosts)

  for host in hosts:
    if not "false" in subprocess.Popen(ALARMCMD % host,stdout=subprocess.PIPE,shell=True).stdout.read(): # ignore production machines in maintenance
      HOSTS.append(host)

  (name_id,isexcept) = build_metric_ids()

  feeds = defaultdict(list)
  cmd = LEMONCMD % (str(" ").join(HOSTS), str(" ").join(name_id.keys()))
  p=subprocess.Popen(cmd,stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True)
  for line in p.stdout:
    id,tstamp = line.split(" ",3)[1:3]

    # lemonfeeds older then LEMON_EXPIRED seconds are considered
    # feeds from deactivated exceptions, so ignore
    if int(tstamp) + LEMON_EXPIRED > int(time.time()):
       feedname = re.search('(.*?)_',name_id[id]).group(1)
       feeds[feedname].append(line)

  err = p.stderr.read()
  if err:
    print err

  aggregate = []
  for (k,v) in feeds.items():
    aggregate.append(spit_xml(k,v,isexcept,xml_out_dir))

  aggregate_xml(aggregate, xml_out_dir)

  sys.exit(0)
