#!/usr/bin/env python2.6

from os import path
import sys
import time
import re
import json
import urllib2
import subprocess
from xml.sax.saxutils import escape

TPL_URL = "https://metricmgr.cern.ch/api/v2/mix/production/yaml/"

EXCQUERY = """\
curl -s -XGET -k --negotiate -u : https://meter-proxy.cern.ch/gni-%(index)s/_search?pretty -d '{
  "query": {
    "filtered": {
      "query": {
        "bool": {
          "should": [
            {
              "query_string": {
                "query": "*"
              }
            }
          ]
        }
      },
      "filter": {
        "bool": {
          "must": [
            {
              "range": {
                "@timestamp": {
                  "from": %(from)s,
                  "to": %(to)s
                }
              }
            },
            {
              "fquery": {
                "query": {
                  "query_string": {
                    "query": "body.metadata.hostgroup: vocms\\\/cmsweb\\\/backend vocms\\\/cmsweb\\\/backend_plus_frontend"
                  }
                },
                "_cache": true
              }
            }
          ]
        }
      }
    }
  },
  "sort": [
    {
      "@timestamp": {
        "order": "desc"
      }
    }
  ],
  "size": 1000
}'
"""

XML_TEMPLATE = """\
<?xml version="1.0" encoding="utf-8" ?>
  <serviceupdate xmlns="http://sls.cern.ch/SLS/XML/update">
    <id>%(slsid)s</id>
    <timestamp>%(tstamp)s</timestamp>
    <status>%(status)s</status>
    <availabilitydesc>
      %(availdesc)s
    </availabilitydesc>
    <contact>
      %(contact)s
    </contact>
    <webpage>
      %(webpage)s
    </webpage>
    <availabilityinfo>
      %(availinfo)s
    </availabilityinfo>
  </serviceupdate>
"""

def spit_xml(servicename, exceptions, xml_out_dir):
  if len(exceptions) > 0:
    status = "unavailable"
    hosts = []
    for item in exceptions:
      if item['entity'] not in hosts:
        hosts.append(item['entity'])
    availinfo = "Found " + str(len(exceptions)) + " exception(s) in following server(s):\n      " + str("\n      ").join(hosts)
  else:
    status = "available"
    availinfo = "This service is running well."

  f=open(path.join(xml_out_dir,"sls_cmsweb_"+servicename+".xml"),"wt")
  f.write(XML_TEMPLATE % {
    'slsid': "cmsweb_"+servicename,
    'tstamp': time.strftime("%Y-%m-%dT%H:%M:%S", time.localtime()),
    'status': status,
    'availdesc': "This service becomes \"unavailable\" if there exist a lemon alarm in any of the CMSWEB machines running it.",
    'contact': "cms-service-webtools@cern.ch",
    'webpage': "https://cern.ch/cms-http-group/ops-trouble.html",
    'availinfo': availinfo
  })
  f.close()

  return (servicename, status)

def aggregate_xml(services_availability, xml_out_dir):
  nworkingservices = 0
  failedservices = []

  for (n, a) in services_availability:
    if a == "available":
      nworkingservices += 1
    else:
      failedservices.append(n)

  if nworkingservices == 0:
    status = "unavailable"
  elif nworkingservices < len(services_availability):
    status = "degraded"
  else:
    status = "available"

  if len(failedservices) > 0:
    availinfo = "Found exceptions in the following service(s):\n      " + str("\n      ").join(failedservices)
  else:
    availinfo = "All services on CMSWEB are running properly."

  f=open(path.join(xml_out_dir,"sls_cmsweb.xml"),"wt")
  f.write(XML_TEMPLATE % {
    'slsid': "cmsweb",
    'tstamp': time.strftime("%Y-%m-%dT%H:%M:%S", time.localtime()),
    'status': status,
    'availdesc': "CMSWEB becomes \"degraded\" if one or more services are not working properly.\n      Any other value than \"available\" represents a critical issue, and requires immediate action!",
    'contact': "cms-service-webtools@cern.ch",
    'webpage': "https://cern.ch/cms-http-group/ops-trouble.html",
    'availinfo': availinfo
  })
  f.close()

def build_metric_service():
  metric_service = {}
  metrics_page = urllib2.urlopen(TPL_URL).read()
  excludemetrics = ['33576', '32114', '32214', '32104', '32204', '32107', '32207', '32109', '32209']
  
  # Exceptions and DQM special metrics
  x = re.findall('lemon_([0-9]+):\n.*exception.cmsweb_([^_]*)_.*\n',metrics_page)
  y = re.findall('lemon_([0-9]+):\n.*cmsweb_(dqm)_[^_]*_agents_import_queue\n',metrics_page)
  for (metric_id,service) in x+y:
    metric_service[metric_id] = service

  for i in excludemetrics:
    del metric_service[i]
  
  return metric_service

if __name__ == "__main__":
  if len(sys.argv) != 2:
    print "Syntax: %s <xml_output_dir>" % sys.argv[0]
    sys.exit(1)
  xml_out_dir = sys.argv[1]

  mtrsvc = build_metric_service()
  exceptions = {}
  for id in mtrsvc:
    exceptions[mtrsvc[id]] = []

  cmd = EXCQUERY % {'index': time.strftime('%Y-%m', time.gmtime()), 'from': int(time.time() * 1000 - 10 * 60000), 'to': int(time.time() * 1000)}
  p=subprocess.Popen(cmd,stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True)
  output = json.loads(p.stdout.read())
  for item in output['hits']['hits']:
    item = item['_source']['body']['metadata']
    if item['roger_app_alarmed'] == 'true' and str(item['metric_id']) in mtrsvc:
      exceptions[mtrsvc[str(item['metric_id'])]].append(item)

  err = p.stderr.read()
  if err:
    print err

  aggregate = []
  for (k,v) in exceptions.items():
    aggregate.append(spit_xml(k,v,xml_out_dir))

  aggregate_xml(aggregate, xml_out_dir)

  sys.exit(0)
