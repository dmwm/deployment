# vim: set ft=sh sw=2 ts=8 et :
deploy_acdcserver_variants="default prod preprod dev"

deploy_acdcserver_deps()
{
  deploy couchdb
}

deploy_acdcserver_prep()
{
  mkproj
}

deploy_acdcserver_sw()
{
  deploy_pkg \
    -a dmwm-service-cert.pem:wmcore/dmwm-service-cert.pem \
    -a dmwm-service-key.pem:wmcore/dmwm-service-key.pem \
    comp cms+acdcserver

  cp -p $project_config/ACDCConfig-${variant}.py $project_config/ACDCConfig.py

  if grep -rq "replace me" $project_auth; then
    note "WARNING: replace certificates in $project_auth with real ones"
  else :; fi
}

deploy_acdcserver_post()
{
  # Tell couchdb to push acdcserver apps on the next restart
  local manage=$project_config/acdcserver_manage
  local couchdb_state=$root/state/couchdb
  local couch_url="http://localhost:5984"

  for area in stagingarea replication; do
    rm -f $couchdb_state/$area/acdcserver
    touch $couchdb_state/$area/acdcserver
  done

  # push app
  echo "couchapp push $root/current/apps/acdcserver/data/couchapps/ACDC" \
       "http://localhost:5984/acdcserver" > $couchdb_state/stagingarea/acdcserver
  echo "couchapp push $root/current/apps/acdcserver/data/couchapps/GroupUser" \
       "http://localhost:5984/acdcserver" >> $couchdb_state/stagingarea/acdcserver

  # Setup acdcserver cronjobs
  local cmd="$manage cleanup_database 'I did read documentation'"
  $nogroups || cmd="sudo -H -u _acdcserver bashs -l -c \"${cmd}\""
  local cleanup="0 0 1 * * $cmd"

  (mkcrontab
   case $host in vocms34 | vocms13[2689] | vocms16[13]) ;; * ) echo "${cleanup}" ;; esac
  ) | crontab -
}

deploy_acdcserver_auth()
{
  case $1 in
    */*-cert.pem ) echo "replace me with your dmwm service certificate" ;;
    */*-key.pem )  echo "replace me with your dmwm service key" ;;
  esac
}
