# vim: set ft=sh sw=2 ts=8 et :
deploy_acdcserver_variants="default prod preprod dev"

deploy_acdcserver_deps()
{
  deploy $stage couchdb
}

deploy_acdcserver_prep()
{
  mkproj
}

deploy_acdcserver_sw()
{
  deploy_pkg \
    -a dmwm-service-cert.pem:wmcore/dmwm-service-cert.pem \
    -a dmwm-service-key.pem:wmcore/dmwm-service-key.pem \
    comp cms+acdcserver

  cp -p $root/$cfgversion/config/$project/{ACDCConfig-${variant}.py,ACDCConfig.py}

  if grep -rq "replace me" $project_auth; then
    note "WARNING: replace certificates in $project_auth with real ones"
  else :; fi
}

deploy_acdcserver_post()
{
  # Tell couch to push acdcserver apps on the next restart
  local manage=$project_config/acdcserver_manage
  for couch in couchdb:5984; do
    echo "couchapp push $root/current/apps/acdcserver/data/couchapps/ACDC" \
         "http://localhost:${couch##*:}/acdcserver" > $root/state/${couch%%:*}/stagingarea/acdcserver
    echo "couchapp push $root/current/apps/acdcserver/data/couchapps/GroupUser" \
         "http://localhost:${couch##*:}/acdcserver" >> $root/state/${couch%%:*}/stagingarea/acdcserver
  done

  # Setup acdcserver cronjobs
  local cmd="$manage cleanup_database 'I did read documentation'"
  $nogroups || cmd="sudo -H -u _acdcserver bashs -l -c \"${cmd}\""
  local cleanup="0 0 1 * * $cmd"

  (mkcrontab;
   case $variant:$host in
     prod:vocms0140 | preprod:vocms0131 | dev:vocms0127 | dev:vocms0126 | default:* )
       echo "${cleanup}" ;;
     * ) ;;
   esac) | crontab -
}

deploy_acdcserver_auth()
{
  case $1 in
    */*-cert.pem ) echo "replace me with your dmwm service certificate" ;;
    */*-key.pem )  echo "replace me with your dmwm service key" ;;
  esac
}
