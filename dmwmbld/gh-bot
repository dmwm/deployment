#!/usr/bin/env python
import os, subprocess, github, re, sys, datetime

def readfile(filename):
  f = open(filename,'r')
  data = f.read()
  f.close()
  return data

def writefile(filename, data):
  f = open(filename,'w')
  f.write(data)
  f.close()

def generate_index_page(pr, status, cfgdir, statedir):
  Template = readfile("%s/Template.html" % cfgdir)
  page = Template.replace('@NUMBER@', str(pr['number']))
  page = page.replace('@TITLE@',  pr['title'])
  if status == '0':
    page = page.replace('@STATUS@', status + ' (&#10004;)')
  else:
    page = page.replace('@STATUS@', status + ' (&#215;)')
  page = page.replace('@LOG@', '<a href="Log.txt"> Log.txt </a>')
  page = page.replace('@GITHUB@', '<a href="%s"> See Pull Request on Github </a>' % pr['html_url'])
  writefile(os.path.join(statedir, 'webarea', str(pr['number']), 'index.html'), page)

# Test builds for pull requests against an specific branch in the gh repo.
# Update the pull req status according to overall result of tests on all
# the architectures.
def pull_req_tester(gh, owner, repo, branch, arch, all_archs, statedir, logdir, logurl, cfgdir, authfile):
  # get the relevant pull requests
  PRs = [i for i in gh.GetPullRequests(owner, repo) \
           if i['base']['label'] == owner+':'+branch]
  print 'Pull Requests to test:' 
  for pr in PRs:
    print "#%s," % pr['number'], pr['title']

  # process each pull request individually
  all_archs = all_archs.split(',')
  for pr in PRs:
    prstatus = gh.GetStatus(pr['statuses_url'])
    if prstatus:
      status = prstatus[0]['state']
      msg = prstatus[0]['description']
    else:
      status = 'pending'
      msg = None
    print 'Latest status is %s' % status

    # Find out if it has been tested already
    commit = pr['head']['sha']
    to_build = True
    for c in gh.GetComments(pr['comments_url']):
      to_build &= (c['body'].find('1 to %s on %s.' % (commit, arch)) < 0)

    # Then build it if needs to be tested
    if to_build:
      logfile = "test_"+commit[:7]+datetime.datetime.now().strftime("-%Y%m%d-%H%M%S.log")
      print '\nTesting (#%s), %s...' % (pr['number'], pr['title'])
      exitStatus = subprocess.call(["%s/build.sh" % cfgdir, \
                     "-p", pr['diff_url'], "-l", logfile, str(pr['number']),\
                     owner, branch, "HEAD", arch])
      if exitStatus == 0: githubStatus = '+1'
      else: githubStatus = '-1'
      generate_index_page(pr, str(exitStatus), cfgdir, statedir)
      gh.Comment2PullRequest(pr, '%s to %s on %s.<br>Build log can be found <a href="%s" target="_blank">here</a>.' % (githubStatus, commit, arch, logurl+str(pr['number'])+"/"+logfile))

    # Verify the overall status of architecture builds
    arch_status = {}
    for a in all_archs:
      arch_status[a] = 'pending'
    for c in gh.GetComments(pr['comments_url']):
      m = re.match('(\+|-)1 to %s on ([a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+)\.' % commit, c['body'])
      if m:
        if m.group(1) == '+':
          arch_status[m.group(2)] = 'success'
        else:
          arch_status[m.group(2)] = 'failure'

    # Update status on the pull request if needed
    newstatus = 'success' # ok unless there were failures or pending tests
    newmsg = 'build tested on %s' % ', '.join(all_archs)
    for a in all_archs:
      if arch_status[a] in ['failure', 'error']:
        newstatus = 'failure'
        newmsg = 'build test failed at least on %s' % a
        break # if any arch status is failure, the final status is failure
      if arch_status[a] == 'pending':
        if newstatus != 'pending':
          newmsg = 'build test pending on %s' % a
          newstatus = 'pending'
        else:
          newmsg += ', %s' % a
    if not prstatus or newstatus != status or newmsg != msg:
      gh.PostStatus(pr['statuses_url'], newstatus, newmsg)
      print 'Updating status to %s: %s' % (newstatus, newmsg)

# Pre-releases RPMs according to what has been pushed to the gh repository
def pre_release_rpms(gh, owner, repo, branch, arch, statedir, cfgdir, authfile):
  print "Checking for new commits:"
  cmfile = "%s/builds/%s/lastcommit" % (statedir, branch)
  lastcm = ""
  if os.path.isfile(cmfile):
    lastcm = readfile(cmfile).rstrip()

  cm = gh.GetLatestCommit(owner, repo, branch)    
  if cm['sha'] != lastcm:
    logfile = "prerelease_"+cm['sha'][:7]+datetime.datetime.now().strftime("-%Y%m%d-%H%M%S.log")
    print "New commit %s. Pre-releasing RPMs..." % cm['sha']
    subprocess.call(["%s/build.sh" % cfgdir, "-u", "-l", logfile,  branch, owner, branch, cm['sha'], arch])
  else:
    print "Last commit is still the same: %s" % lastcm


# Main program code. Process command line options.
if __name__ == '__main__':
  from optparse import OptionParser

  appname = __file__.rsplit('/', 2)[1]
  rootdir = __file__.rsplit('/', 4)[0]
  statedir = "%s/state/%s" % (rootdir, appname)
  logdir = "%s/logs/%s" % (rootdir, appname)
  cfgdir = "%s/current/config/%s" % (rootdir, appname)
  authfile = "%s/current/auth/%s/github-api-token" % (rootdir, appname)

  opt = OptionParser()
  opt.add_option("-O", "--owner", dest="owner", default="cms-sw",
                 help="github user holding the repository")
  opt.add_option("-R", "--repo", dest="repo", default="cmsdist",
                 help="repository name under the github account")
  opt.add_option("-B", "--branch", dest="branch", default="comp",
                 help="branch name to track for requests")
  opt.add_option("-a", "--arch", dest="arch", default="slc5_amd64_gcc461",
                 help="architecture this builder can test")
  opt.add_option("-T", "--all_archs", dest="all_archs", default="slc5_amd64_gcc461,slc6_amd64_gcc481,osx108_amd64_gcc481",
                 help="comma separated list of all the architectures")
  opt.add_option("-S", "--state", dest="statedir", metavar="DIR", default=statedir,
                 help="store state under DIR")
  opt.add_option("-L", "--log", dest="logdir", metavar="DIR", default=logdir,
                 help="store logs under DIR")
  opt.add_option("-U", "--url", dest="logurl",
                 help="publish logs under url")
  opt.add_option("-C", "--cfg", dest="cfgdir", metavar="DIR", default=cfgdir,
                 help="find app cfg files under DIR")
  opt.add_option("-A", "--auth", dest="authfile", metavar="FILE", default=authfile,
                 help="use the auth secret file FILE as the github OAuth token")
  opts, args = opt.parse_args()

  # Find dirs
  if not opts.statedir \
     or not os.path.isdir(opts.statedir) \
     or not os.access(opts.statedir, os.W_OK):
    print >> sys.stderr, sys.argv[0], \
      ": could not locate state directory, use --state (tried %s)" % opts.statedir
    sys.exit(1)

  if not opts.logdir \
     or not os.path.isdir(opts.logdir) \
     or not os.access(opts.logdir, os.W_OK):
    print >> sys.stderr, sys.argv[0], \
      ": could not locate log directory, use --log (tried %s)" % opts.logdir
    sys.exit(1)

  if not opts.cfgdir \
     or not os.path.isdir(opts.cfgdir):
    print >> sys.stderr, sys.argv[0], \
       ": could not locate cfg directory, use --cfg (tried %s)" % opts.cfgdir
    sys.exit(1)

  if not opts.authfile \
     or not os.path.isfile(opts.authfile) \
     or not os.access(opts.authfile, os.R_OK):
    print >> sys.stderr, sys.argv[0], \
       ": cannot access authentication token file, use --auth (tried %s)" % opts.authfile
    sys.exit(1)

  # github api object
  token = readfile(authfile).rstrip()
  gh = github.Github(token='token '+token)

  pre_release_rpms(gh, opts.owner, opts.repo, opts.branch, opts.arch,
                   opts.statedir, opts.cfgdir, opts.authfile)

  pull_req_tester(gh, opts.owner, opts.repo, opts.branch, opts.arch,
                  opts.all_archs, opts.statedir, opts.logdir, opts.logurl,
                  opts.cfgdir, opts.authfile)

