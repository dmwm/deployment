# vim: set ft=sh sw=2 ts=8 et :
deploy_dmwmbld_variants="default sl5 sl6 osx"

deploy_dmwmbld_prep()
{
  mkproj webarea
}

logurl="https://cern.ch/cms-dmwm-builds/"
webdir=/afs/cern.ch/user/d/dmwmbld/www

deploy_dmwmbld_sw()
{
  deploy_pkg -a dmwmbld/github-api-token \
             -a dmwmbld/ssh-key-to-cmsrep -a dmwmbld/ssh-key-to-cmsrep.pub

  if grep -q "create a token" $project_auth/github-api-token; then
    note "WARNING: you must set a github token."
    note "WARNING: see $project_auth/github-api-token for instructions."
  else :; fi
  if grep -q "generate a passwordless SSH key" $project_auth/ssh-key-to-cmsrep; then
    note "WARNING: you must set a SSH key to have access to the repository."
    note "WARNING: see $project_auth/ssh-key-to-cmsrep for instructions."
  else
    note "NOTE: you must put $project_auth/ssh-key-to-cmsrep.pub key"\
         "into SSH authorized keys for cmsbuild@cmsrep.cern.ch."
  fi
  chmod 400 $project_auth/*

  case $variant in
    # archs is a space separated list of <cmsdist-branch-name>:<rpm-arch> to build
    sl5 ) archs="comp:slc5_amd64_gcc461"
          all_archs=${archs##comp:}
          pkgtools="V00-21-XX:b174441c2295f1b30c5ff6494"
          ;;
    sl6 ) archs="comp_gcc481:slc6_amd64_gcc481 comp_gcc493:slc6_amd64_gcc493"
          all_archs="slc6_amd64_gcc481,slc6_amd64_gcc493,osx108_amd64_gcc481 "
          pkgtools="V00-22-XX:434bf060200793b0120e0027f"
          ;;
    osx ) archs="comp_gcc481:osx108_amd64_gcc481"
          all_archs="slc6_amd64_gcc481,slc6_amd64_gcc493,osx108_amd64_gcc481"
          pkgtools="V00-22-XX:434bf060200793b0120e0027f"
          ;;
    * )   archs="comp:$arch"
          all_archs=${archs##comp:}
          pkgtools="V00-21-XX:b174441c2295f1b30c5ff6494"
          webdir=$HOME/www/dmwmbld ;;
  esac

  # Setup pkgtools
  cd $root/$cfgversion/apps.$glabel
  git clone -b ${pkgtools%%:*} https://github.com/cms-sw/pkgtools
  cd pkgtools && git reset --hard ${pkgtools##*:}
  # Ugly hack for using ssh without needing access to home dir
  perl -p -i -e "s,([\'\"]ssh) ,\1 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i $project_auth/ssh-key-to-cmsrep ,gc" cmsBuild

  perl -p -i -e "s;{LOGURL};$logurl;g; \
                 s;{WEBDIR};$webdir;g; \
                 s;{ARCHS};$archs;g;   \
                 s;{ALLARCHS};$all_archs;g;" $root/$cfgversion/config/$project/dmwmbld_task
}

deploy_dmwmbld_post()
{
  case $variant in sl6 ) h="05-55/10" ;; * ) h="*/10" ;; esac
  (mkcrontab
   echo "$h * * * * $project_config/dmwmbld_task build"
   echo "0 0 * * * $project_config/dmwmbld_task logclean"
  ) | crontab -

  case $host:$root in
    vocms0106:/build/dmwmbld/srv | vocms022:/build/dmwmbld/srv )
      klist -s # must have afs kerberos token
      (acrontab -l | { fgrep -v -e " $host $project_config/" -e "$host ssh macms07" || true; }
       echo "*/10 * * * * $host $project_config/dmwmbld_task updateweb"
       # also run on the osx machine too due to lack of acron+afs there
       #[ "$host" != "vocms106" ] ||
       #  echo "*/10 * * * * $host $project_config/dmwmbld_task updateweb macms07:${project_state/build/build1}/webarea/"
      ) | acrontab
      note "NOTE: you must configure a CERN web area serving files from $webdir."
      ;;
    * )
      ;;
  esac
}

deploy_dmwmbld_auth()
{
  case $1 in
    */github-api-token )
      echo "Go to https://github.com/settings/tokens/new, create a token with "
      echo "any name, select only 'repo' and 'public_repo' for the scope,"
      echo "then click 'Generate token' and substitute all the text in this file"
      echo "by the produced token content."
      ;;
    */ssh-key-to-cmsrep* )
      echo "Use 'ssh-keygen' to generate a passwordless SSH key, then"
      echo "give it access on cmsbuild@cmsrep.cern.ch so that the"
      echo "build-agent can upload and sync-back RPMs to the repository."
      ;;
  esac
}
