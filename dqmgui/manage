#!/bin/sh

##H Usage 1: manage [options] ACTION [ARG] [SECURITY-STRING]
##H
##H Available actions:
##H   help            show this help
##H   version         get current version of the service
##H   status          show current service's status
##H   dstatus         show current service's detailed status
##H   sysboot         start server from crond if not running
##H   restart         (re)start the service
##H   start           (re)start the service
##H   stop            stop the service
##H   compile         refresh render plugins
##H   indexbackup     backup the index to CASTOR
##H   zipbackup       backup new root files to CASTOR
##H   zipbackupcheck  check if the backup of the root files to castor was successful
##H
##H Usage 2: manage [options] ACTION COMPONENTs [SECURITY-STRING]
##H COMPONENTs: webserver collector renderer logger agents afs-sync migration
##H
##H   xstatus     show status for COMPONENTs
##H   xdstatus    show detailed status for COMPONENTs
##H   xstart      (re)start COMPONENTs
##H   xrestart    (re)start COMPONENTs
##H   xstop       stop COMPONENTs
##H
##H Options:
##H -f flavor     Overide default flavor selected by server and domain.
##H               Flavors are: {online, caf, offline, offline-caf, dev, relval}
##H For more details please refer to operations page:
##H   https://twiki.cern.ch/twiki/bin/view/CMS/DQMGuiProduction

echo_e=-e bsdstart=bsdstart
case $(uname) in Darwin )
  md5sum() { md5 -r ${1+"$@"}; }
  echo_e= bsdstart=start
  ;;
esac

ME=$(basename $(dirname $0))
TOP=$(cd $(dirname $0)/../../.. && pwd)
ROOT=$(cd $(dirname $0)/../.. && pwd)
CFGDIR=$(dirname $0)
LOGDIR=$TOP/logs/$ME
STATEDIR=$TOP/state/$ME
HOST=$(hostname -s | tr '[:upper:]' '[:lower:]')
DOMAIN=$(hostname -d | tr '[:upper:]' '[:lower:]')
COLOR_OK="\\033[0;32m"
COLOR_WARN="\\033[0;31m"
COLOR_NORMAL="\\033[0;39m"
CONFIGS=
QUIET=false
FLAVOR=dev
ALTERNATIVE_USER=$(stat $TOP -c %U)
PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/kerberos/bin

. $ROOT/apps/dqmgui/128/etc/profile.d/env.sh

export QUIET_ASSERT=a
export X509_CERT_DIR=/etc/grid-security/certificates
export X509_USER_PROXY=$STATEDIR/proxy/proxy.cert
export X509_USER_CERT=$X509_USER_PROXY
export X509_USER_KEY=$X509_USER_PROXY
export STAGE_HOST=${STAGE_HOST:-castorcms}
export RFIO_USE_CASTOR_V2=YES
export STAGE_SVCCLASS=archive

# Set Flavor for HOST:DOMAIN
case $HOST:$DOMAIN in
  *:cms  ) FLAVOR=online ;;
  vocms138:* | vocms0138:* ) FLAVOR=offline-caf; ALTERNATIVE_USER='cmsweb' ;;
  vocms139:* | vocms0139:* ) FLAVOR=relval; ALTERNATIVE_USER='cmsweb' ;;
  vocms*:* ) FLAVOR=dev; ALTERNATIVE_USER='cmsweb' ;;
  *:cern.ch ) FLAVOR=offline;;
esac
# Select the right configuration and ALTERNATIVE_USER based on FLAVOR
getconfigs(){
case $FLAVOR in
  caf ) CONFIGS="caf" ;;
  online ) CONFIGS="online" ;;
  offline-caf ) CONFIGS="offline caf";;
  offline ) CONFIGS="offline";;
  relval ) CONFIGS="relval";;
  dev ) CONFIGS="dev";;
esac
}

message()
{
  $QUIET && return
  case $1 in
    -n ) shift; printf "%s" "$*" ;;
    * ) echo ${1+"$@"} ;;
  esac
}

refuseproc()
{
  local title="$1" pat="$2" reason="$3"
  if [ $(pgrep -u $(id -u) -f "$pat" | wc -l) != 0 ]; then
    echo "$title: $reason because processes matching '$pat' are still running" 1>&2
    exit 4
  fi
}

statproc()
{
  local user=$(id -u) title pat
  while [ $# -ge 1 ]; do
    case $1 in
      -u ) user=$2; shift; shift ;;
      -- ) shift; break ;;
      -* ) echo "$0 (statproc): bad option '$1'" 1>&2; exit 1 ;;
      *  ) break ;;
    esac
  done
  title="$1" pat="$2"
  pid=$(pgrep -u $user -f "$pat" | sort -n)
  if [ X"$pid" = X ]; then
    message $echo_e "$title is ${COLOR_WARN}NOT RUNNING${COLOR_NORMAL}."
  else
    message $echo_e "$title is ${COLOR_OK}RUNNING${COLOR_NORMAL}, PID" $pid
  fi
}

sdproc()
{
  local user=$(id -u) title pat
  while [ $# -ge 1 ]; do
    case $1 in
      -u ) user=$2; shift; shift ;;
      -- ) shift; break ;;
      -* ) echo "$0 (sdproc): bad option '$1'" 1>&2; exit 1 ;;
      *  ) break ;;
    esac
  done
  title="$1" pat="$2"
  local title="$1" pat="$2"
  message $echo_e "${COLOR_OK}${newline}${title}:${COLOR_NORMAL}"
  pgrep -u $(id -u) -f "$pat" | xargs -r ps -o pid=,bsdstart=,args= |
    perl -p -e 'use Term::ANSIColor qw(:constants);s/^/  /; END { $. || print RED,"  (none running)", RESET, "\n" } ' |
    sort -k 4
  newline="\n"
}


killproc()
{
  local T title pat nextmsg
  T=1 title="$1" pat="$2"
  nextmsg="${newline}Stopping ${title}:"
  for pid in $(pgrep -u $(id -u) -f "$pat" | sort -rn); do
    psline=$(ps -o pid=,$bsdstart=,args= $pid |
             perl -n -e 'print join(" ", (split)[0..4])')
    [ -n "$nextmsg" ] && { message $echo_e "$nextmsg"; nextmsg=; }
    message -n "Stopping $pid ($psline):"
    for sig in TERM TERM QUIT KILL; do
      message -n " SIG$sig"
      kill -$sig $pid
      sleep 1
      [ $(ps -o pid= -p $pid | wc -l) = 0 ] && break
      sleep $T
      T=$(expr $T \* 2)
      [ $(ps -o pid= -p $pid | wc -l) = 0 ] && break
    done
    message
    newline="\n"
  done
}

startagent()
{
  local edition=
  case $1 in
    -e ) edition=$2; shift;shift
  esac
  local logstem=${1}; shift
  ([ ! -z $edition ] && source $ROOT/apps/dqmgui/$edition/etc/profile.d/env.sh
   set -x; date; exec "$@") </dev/null 2>&1 | rotatelogs $LOGDIR/$logstem-%Y%m%d.log 86400 >/dev/null 2>&1 &
}

# Start service conditionally on crond restart.
sysboot()
{
  if [ $(pgrep -u $(id -u) -f "[/]monGui $CFGDIR" | wc -l) = 0 ]; then
    start
  fi
}

# Start the service.
start()
{
  cd $STATEDIR
  message "starting $ME/$FLAVOR ${1:-(default)}"

  # first start webserver
  case $HOST:${1:-webserver} in
    *:*webserver* )
      for cfg in $CONFIGS; do
        [ ! -d $STATEDIR/$cfg/ix128 ] && \
          (echo Creating index $STATEDIR/$cfg/ix128; visDQMIndex create $STATEDIR/$cfg/ix128)
        monControl start all from $CFGDIR/server-conf-$cfg.py
      done ;;
  esac

  # then start agents
  case $HOST:${1:-agents} in
    dqm-c2d07-01:*agents* ) # dqm-prod-local
      refuseproc "file agents" "visDQMIndex" "refusing to restart"

      D=online
      DQM_DATA=/dqmdata/dqm
      startagent $D/agent-receive \
        visDQMReceiveDaemon \
        $DQM_DATA/uploads \
        $DQM_DATA/repository/original \
        $DQM_DATA/agents/import-local \
        $DQM_DATA/agents/import-offsite \
        $DQM_DATA/agents/import-test

      startagent $D/agent-import-128 \
        visDQMImportDaemon \
        $DQM_DATA/agents/import-local \
        $DQM_DATA/repository/original \
        $STATEDIR/online/ix128

      startagent $D/agent-sound \
        visDQMSoundAlarmDaemon \
        http://localhost:8030/dqm/online \
        cmsdaqweb.cms \
        50555 600 2
      ;;

    dqm-c2d07-02:*agents* ) # dqm-prod-offsite
      refuseproc "file agents" "visDQMIndex" "refusing to restart"

      D=online
      DQM_DATA=/dqmdata/dqm
      startagent $D/agent-import-128 \
        visDQMImportDaemon \
        $DQM_DATA/agents/import-offsite \
        $DQM_DATA/repository/original \
        $STATEDIR/online/ix128
      ;;

    dqm-c2d07-11:*agents* ) # dqm-integration
      refuseproc "file agents" "visDQMIndex" "refusing to restart"

      D=online
      DQM_DATA=$STATEDIR/online
      startagent $D/agent-receive \
        visDQMReceiveDaemon \
        $DQM_DATA/uploads \
        $DQM_DATA/data \
        $DQM_DATA/agents/register \

      startagent $D/agent-import-128 \
        visDQMImportDaemon \
        $DQM_DATA/agents/register \
        $DQM_DATA/data \
        $STATEDIR/online/ix128
      ;;

    dqm-c2d07-12:*agents* ) # dqm-test
      refuseproc "file agents" "visDQMIndex" "refusing to restart"

      D=online
      DQM_DATA=/dqmdata/dqm
      startagent $D/agent-import-128 \
        visDQMImportDaemon \
        $DQM_DATA/agents/import-test \
        $DQM_DATA/repository/original \
        $STATEDIR/online/ix128
      ;;

    vocms13[89]:*agents* ) # SLC5 relval/offline/caf server
      refuseproc "file agents" "visDQMIndex|[^/]zip +|OnlineSync|visDQMCreateInfo" "refusing to restart"

      for D in $CONFIGS; do
        D=${D}
        DQM_DATA=$STATEDIR/$D

        startagent $D/agent-receive \
          visDQMReceiveDaemon \
          $DQM_DATA/uploads \
          $DQM_DATA/data \
          $DQM_DATA/agents/register \
          $DQM_DATA/agents/zip

        startagent $D/agent-import-128 \
          visDQMImportDaemon \
          $DQM_DATA/agents/register \
          $DQM_DATA/data \
          $DQM_DATA/ix128 \
          $DQM_DATA/agents/qcontrol \
          $DQM_DATA/agents/vcontrol

        startagent $D/agent-qcontrol \
          visDQMRootFileQuotaControl \
          $DQM_DATA/agents/qcontrol \
          $DQM_DATA/agents/register \
          $DQM_DATA/data \
          $CFGDIR/quota-rfqc-${D}.py

        startagent $D/agent-vcontrol \
          visDQMVerControlDaemon \
          $DQM_DATA/agents/vcontrol \
          $DQM_DATA/data

        startagent $D/agent-ixmerge \
            visDQMIndexMergeDaemon \
            $DQM_DATA/agents/ixmerge \
            $DQM_DATA/ix128 \
            $DQM_DATA/agents/register

        # When the period of parallel running is finished,
        # the zip and zipfreeze below should be removed

        startagent $D/agent-zip \
          visDQMZipDaemon \
          $DQM_DATA/agents/zip \
          $DQM_DATA/data \
          $DQM_DATA/zipped \
          $DQM_DATA/agents/freezer

        startagent $D/agent-zfreeze \
          visDQMZipFreezeDaemon \
          $DQM_DATA/agents/freezer \
          $DQM_DATA/zipped \
          7 \
          $DQM_DATA/agents/stageout

        if [ $D = offline ]; then
          startagent $D/agent-osync \
            visDQMOnlineSyncDaemon \
            -s https://cmsweb.cern.ch/dqm/online/data/browse/Original \
            -d 14400 \
            -n 50 \
            /dev/null \
            $DQM_DATA/data/OnlineData/original

          startagent $D/agent-coinfo \
            visDQMCreateInfoDaemon \
            $DQM_DATA/data/OnlineData \
            $DQM_DATA/agents/zip
        fi

      done
      ;;

    vocms013[89]:*agents* ) # SLC6 relval/offline/caf server
      refuseproc "file agents" "visDQMIndex|[^/]zip +|OnlineSync|visDQMCreateInfo" "refusing to restart"

      for D in $CONFIGS; do
        D=${D}
        DQM_DATA=$STATEDIR/$D

        startagent $D/agent-receive \
          visDQMReceiveDaemon \
          $DQM_DATA/uploads \
          $DQM_DATA/data \
          $DQM_DATA/agents/register \
          $DQM_DATA/agents/zip

        startagent $D/agent-import-128 \
          visDQMImportDaemon \
          $DQM_DATA/agents/register \
          $DQM_DATA/data \
          $DQM_DATA/ix128 \
          --next $DQM_DATA/agents/qcontrol $DQM_DATA/agents/vcontrol \
          --rsync \
          --rsyncnext $DQM_DATA/agents/ixstageout \
          --email broen.van.besien@cern.ch,marco.rovere@cern.ch

        startagent $D/agent-qcontrol \
          visDQMRootFileQuotaControl \
          $DQM_DATA/agents/qcontrol \
          $DQM_DATA/agents/register \
          $DQM_DATA/data \
          $CFGDIR/quota-rfqc-${D}.py

        startagent $D/agent-vcontrol \
          visDQMVerControlDaemon \
          $DQM_DATA/agents/vcontrol \
          $DQM_DATA/data

        # When the period of parallel running is finished,
        # zip and zipfreeze should be added here

        if [ $D = offline ]; then
          startagent $D/agent-osync \
            visDQMOnlineSyncDaemon \
            -s https://cmsweb.cern.ch/dqm/online/data/browse/Original \
            -d 14400 \
            -n 50 \
            /dev/null \
            $DQM_DATA/data/OnlineData/original

          startagent $D/agent-coinfo \
            visDQMCreateInfoDaemon \
            $DQM_DATA/data/OnlineData \
            $DQM_DATA/agents/zip
        fi

      done
      ;;

    # Special setup for the vocms0133 test server. (In the past this didn't run the Castor agent chain)
    # This runs the agents to backup the zipped root files to Castor, but at a "faster" tempo for testing
    vocms0133:*agents* )
      refuseproc "file agents" "visDQMIndex|[^/]zip +|OnlineSync|visDQMCreateInfo" "refusing to restart"

      for D in $CONFIGS; do
        D=${D}
        DQM_DATA=$STATEDIR/$D

        startagent $D/agent-receive \
          visDQMReceiveDaemon \
          $DQM_DATA/uploads \
          $DQM_DATA/data \
          $DQM_DATA/agents/register \
          $DQM_DATA/agents/zip

        startagent $D/agent-import-128 \
          visDQMImportDaemon \
          $DQM_DATA/agents/register \
          $DQM_DATA/data \
          $DQM_DATA/ix128 \
          --next $DQM_DATA/agents/qcontrol $DQM_DATA/agents/vcontrol \
          --rsync \
          --rsyncnext $DQM_DATA/agents/ixstageout \
          --email broen.van.besien@cern.ch

        startagent $D/agent-qcontrol \
          visDQMRootFileQuotaControl \
          $DQM_DATA/agents/qcontrol \
          $DQM_DATA/agents/register \
          $DQM_DATA/data \
          $CFGDIR/quota-rfqc-${D}.py

        startagent $D/agent-vcontrol \
          visDQMVerControlDaemon \
          $DQM_DATA/agents/vcontrol \
          $DQM_DATA/data

        startagent $D/agent-zip \
          visDQMZipDaemon \
          $DQM_DATA/agents/zip \
          $DQM_DATA/data \
          $DQM_DATA/zipped \
          $DQM_DATA/agents/freezer

        # BVB: We freeze zip files faster (1 days instead of 7)
        startagent $D/agent-zfreeze \
          visDQMZipFreezeDaemon \
          $DQM_DATA/agents/freezer \
          $DQM_DATA/zipped \
          1 \
          $DQM_DATA/agents/stageout
      done
      ;;

    # BVB: This is only for testing
    broen*:*agents* ) # Broens test system (basically doing what offline does)
      refuseproc "file agents" "visDQMIndex|[^/]zip +|OnlineSync|visDQMCreateInfo" "refusing to restart"

      for D in $CONFIGS; do
        D=${D}
        DQM_DATA=$STATEDIR/$D

        startagent $D/agent-receive \
          visDQMReceiveDaemon \
          $DQM_DATA/uploads \
          $DQM_DATA/data \
          $DQM_DATA/agents/register \
          $DQM_DATA/agents/zip

        startagent $D/agent-import-128 \
          visDQMImportDaemon \
          $DQM_DATA/agents/register \
          $DQM_DATA/data \
          $DQM_DATA/ix128 \
          --next $DQM_DATA/agents/qcontrol $DQM_DATA/agents/vcontrol \
          --rsync \
          --time 05:00 \
          --rsyncnext $DQM_DATA/agents/ixstageout \
          --email broen.van.besien@cern.ch

        startagent $D/agent-qcontrol \
          visDQMRootFileQuotaControl \
          $DQM_DATA/agents/qcontrol \
          $DQM_DATA/agents/register \
          $DQM_DATA/data \
          $CFGDIR/quota-rfqc-${D}.py

        startagent $D/agent-vcontrol \
          visDQMVerControlDaemon \
          $DQM_DATA/agents/vcontrol \
          $DQM_DATA/data

        startagent $D/agent-zip \
          visDQMZipDaemon \
          $DQM_DATA/agents/zip \
          $DQM_DATA/data \
          $DQM_DATA/zipped \
          $DQM_DATA/agents/freezer

        # BVB: We freeze zip files immediately (0 days instead of 7)
        startagent $D/agent-zfreeze \
          visDQMZipFreezeDaemon \
          $DQM_DATA/agents/freezer \
          $DQM_DATA/zipped \
          0 \
          $DQM_DATA/agents/stageout
      done
      ;;

    vocms138:*afs-sync* ) # afs-sync only started on SLC5, stopped when migrating to SLC6
      refuseproc "afs sync" "visDQMAfsSync"

      DIRS=OnlineData,OfflineData/HIRun2011/StreamHIExpress
      DIRS=$DIRS,OfflineData/HIRun2011/StreamExpressCosmics
      DIRS=$DIRS,OfflineData/HIRun2011/Commissioning
      DIRS=$DIRS,OfflineData/ComissioningHI11
      DIRS=$DIRS,OfflineData/HIRun2011/Cosmics
      DIRS=$DIRS,OfflineData/HIRun2011/MinimumBias

      for D in offline; do
        DQM_DATA=$STATEDIR/$D
        startagent $D/agent-afssync \
          visDQMAfsSync \
          --dirs $DIRS \
          --dirs_quotas=30G,20G,20G,15G,15G,15G,15G 130G \
          $DQM_DATA/data /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/data
      done
      ;;

    *:*agents* )
      refuseproc "file agents" "visDQMIndex|[^/]zip +" "refusing to restart"

      for D in $FLAVOR; do
        DQM_DATA=$STATEDIR/$D
        startagent $D/agent-receive \
          visDQMReceiveDaemon \
          $DQM_DATA/uploads \
          $DQM_DATA/data \
          $DQM_DATA/agents/register

        startagent $D/agent-import-128 \
          visDQMImportDaemon \
          $DQM_DATA/agents/register \
          $DQM_DATA/data \
          $DQM_DATA/ix128 \
          --next $DQM_DATA/agents/qcontrol $DQM_DATA/agents/vcontrol

        startagent $D/agent-qcontrol \
          visDQMRootFileQuotaControl \
          $DQM_DATA/agents/qcontrol \
          $DQM_DATA/agents/register \
          $DQM_DATA/data \
          $CFGDIR/quota-rfqc-${D}.py

        startagent $D/agent-vcontrol \
          visDQMVerControlDaemon \
          $DQM_DATA/agents/vcontrol \
          $DQM_DATA/data
      done
      ;;
  esac

  # maybe start migration
  case $HOST:$1 in
    dqm-c2d07-21:*migration* )
      refuseproc "migration agents" "visDQMMigrationProcess" "refusing to restart"

      for i in $(seq 1 $(expr 5 + $(expr $(date +%s) % 10))); do key=$RANDOM; done
      message -n "$0: really start migration agents? (y/n) "
      read answer; case $answer in y ) ;; * ) exit 2 ;; esac
      message -n "$0: that was probably a mistake! say $key if you *really* want to continue: "
      read answer; case $answer in $key ) ;; * ) exit 2 ;; esac

      zsh -c '
        jobs -Z "visDQMMigrationProcess";
        while true; do
          for f in $(find repository{2,3}/original -name "DQM_V????_*_R00*.root" | sort); do
            if [ $(find repository/original -name $(basename $f) | wc -l) = 0 ]; then
              v=$(basename $f | sed "s/.*_V\([0-9][0-9][0-9][0-9]\)_.*/\1/")
              b=uploads2/$v/$(basename $f | sed s/_V${v}_/_V0001_/)
              [ -f $b -o -f $b.bad -o -f $b.origin.bad ] && continue
              mkdir -p $(dirname $b)
              ln $f $b
              echo "md5:$(md5sum < $b | awk '{print $1}') $(stat -c '%s' $b) $b" > $b.origin
            fi
          done
          sleep 1200
        done' </dev/null 2>&1 | rotatelogs $LOGDIR/agent-migration-%Y%m%d.log 86400 >/dev/null 2>&1 &
      ;;

    vocms116:*migration* | vocms0116:*migration*  ) # offline
      refuseproc "migration agents" "visDQMMigrationProcess" "refusing to restart"

      for i in $(seq 1 $(expr 5 + $(expr $(date +%s) % 10))); do key=$RANDOM; done
      message -n "$0: really start migration agents? (y/n) "
      read answer; case $answer in y ) ;; * ) exit 2 ;; esac
      message -n "$0: that was probably a mistake! say $key if you *really* want to continue: "
      read answer; case $answer in $key ) ;; * ) exit 2 ;; esac

      for D in offline caf dev; do
        zsh -c '
          cd '$D'
          jobs -Z "visDQMMigrationProcess";
          for f in $(find old/data -name "*.root.origin" | sort); do
            if [ $(find repository/data -name $(basename ${f%.origin}) | wc -l) = 0 ]; then
              v=$(basename $f | sed "s/.*_V\([0-9][0-9][0-9][0-9]\)_.*/\1/")
              b=uploads2/$v/$(basename $f | sed s/_V${v}_/_V0001_/)
              if [ ! -f $b -a ! -f $b.bad ]; then
                mkdir -p $(dirname $b)
                ln $f $b
                ln ${f%.origin} ${b%.origin}
              fi
            fi
          done' </dev/null 2>&1 | rotatelogs $LOGDIR/$D/agent-migration-$D-%Y%m%d.log 86400 >/dev/null 2>&1 &
      done
      ;;
  esac

  # finally start collector
  case $FLAVOR:$HOST:${1:-collector} in
    online:dqm-c2d07-[01]1:*collector* )
      DQMCollector --listen 9090 </dev/null 2>&1 | rotatelogs $LOGDIR/$FLAVOR/collector-%Y%m%d.log 86400 >/dev/null 2>&1 & ;;
    online:dqm-c2d07-[01]2:*collector* ) ;;
    online:*:*collector* )
      DQMCollector --listen 9190 </dev/null 2>&1 | rotatelogs $LOGDIR/$FLAVOR/collector-%Y%m%d.log 86400 >/dev/null 2>&1 & ;;
    *:*:*collector* )
      DQMCollector --listen 8061 </dev/null 2>&1 | rotatelogs $LOGDIR/$FLAVOR/collector-%Y%m%d.log 86400 >/dev/null 2>&1 & ;;
  esac

}

# Stop the service.
stop()
{
  message "stopping $ME/$FLAVOR ${1:-(default)}"
  case ${1:-agents} in *agents* )
    killproc "$ME file agents" "visDQM.*Daemon|visDQMZip|visDQMRootFileQuotaControl" ;;
  esac
  case ${1:-afs-sync} in *afs-sync* )
    killproc "$ME afs sync" "visDQMAfsSync" ;;
  esac
  case ${1:-sound} in *sound* )
    killproc "$ME sound alarm daemon " "visDQMSoundAlarmDaemon" ;;
  esac
  case $1 in *migration* )
    killproc "$ME migration agents" "visDQMMigration|sleep" ;;
  esac
  case ${1:-collector} in *collector* )
    killproc "$ME collector" "DQMCollector"
  esac
  case ${1:-webserver} in *webserver* )
    for cfg in $CONFIGS; do
      monControl stop all from $CFGDIR/server-conf-$cfg.py
    done ;;
  esac
}

# Check if the server is running.
status()
{
  case ${1:-webserver} in *webserver* )
    statproc "$ME webserver" "[/]monGui $CFGDIR" ;;
  esac
  case ${1:-renderer} in *renderer* )
    statproc "$ME renderer" "visDQMRender" ;;
  esac
  case ${1:-collector} in *collector* )
    statproc "$ME collector" "DQMCollector" ;;
  esac
  case ${1:-logger} in *logger* )
    statproc "$ME loggers" "rotatelogs" ;;
  esac
  case ${1:-agents} in *agents* )
    statproc "$ME file agents" "visDQM.*Daemon|visDQM.*Verifier|visDQMIndex|zip|visDQMRootFileQuotaControl" ;;
  esac
  case ${1:-afs-sync} in *afs-sync* )
    statproc -u $ALTERNATIVE_USER "$ME afs sync" "visDQMAfsSync" ;;
  esac
  case $1 in *migration* )
    statproc "$ME migration" "visDQMMigration|sleep" ;;
  esac
}

# Give details of server componenets
detailstatus()
{
  case ${1:-webserver} in *webserver* )
    sdproc "$ME webserver" "[/]monGui $CFGDIR" ;;
  esac
  case ${1:-renderer} in *renderer* )
    sdproc "$ME renderer" "visDQMRender" ;;
  esac
  case ${1:-collector} in *collector* )
    sdproc "$ME collector" "DQMCollector" ;;
  esac
  case ${1:-logger} in *logger* )
    sdproc "$ME loggers" "rotatelogs" ;;
  esac
  case ${1:-agents} in *agents* )
    sdproc "$ME file agents" "visDQM.*Daemon|visDQM.*Verifier|visDQMIndex|zip|visDQMRootFileQuotaControl" ;;
  esac
  case ${1:-afs-sync} in *afs-sync* )
    sdproc -u $ALTERNATIVE_USER "$ME afs sync" "visDQMAfsSync" ;;
  esac
  case $1 in *migration* )
    sdproc "$ME migration" "visDQMMigration|sleep" ;;
  esac
}

# (Re)compile render plugins.
compile()
{
  for cfg in $CONFIGS; do
    monControl rebuild all from $CFGDIR/server-conf-$cfg.py
  done
}

# Backup index to castor
# The backup is incremental, with a full backup at regular intervals
indexbackup()
{
  refuseproc "castor index backup" "visDQMIndexCastorStager"

  for D in $CONFIGS; do
    D=${D}
    # Set default CASTOR directory to a testing area. Only the production servers get the real thing.
    case $HOST in
      vocms013[389] )
        CASTORDIR=/castor/cern.ch/cms/store/dqm/ixbackup/$D
        ;;
      * )
        CASTORDIR=/castor/cern.ch/cms/store/dqm/testing/ixbackup/$D
        ;;
    esac
    # The standard amount of days after which we do a full backup is 50 days.
    # Only for testing purposes, we set this on 5 days for vocms0133.
    FULLBACKUPDAYS=50
    case $HOST in
      vocms0133 )
        FULLBACKUPDAYS=5
        ;;
    esac
    DQM_DATA=$STATEDIR/$D
    LOGSTEM=$D/agent-castorindexbackup
    # Start the process not as an agent, but directly in the current thread.
    # It is supposed to be started from/by acrontab on regular intervals (like 15 mins).
    # The backup is incremental, but we do a full backup every 50 days.
    visDQMIndexCastorStager \
      $DQM_DATA/agents/ixstageout \
      $DQM_DATA/ix128 \
      $CASTORDIR \
      broen.van.besien@cern.ch \
      --fullbackup $FULLBACKUPDAYS \
      </dev/null 2>&1 | rotatelogs $LOGDIR/$LOGSTEM-%Y%m%d.log 86400 >/dev/null 2>&1
  done
}

# Backup new root files (zipped) to castor
zipbackup()
{
  refuseproc "castor root file backup" "visDQMZipCastorStager"

  for D in $CONFIGS; do
    D=${D}
    # Set default CASTOR directory to a testing area. Only the production servers get the real thing.
    case $HOST in
      vocms013[389] )
        CASTORDIR=/castor/cern.ch/cms/store/dqm/data/$(echo $D | sed -r 's/(offline|relval)/dqmdata/')
        ;;
      * )
        CASTORDIR=/castor/cern.ch/cms/store/dqm/testing/data/$(echo $D | sed -r 's/(offline|relval)/dqmdata/')
        ;;
    esac
    DQM_DATA=$STATEDIR/$D
    LOGSTEM=$D/agent-castorzipbackup
    # Start the process not as an agent, but directly in the current thread.
    # It is supposed to be started from/by acrontab on regular intervals (like 15 mins).
    visDQMZipCastorStager \
      $DQM_DATA/agents/stageout \
      $DQM_DATA/zipped \
      $CASTORDIR \
      $DQM_DATA/agents/verify \
      </dev/null 2>&1 | rotatelogs $LOGDIR/$LOGSTEM-%Y%m%d.log 86400 >/dev/null 2>&1
  done
}

# Check / verify the backup of the zipped root files to castor
zipbackupcheck()
{
  refuseproc "castor root file backup check" "visDQMZipCastorVerifier"

  for D in $CONFIGS; do
    D=${D}
    # Modify Castor dir for specific local test server, so that this can be tested by the cmsdqm account
    case $HOST in
      vocms013[389] )
        CASTORDIR=/castor/cern.ch/cms/store/dqm/data/$(echo $D | sed -r 's/(offline|relval)/dqmdata/')
        ;;
      * )
        CASTORDIR=/castor/cern.ch/cms/store/dqm/logarchive/test/dqmguidata/$(echo $D | sed -r 's/(offline|relval)/dqmdata/')
        ;; 
    esac
    DQM_DATA=$STATEDIR/$D
    LOGSTEM=$D/agent-castorzipbackupcheck
    # Start the original agent process, however, not as an agent, but directly in the current thread.
    # The agent was modified in such a way that it exits after each cycle.
    # It is supposed to be started from/by acrontab.
    visDQMZipCastorVerifier \
      $DQM_DATA/agents/verify \
      marco.rovere@cern.ch,broen.van.besien@cern.ch \
      $DQM_DATA/zipped \
      $CASTORDIR \
      24 \
      $DQM_DATA/agents/clean \
      </dev/null 2>&1 | rotatelogs $LOGDIR/$LOGSTEM-%Y%m%d.log 86400 >/dev/null 2>&1
  done
}

# Verify the security string.
check()
{
  CHECK=$(echo "$1" | md5sum | awk '{print $1}')
  if [ $CHECK != 94e261a5a70785552d34a65068819993 ]; then
    echo "$0: cannot complete operation, please check documentation." 1>&2
    exit 2;
  fi
}

# Main routine, perform action requested on command line.
while [ $# -ge 1 ]; do
  case $1 in
    -q ) QUIET=true; shift ;;
    -f ) FLAVOR=$2; shift;shift;;
    -h ) set -- help ;;
    -- ) shift; break ;;
    -* ) echo "$0: unrecognised option '$1'" 1>&2; exit 1;;
    *  ) break ;;
  esac
done
newline=""
getconfigs

# Check user name. Everything except afs-sync, indexbackup, zipbackup and
# zipbackupcheck must run as non-$ALTERNATIVE_USER account, afs-sync,
# indexbackup, zipbackup and zipbackupcheck must be under $ALTERNATIVE_USER,
# refuse to run otherwise.
case $FLAVOR:$(id -un):$1:$2 in
  *:$ALTERNATIVE_USER:*:afs-sync | *:$ALTERNATIVE_USER:indexbackup:* | *:$ALTERNATIVE_USER:zipbackup:* | *:$ALTERNATIVE_USER:zipbackupcheck:* )
    ;;

  offline-caf:$ALTERNATIVE_USER:*:* | offline-caf:*:*:afs-sync | offline-caf:*:indexbackup:* | offline-caf:*:zipbackup:* | offline-caf:*:zipbackupcheck:* )
    echo "ERROR: please use another account" 1>&2
    exit 1 ;;

  relval:$ALTERNATIVE_USER:*:* | relval:*:*:afs-sync | relval:*:indexbackup:* | relval:*:zipbackup:* | relval:*:zipbackupcheck:* )
    echo "ERROR: please use another account" 1>&2
    exit 1 ;;
esac

case ${1:-status} in
  sysboot )
    sysboot
    ;;

  start | restart )
    check "$2"
    stop
    start
    ;;

  status )
    status
    ;;

  dstatus )
    detailstatus
    ;;

  stop )
    check "$2"
    stop
    ;;

  compile )
    compile
    ;;

  xstart | xrestart )
    check "$3"
    stop "$2"
    start "$2"
    ;;

  xstatus)
    status "$2"
    ;;

  xdstatus )
    detailstatus "$2"
    ;;

  xstop )
    check "$3"
    stop "$2"
    ;;

  indexbackup )
    check "$2"
    indexbackup
    ;;

  zipbackup )
    check "$2"
    zipbackup
    ;;

  zipbackupcheck )
    check "$2"
    zipbackupcheck
    ;;

  help )
    perl -ne '/^##H/ && do { s/^##H ?//; print }' < $0
    ;;

  version )
    echo "$DQMGUI_VERSION"
    ;;

  * )
    echo "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
    exit 1
    ;;
esac
