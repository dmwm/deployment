#!/bin/sh

##H Usage 1: manage [options] ACTION [ARG] [SECURITY-STRING]
##H
##H Available actions:
##H   help        show this help
##H   version     get current version of the service
##H   status      show current service's status
##H   dstatus      show current service's detailed status
##H   sysboot     start server from crond if not running
##H   restart     (re)start the service
##H   start       (re)start the service
##H   stop        stop the service
##H   compile     refresh render plugins
##H   backup      backup the current service state by archiving it to ARG area in castor
##H
##H Usage 2: manage [options] ACTION COMPONENTs [SECURITY-STRING]
##H COMPONENTs: webserver collector renderer logger agents afs-sync migration
##H
##H   xstatus     show status for COMPONENTs
##H   xdstatus     show detailed status for COMPONENTs
##H   xstart      (re)start COMPONENTs
##H   xrestart    (re)start COMPONENTs
##H   xstop       stop COMPONENTs
##H
##H Options:
##H -f flavor     Overide default flavor selected by server and domain.
##H               Flavors are: {online, caf, offline, offline-caf, dev, relval}
##H For more details please refer to operations page:
##H   https://twiki.cern.ch/twiki/bin/view/CMS/DQMGuiProduction

echo_e=-e bsdstart=bsdstart
case $(uname) in Darwin )
  md5sum() { md5 -r ${1+"$@"}; }
  echo_e= bsdstart=start
  ;;
esac

ME=$(basename $(dirname $0))
TOP=$(cd $(dirname $0)/../../.. && pwd)
ROOT=$(cd $(dirname $0)/../.. && pwd)
CFGDIR=$(dirname $0)
LOGDIR=$TOP/logs/$ME
STATEDIR=$TOP/state/$ME
HOST=$(hostname -s | tr '[:upper:]' '[:lower:]')
DOMAIN=$(hostname -d | tr '[:upper:]' '[:lower:]')
COLOR_OK="\\033[0;32m"
COLOR_WARN="\\033[0;31m"
COLOR_NORMAL="\\033[0;39m"
CONFIGS=
QUIET=false
FLAVOR=dev
ALTERNATIVE_USER=$(stat $TOP -c %U)
PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/kerberos/bin

# this hack is needed while dqmgui is still using castor 2.1.9.8
if [ $# -ge 1 -a "$1" = "backup" ]; then
  export STAGE_SVCCLASS=archive
  # do not source the env because we want to pick the system castor
else
  case $HOST in
    * )
      . $ROOT/apps/dqmgui/128/etc/profile.d/env.sh ;;
  esac
fi

export QUIET_ASSERT=a
export X509_CERT_DIR=/etc/grid-security/certificates
export X509_USER_PROXY=$STATEDIR/proxy/proxy.cert
export X509_USER_CERT=$X509_USER_PROXY
export X509_USER_KEY=$X509_USER_PROXY
export STAGE_HOST=${STAGE_HOST:-castorcms}
export RFIO_USE_CASTOR_V2=YES

# Set Flavor for HOST:DOMAIN
case $HOST:$DOMAIN in
  *:cms  ) FLAVOR=online ;;
  vocms138:* | vocms0138:* ) FLAVOR=offline-caf; ALTERNATIVE_USER='cmsweb' ;;
  vocms139:* | vocms0139:* ) FLAVOR=relval; ALTERNATIVE_USER='cmsweb' ;;
  vocms*:* ) FLAVOR=dev; ALTERNATIVE_USER='cmsweb' ;;
  *:cern.ch ) FLAVOR=offline;;
esac
# Select the right configuration and ALTERNATIVE_USER based on FLAVOR
getconfigs(){
case $FLAVOR in
  caf ) CONFIGS="caf" ;;
  online ) CONFIGS="online" ;;
  offline-caf ) CONFIGS="offline caf";;
  offline ) CONFIGS="offline";;
  relval ) CONFIGS="relval";;
  dev ) CONFIGS="dev";;
esac
}

message()
{
  $QUIET && return
  case $1 in
    -n ) shift; printf "%s" "$*" ;;
    * ) echo ${1+"$@"} ;;
  esac
}

refuseproc()
{
  local title="$1" pat="$2" reason="$3"
  if [ $(pgrep -u $(id -u) -f "$pat" | wc -l) != 0 ]; then
    echo "$title: $reason because processes matching '$pat' are still running" 1>&2
    exit 4
  fi
}

statproc()
{
  local user=$(id -u) title pat
  while [ $# -ge 1 ]; do
    case $1 in
      -u ) user=$2; shift; shift ;;
      -- ) shift; break ;;
      -* ) echo "$0 (statproc): bad option '$1'" 1>&2; exit 1 ;;
      *  ) break ;;
    esac
  done
  title="$1" pat="$2"
  pid=$(pgrep -u $user -f "$pat" | sort -n)
  if [ X"$pid" = X ]; then
    message $echo_e "$title is ${COLOR_WARN}NOT RUNNING${COLOR_NORMAL}."
  else
    message $echo_e "$title is ${COLOR_OK}RUNNING${COLOR_NORMAL}, PID" $pid
  fi
}

sdproc()
{
  local user=$(id -u) title pat
  while [ $# -ge 1 ]; do
    case $1 in
      -u ) user=$2; shift; shift ;;
      -- ) shift; break ;;
      -* ) echo "$0 (sdproc): bad option '$1'" 1>&2; exit 1 ;;
      *  ) break ;;
    esac
  done
  title="$1" pat="$2"
  local title="$1" pat="$2"
  message $echo_e "${COLOR_OK}${newline}${title}:${COLOR_NORMAL}"
  pgrep -u $(id -u) -f "$pat" | xargs -r ps -o pid=,bsdstart=,args= |
    perl -p -e 'use Term::ANSIColor qw(:constants);s/^/  /; END { $. || print RED,"  (none running)", RESET, "\n" } ' |
    sort -k 4
  newline="\n"
}


killproc()
{
  local T title pat nextmsg
  T=1 title="$1" pat="$2"
  nextmsg="${newline}Stopping ${title}:"
  for pid in $(pgrep -u $(id -u) -f "$pat" | sort -rn); do
    psline=$(ps -o pid=,$bsdstart=,args= $pid |
             perl -n -e 'print join(" ", (split)[0..4])')
    [ -n "$nextmsg" ] && { message $echo_e "$nextmsg"; nextmsg=; }
    message -n "Stopping $pid ($psline):"
    for sig in TERM TERM QUIT KILL; do
      message -n " SIG$sig"
      kill -$sig $pid
      sleep 1
      [ $(ps -o pid= -p $pid | wc -l) = 0 ] && break
      sleep $T
      T=$(expr $T \* 2)
      [ $(ps -o pid= -p $pid | wc -l) = 0 ] && break
    done
    message
    newline="\n"
  done
}

startagent()
{
  local edition=
  case $1 in
    -e ) edition=$2; shift;shift
  esac
  local logstem=${1}; shift
  ([ ! -z $edition ] && source $ROOT/apps/dqmgui/$edition/etc/profile.d/env.sh
   set -x; date; exec "$@") </dev/null 2>&1 | rotatelogs $LOGDIR/$logstem-%Y%m%d.log 86400 >/dev/null 2>&1 &
}

# Start service conditionally on crond restart.
sysboot()
{
  if [ $(pgrep -u $(id -u) -f "[/]monGui $CFGDIR" | wc -l) = 0 ]; then
    start
  fi
}

# Start the service.
start()
{
  cd $STATEDIR
  message "starting $ME/$FLAVOR ${1:-(default)}"

  # first start webserver
  case $HOST:${1:-webserver} in
    *:*webserver* )
      for cfg in $CONFIGS; do
        [ ! -d $STATEDIR/$cfg/ix128 ] && \
          (echo Creating index $STATEDIR/$cfg/ix128; visDQMIndex create $STATEDIR/$cfg/ix128)
        monControl start all from $CFGDIR/server-conf-$cfg.py
      done ;;
  esac

  # then start agents
  case $HOST:${1:-agents} in
    dqm-c2d07-01:*agents* ) # dqm-prod-local
      refuseproc "file agents" "visDQMIndex" "refusing to restart"

      D=online
      DQM_DATA=/dqmdata/dqm
      startagent $D/agent-receive \
        visDQMReceiveDaemon \
        $DQM_DATA/uploads \
        $DQM_DATA/repository/original \
        $DQM_DATA/agents/import-local \
        $DQM_DATA/agents/import-offsite \
        $DQM_DATA/agents/import-test

      startagent $D/agent-import-128 \
        visDQMImportDaemon \
        $DQM_DATA/agents/import-local \
        $DQM_DATA/repository/original \
        $STATEDIR/online/ix128

      startagent $D/agent-sound \
        visDQMSoundAlarmDaemon \
        http://localhost:8030/dqm/online \
        cmsdaqweb.cms \
        50555 600 2
      ;;

    dqm-c2d07-02:*agents* ) # dqm-prod-offsite
      refuseproc "file agents" "visDQMIndex" "refusing to restart"

      D=online
      DQM_DATA=/dqmdata/dqm
      startagent $D/agent-import-128 \
        visDQMImportDaemon \
        $DQM_DATA/agents/import-offsite \
        $DQM_DATA/repository/original \
        $STATEDIR/online/ix128
      ;;
    dqm-c2d07-11:*agents* ) # dqm-integration
      refuseproc "file agents" "visDQMIndex" "refusing to restart"

      D=online
      DQM_DATA=$STATEDIR/online
      startagent $D/agent-receive \
        visDQMReceiveDaemon \
        $DQM_DATA/uploads \
        $DQM_DATA/data \
        $DQM_DATA/agents/register \

      startagent $D/agent-import-128 \
        visDQMImportDaemon \
        $DQM_DATA/agents/register \
        $DQM_DATA/data \
        $STATEDIR/online/ix128
      ;;

    dqm-c2d07-12:*agents* ) # dqm-test
      refuseproc "file agents" "visDQMIndex" "refusing to restart"

      D=online
      DQM_DATA=/dqmdata/dqm
      startagent $D/agent-import-128 \
        visDQMImportDaemon \
        $DQM_DATA/agents/import-test \
        $DQM_DATA/repository/original \
        $STATEDIR/online/ix128
      ;;

    vocms13[89]:*agents* | vocms013[89]:*agents* ) # relval/offline/caf server
      refuseproc "file agents" "visDQMIndex|[^/]zip +|OnlineSync|visDQMCreateInfo" "refusing to restart"

      # standard lot of agents
      for D in $CONFIGS; do
        D=${D}
        CASTORDIR=/castor/cern.ch/cms/store/dqm/data/$(echo $D | sed -r 's/(offline|relval)/dqmdata/')
        DQM_DATA=$STATEDIR/$D

	startagent $D/agent-receive \
	  visDQMReceiveDaemon \
	  $DQM_DATA/uploads \
	  $DQM_DATA/data \
	  $DQM_DATA/agents/register \
	  $DQM_DATA/agents/zip

        startagent $D/agent-zip \
          visDQMZipDaemon \
          $DQM_DATA/agents/zip \
          $DQM_DATA/data \
          $DQM_DATA/zipped \
          $DQM_DATA/agents/freezer

        startagent $D/agent-zfreeze \
          visDQMZipFreezeDaemon \
          $DQM_DATA/agents/freezer \
          $DQM_DATA/zipped \
          7 \
          $DQM_DATA/agents/stageout

        startagent $D/agent-zverifier \
          visDQMZipCastorVerifier \
          $DQM_DATA/agents/verify \
          marco.rovere@cern.ch,atanas.batinkov@cern.ch,broen.van.besien@cern.ch \
          $DQM_DATA/zipped \
          $CASTORDIR \
          24 \
          $DQM_DATA/agents/clean

        startagent $D/agent-import-128 \
          visDQMImportDaemon \
          $DQM_DATA/agents/register \
          $DQM_DATA/data \
          $DQM_DATA/ix128 \
          $DQM_DATA/agents/qcontrol \
          $DQM_DATA/agents/vcontrol

        startagent $D/agent-qcontrol \
          visDQMRootFileQuotaControl \
          $DQM_DATA/agents/qcontrol \
          $DQM_DATA/agents/register \
          $DQM_DATA/data \
          $CFGDIR/quota-rfqc-${D}.py

        startagent $D/agent-vcontrol \
          visDQMVerControlDaemon \
          $DQM_DATA/agents/vcontrol \
          $DQM_DATA/data

        startagent $D/agent-ixmerge \
            visDQMIndexMergeDaemon \
            $DQM_DATA/agents/ixmerge \
            $DQM_DATA/ix128 \
            $DQM_DATA/agents/register

        if [ $D = offline ]; then
          startagent $D/agent-osync \
            visDQMOnlineSyncDaemon \
            -s https://cmsweb.cern.ch/dqm/online/data/browse/Original \
            -d 14400 \
            -n 50 \
            /dev/null \
            $DQM_DATA/data/OnlineData/original

          startagent $D/agent-coinfo \
            visDQMCreateInfoDaemon \
            $DQM_DATA/data/OnlineData \
            $DQM_DATA/agents/zip
        fi

      done
      ;;

    vocms13[89]:*stageout* | vocms013[89]:*stageout* ) # offline
      refuseproc "stageout agents" "visDQMZipCastorStager"

      # standard lot of agents
      for D in $CONFIGS; do
        D=${D}
        CASTORDIR=/castor/cern.ch/cms/store/dqm/data/$(echo $D | sed -r 's/(offline|relval)/dqmdata/')
        DQM_DATA=$STATEDIR/$D
        startagent $D/agent-zstager \
          visDQMZipCastorStager \
          $DQM_DATA/agents/stageout \
          $DQM_DATA/zipped \
          $CASTORDIR \
          $DQM_DATA/agents/verify
      done
      ;;

    vocms138:*afs-sync* | vocms0138:*afs-sync* )
      refuseproc "afs sync" "visDQMAfsSync"

      DIRS=OnlineData,OfflineData/HIRun2011/StreamHIExpress
      DIRS=$DIRS,OfflineData/HIRun2011/StreamExpressCosmics
      DIRS=$DIRS,OfflineData/HIRun2011/Commissioning
      DIRS=$DIRS,OfflineData/ComissioningHI11
      DIRS=$DIRS,OfflineData/HIRun2011/Cosmics
      DIRS=$DIRS,OfflineData/HIRun2011/MinimumBias

      for D in offline; do
        DQM_DATA=$STATEDIR/$D
        startagent $D/agent-afssync \
          visDQMAfsSync \
          --dirs $DIRS \
          --dirs_quotas=30G,20G,20G,15G,15G,15G,15G 130G \
          $DQM_DATA/data /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/data
      done
      ;;

    *:*agents* )
      refuseproc "file agents" "visDQMIndex|[^/]zip +" "refusing to restart"

      # standard lot of agents
      for D in $FLAVOR; do
        DQM_DATA=$STATEDIR/$D
        startagent $D/agent-receive \
          visDQMReceiveDaemon \
          $DQM_DATA/uploads \
          $DQM_DATA/data \
          $DQM_DATA/agents/register

        startagent $D/agent-import-128 \
          visDQMImportDaemon \
          $DQM_DATA/agents/register \
          $DQM_DATA/data \
          $DQM_DATA/ix128 \
          $DQM_DATA/agents/qcontrol \
          $DQM_DATA/agents/vcontrol

	startagent $D/agent-qcontrol \
          visDQMRootFileQuotaControl \
          $DQM_DATA/agents/qcontrol \
          $DQM_DATA/agents/register \
          $DQM_DATA/data \
          $CFGDIR/quota-rfqc-${D}.py

        startagent $D/agent-vcontrol \
          visDQMVerControlDaemon \
          $DQM_DATA/agents/vcontrol \
          $DQM_DATA/data
      done
      ;;
  esac

  # maybe start migration
  case $HOST:$1 in
    dqm-c2d07-21:*migration* )
      refuseproc "migration agents" "visDQMMigrationProcess" "refusing to restart"

      for i in $(seq 1 $(expr 5 + $(expr $(date +%s) % 10))); do key=$RANDOM; done
      message -n "$0: really start migration agents? (y/n) "
      read answer; case $answer in y ) ;; * ) exit 2 ;; esac
      message -n "$0: that was probably a mistake! say $key if you *really* want to continue: "
      read answer; case $answer in $key ) ;; * ) exit 2 ;; esac

      zsh -c '
        jobs -Z "visDQMMigrationProcess";
        while true; do
          for f in $(find repository{2,3}/original -name "DQM_V????_*_R00*.root" | sort); do
            if [ $(find repository/original -name $(basename $f) | wc -l) = 0 ]; then
              v=$(basename $f | sed "s/.*_V\([0-9][0-9][0-9][0-9]\)_.*/\1/")
              b=uploads2/$v/$(basename $f | sed s/_V${v}_/_V0001_/)
              [ -f $b -o -f $b.bad -o -f $b.origin.bad ] && continue
              mkdir -p $(dirname $b)
              ln $f $b
              echo "md5:$(md5sum < $b | awk '{print $1}') $(stat -c '%s' $b) $b" > $b.origin
            fi
          done
          sleep 1200
        done' </dev/null 2>&1 | rotatelogs $LOGDIR/agent-migration-%Y%m%d.log 86400 >/dev/null 2>&1 &
      ;;

    vocms116:*migration* | vocms0116:*migration*  ) # offline
      refuseproc "migration agents" "visDQMMigrationProcess" "refusing to restart"

      for i in $(seq 1 $(expr 5 + $(expr $(date +%s) % 10))); do key=$RANDOM; done
      message -n "$0: really start migration agents? (y/n) "
      read answer; case $answer in y ) ;; * ) exit 2 ;; esac
      message -n "$0: that was probably a mistake! say $key if you *really* want to continue: "
      read answer; case $answer in $key ) ;; * ) exit 2 ;; esac

      for D in offline caf dev; do
        zsh -c '
          cd '$D'
          jobs -Z "visDQMMigrationProcess";
          for f in $(find old/data -name "*.root.origin" | sort); do
            if [ $(find repository/data -name $(basename ${f%.origin}) | wc -l) = 0 ]; then
              v=$(basename $f | sed "s/.*_V\([0-9][0-9][0-9][0-9]\)_.*/\1/")
              b=uploads2/$v/$(basename $f | sed s/_V${v}_/_V0001_/)
              if [ ! -f $b -a ! -f $b.bad ]; then
                mkdir -p $(dirname $b)
                ln $f $b
                ln ${f%.origin} ${b%.origin}
              fi
            fi
          done' </dev/null 2>&1 | rotatelogs $LOGDIR/$D/agent-migration-$D-%Y%m%d.log 86400 >/dev/null 2>&1 &
      done
      ;;
  esac

  # finally start collector
  case $FLAVOR:$HOST:${1:-collector} in
    online:dqm-c2d07-[01]1:*collector* )
      DQMCollector --listen 9090 </dev/null 2>&1 | rotatelogs $LOGDIR/$FLAVOR/collector-%Y%m%d.log 86400 >/dev/null 2>&1 & ;;
    online:dqm-c2d07-[01]2:*collector* ) ;;
    online:*:*collector* )
      DQMCollector --listen 9190 </dev/null 2>&1 | rotatelogs $LOGDIR/$FLAVOR/collector-%Y%m%d.log 86400 >/dev/null 2>&1 & ;;
    *:*:*collector* )
      DQMCollector --listen 8061 </dev/null 2>&1 | rotatelogs $LOGDIR/$FLAVOR/collector-%Y%m%d.log 86400 >/dev/null 2>&1 & ;;
  esac

}

# Stop the service.
stop()
{
  message "stopping $ME/$FLAVOR ${1:-(default)}"
  case ${1:-agents} in *agents* )
    killproc "$ME file agents" "visDQM.*Daemon|visDQMZip|visDQMRootFileQuotaControl" ;;
  esac
  case ${1:-afs-sync} in *afs-sync* )
    killproc "$ME afs sync" "visDQMAfsSync" ;;
  esac
  case $1 in *migration* )
    killproc "$ME migration agents" "visDQMMigration|sleep" ;;
  esac
  case ${1:-collector} in *collector* )
    killproc "$ME collector" "DQMCollector"
  esac
  case ${1:-webserver} in *webserver* )
    for cfg in $CONFIGS; do
      monControl stop all from $CFGDIR/server-conf-$cfg.py
    done ;;
  esac
}

# Check if the server is running.
status()
{
  case ${1:-webserver} in *webserver* )
    statproc "$ME webserver" "[/]monGui $CFGDIR" ;;
  esac
  case ${1:-renderer} in *renderer* )
    statproc "$ME renderer" "visDQMRender" ;;
  esac
  case ${1:-collector} in *collector* )
    statproc "$ME collector" "DQMCollector" ;;
  esac
  case ${1:-logger} in *logger* )
    statproc "$ME loggers" "rotatelogs" ;;
  esac
  case ${1:-agents} in *agents* )
    statproc "$ME file agents" "visDQM.*Daemon|visDQM.*Verifier|visDQMIndex|zip|visDQMRootFileQuotaControl" ;;
  esac
  case ${1:-stageout} in *stageout* )
    statproc -u $ALTERNATIVE_USER "$ME stageout agent" "visDQMZipCastorStager" ;;
  esac
  case ${1:-afs-sync} in *afs-sync* )
    statproc -u $ALTERNATIVE_USER "$ME afs sync" "visDQMAfsSync" ;;
  esac
  case $1 in *migration* )
    statproc "$ME migration" "visDQMMigration|sleep" ;;
  esac
}

# Give details of server componenets
detailstatus()
{
  case ${1:-webserver} in *webserver* )
    sdproc "$ME webserver" "[/]monGui $CFGDIR" ;;
  esac
  case ${1:-renderer} in *renderer* )
    sdproc "$ME renderer" "visDQMRender" ;;
  esac
  case ${1:-collector} in *collector* )
    sdproc "$ME collector" "DQMCollector" ;;
  esac
  case ${1:-logger} in *logger* )
    sdproc "$ME loggers" "rotatelogs" ;;
  esac
  case ${1:-agents} in *agents* )
    sdproc "$ME file agents" "visDQM.*Daemon|visDQM.*Verifier|visDQMIndex|zip|visDQMRootFileQuotaControl" ;;
  esac
  case ${1:-stageout} in *stageout* )
    sdproc -u $ALTERNATIVE_USER "$ME stageout agent" "visDQMZipCastorStager" ;;
  esac
  case ${1:-afs-sync} in *afs-sync* )
    sdproc -u $ALTERNATIVE_USER "$ME afs sync" "visDQMAfsSync" ;;
  esac
  case $1 in *migration* )
    sdproc "$ME migration" "visDQMMigration|sleep" ;;
  esac
}

# (Re)compile render plugins.
compile()
{
  for cfg in $CONFIGS; do
    monControl rebuild all from $CFGDIR/server-conf-$cfg.py
  done
}

# Backups dqmgui by archiving its state to castor
backup()
{
  local archdir=$1
  klist -s ||
    { echo "You must have a valid kerberos token to run the backup." 1>&2; exit 20; }
  rfstat $archdir >/dev/null ||
    { echo "Could not stat $archdir in the castor archive" 1>&2; exit 19; }
  test -d $STATEDIR/backup ||
    { echo "Directory $STATEDIR/backup does not exist" 1>&2; exit 18; }

  echo "Checking for DQMGUI backups not yet staged out to tape:"
  stager_qry -M $archdir | grep dqmgui_$HOST | grep -v STAGED || echo "all staged out."
  echo

  tarfile=dqmgui_${HOST}_$(date +%Y%m%d-%H%M).tar
  (tar --version
   echo
   echo "Starting $HOST DQMGUI backup on $(date)"
   # FIXME: stop the agents vidDQMImportDaemon visDQMDeleteDaemon to make the index read only

   # The default tar (version 1.15.1) coming with SLC5 does not provide the TAR_VOLUME
   # env var when calling the script to change tapes. That's very unfortunate, so we
   # have to workaround to find the next tape number to use in the dest file suffix.
   # It also doesn't pass any argument to the script, so we use a file on disk to
   # pass input to it and to keep the state for the next call.
   echo "$archdir/$tarfile.0" > $STATEDIR/backup/copy-to-castor.next

   # Use tape length of 250GB. The maximum allowed by the CERN/IT is 500GB,
   # but be careful bumping high numbers as we need local disk space of
   # equal size to store the volume file. Sometimes we run short on disk
   # space so better not risk filling up the partition while running a backup.
   tar -c -M --tape-length=250000000 --file $STATEDIR/backup/partial.tar \
       -C $STATEDIR/${FLAVOR%%-*}/ix128 . -F $CFGDIR/copy-to-castor.sh ||
     errors=true

   # Stage out the last tape volume too, regardless of errors in previous command.
   $CFGDIR/copy-to-castor.sh || errors=true
   [ $errors ] && echo "*** WARNING *** There were errors during the backup." \
     || echo "Completed backup to castor on $(date)."
  ) 2>&1 | tee $STATEDIR/backup/log

  # Generate inplace documentation to make sure people know how to restore it
  echo
  echo Copying README file with instruction on how to restore it.
  (let n=$(cat $STATEDIR/backup/copy-to-castor.next|awk -F. '{ print $NF; }')
   echo "This is a multi-volume tape archive composed by $n tape(s)."
   echo
   echo "To extract one specific file, get the volume tar file and use:"
   echo "  tar xvf $tarfile.N <filename-to-extract>"
   echo
   echo "If a file is spawned in multiple volumes, you must take all the"
   echo "volumes containing the file and use:"
   echo "  tar xvMf $tarfile.first-containing-the-file <filename-to-extract>"
   echo
   echo "To extract all the files, use:"
   echo "  tar xvM \$(for c in {0..$((n-1))}; do echo -n \"-f $tarfile.\$c \"; done)"
   echo
   echo "Note you cannot concatenate the tar files together to extract a"
   echo "multi-volume tape archive. For more information on how to"
   echo "manipulate multi-volume tape archives, see the tar documentation."
   echo
   echo "When this backup was generated, it produced the following log:"
   echo "-------"
   cat $STATEDIR/backup/log
   echo "-------"
   echo "Find below a list of files of $STATEDIR/${FLAVOR%%-*}/ix128"
   echo "just after the multi-volume tar was created. It should match"
   echo "what's in the tar, otherwise it means things changed while"
   echo "the backup was running (tar sometimes may not give warnings about"
   echo "files that changed during the creation of the archive)."
   echo
   (cd $STATEDIR/${FLAVOR%%-*}/ix128 && find . -exec ls -alFd {} \;)
  ) | rfcp - $archdir/$tarfile.README
  rm -f $STATEDIR/backup/{copy-to-castor.next,log} # cleanup temp files

  # FIXME: start the agents vidDQMImportDaemon visDQMDeleteDaemon if they were running before

  # Cleanup old archives
  tarprefix=dqmgui_${HOST}
  since=$(date --date='6 months ago' +%Y%m%d)
  echo
  echo "Cleaning old archives for $tarprefix:"
  for f in $(nsls $archdir|grep $tarprefix); do
    if [ $(echo -n $f | cut -d_ -f3| cut -d- -f1) -lt $since ]; then
      echo $archdir/$f
      rfrm $archdir/$f
    fi
  done

  echo
  echo "Backup completed."
}

# Verify the security string.
check()
{
  CHECK=$(echo "$1" | md5sum | awk '{print $1}')
  if [ $CHECK != 94e261a5a70785552d34a65068819993 ]; then
    echo "$0: cannot complete operation, please check documentation." 1>&2
    exit 2;
  fi
}

# Main routine, perform action requested on command line.
while [ $# -ge 1 ]; do
  case $1 in
    -q ) QUIET=true; shift ;;
    -f ) FLAVOR=$2; shift;shift;;
    -h ) set -- help ;;
    -- ) shift; break ;;
    -* ) echo "$0: unrecognised option '$1'" 1>&2; exit 1;;
    *  ) break ;;
  esac
done
newline=""
getconfigs

# Check user name. Everything except afs-sync and castor stageout must
# run as non-$ALTERNATIVE_USER account, afs-sync and castor stageout must be under
# $ALTERNATIVE_USER, refuse to run otherwise.
case $FLAVOR:$(id -un):$1:$2 in
  *:$ALTERNATIVE_USER:*:afs-sync | *:$ALTERNATIVE_USER:*:stageout | *:$ALTERNATIVE_USER:backup:* )
    ;;

  offline-caf:$ALTERNATIVE_USER:* | offline-caf:*:afs-sync | offline-caf:*:stageout )
    echo "ERROR: please use another account" 1>&2
    exit 1 ;;

  relval:$ALTERNATIVE_USER:* | relval:*:afs-sync | relval:*:stageout | relval:*:backup:* )
    echo "ERROR: please use another account" 1>&2
    exit 1 ;;
esac

case ${1:-status} in
  sysboot )
    sysboot
    ;;

  start | restart )
    check "$2"
    stop
    start
    ;;

  status )
    status
    ;;

  dstatus )
    detailstatus
    ;;

  stop )
    check "$2"
    stop
    ;;

  compile )
    compile
    ;;

  xstart | xrestart )
    check "$3"
    stop "$2"
    start "$2"
    ;;

  xstatus)
    status "$2"
    ;;

  xdstatus )
    detailstatus "$2"
    ;;

  xstop )
    check "$3"
    stop "$2"
    ;;

  backup )
    check "$3"
    backup "$2"
    ;;

  help )
    perl -ne '/^##H/ && do { s/^##H ?//; print }' < $0
    ;;

  version )
    echo "$DQMGUI_VERSION"
    ;;

  * )
    echo "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
    exit 1
    ;;
esac
