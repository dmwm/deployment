# vim: set ft=sh sw=2 ts=8 et :
deploy_dqmgui_variants="default bare online"
deploy_dqmgui_deps()
{
  deploy $stage backend
  [ $variant == online ] && deploy $stage admin default || deploy $stage admin $variant
  case $variant in
    bare | online )
      ;;
    * )
      deploy $stage wmcore-auth
      ;;
  esac
}

deploy_dqmgui_prep()
{
  extra=
  case $host in
    dqm-C2D07-0[12] | dqm-C2D07-12 )
      extra="$extra /dqmdata/dqm/uploads"
      extra="$extra /dqmdata/dqm/agents"
      extra="$extra /dqmdata/dqm/repository/original"
      extra="$extra online online/sessions $project_logs/online"
      for a in import-local  import-offsite  import-test; do
        extra="$extra /dqmdata/dqm/agents/$a"
      done
      ;;

    * )
      for d in online offline relval dev; do
        extra="$extra $d $d/sessions $d/agents $d/data $d/uploads $d/zipped $project_logs/$d"
	for a in clean freezer ixmerge ixstageout qcontrol vcontrol register register128 stageout verify zip; do
	  extra="$extra $d/agents/$a"
	done
      done
      ;;
  esac
  mkproj $extra backup
  [ ! $variant == online ] &&  mkproxy
  $nogroups || chmod g+ws */data */zipped */agents/*
}

deploy_dqmgui_sw()
{
  deploy_pkg -a dqmgui/GoogleAPI.py comp cms+dqmgui
}

deploy_dqmgui_post()
{
  case $host in
    vocms013[26] | vocms0140 | vocms016[135] | vocms0307 | vocms0318 )
      disable
      ;;
    * )
      enable
      ;;
  esac

  case $variant in bare ) return ;; esac

  (mkcrontab; sysboot
   [ ! -f $root/enabled/$project ] || {
     cmd="$project_config/daily"
     $nogroups || cmd="sudo -H -u _dqmgui bashs -l -c '$cmd'"
     echo "17 2 * * * $cmd"
   }) | crontab -

  # Castor stageout acronjobs enabled only for the
  # official offline, relval and dev instances
  case $host:$root in
    vocms013[189]:/data/srv )
      klist -s # must have afs kerberos token
      (acrontab -l | { egrep -v -e " $host.*$project_config/" || true; }

       # backup of the index
       echo "0 7 * * * $host $project_config/manage indexbackup 'I did read documentation'"

       # backup of the zipped root files
       echo "*/15 * * * * $host $project_config/manage zipbackup 'I did read documentation'"

       # check/verification of the backup of the zipped root files
       echo "*/15 * * * * $host $project_config/manage zipbackupcheck 'I did read documentation'"
      ) | acrontab
      ;;
    * )
      ;;
  esac

  # Trigger plugins and layouts rebuild if server is enabled.
  [ ! -f $root/enabled/$project ] || {
    cmd="$project_config/manage compile 'I did read documentation'"
    $nogroups || cmd="sudo -H -u _dqmgui bashs -l -c '$cmd'"
    eval "$cmd"
  }

  # Clear black list
  find $project_state -maxdepth 2 -name blacklist.txt -exec rm {} \;
}

deploy_dqmgui_auth() {
  case $1 in
    */GoogleAPI.py)
      cat <<- \EOF
api_key=None
EOF
    ;;
  esac
}
