#include "DQM/DQMRenderPlugin.h"
 
#include "GEMRenderPlugin_SummaryChamber.h"

#include "TH1F.h"
#include "TH2F.h"
#include "TH2S.h"
#include "TProfile.h"
#include "TProfile2D.h"
#include "TH2Poly.h"
#include "TCanvas.h"
#include "TPaveStats.h"

#include <cassert>

//----------------------------------------------------------------------------------------------------

class GEMRenderPlugin : public DQMRenderPlugin
{

public:
  int nInitColorStatus;
  
  GEMRenderPlugin() : DQMRenderPlugin() {
    nInitColorStatus = -1;
  };
  
  virtual bool applies(const VisDQMObject &o, const VisDQMImgInfo &) override
  {
    if ((o.name.find( "GEM/" ) != std::string::npos))
      return true;
    return false;
  }

  virtual void preDraw(TCanvas *c, const VisDQMObject &o, const VisDQMImgInfo &, VisDQMRenderInfo &) override
  {
    if (o.object == nullptr)
      return;

    c->cd();

    gStyle->SetOptStat(10);

    if (dynamic_cast<TH1F*>(o.object))
    {
      preDrawTH1F(c, o);
    }
    else if (dynamic_cast<TH2F*>(o.object))
    {
      preDrawTH2F(c, o);
    }
    else if (dynamic_cast<TH2S*>(o.object))
    {
      preDrawTH2S(c, o);
    }
  }

  virtual void postDraw( TCanvas *c, const VisDQMObject &o, const VisDQMImgInfo &imgInfo ) override
  {
    if (o.object == nullptr)
      return;

    c->cd();

    gStyle->SetOptStat(10);

    if (o.name.rfind("summary_statusChamber") != std::string::npos ||
        o.name.rfind("reportSummaryMap")      != std::string::npos)
    {
      TH2* obj2 = dynamic_cast<TH2*>(o.object);
      if (obj2 == nullptr) return;
      
      summaryCh.drawStats(obj2);
      
      //obj2->SetStats(false);
      gStyle->SetOptStat("e");
      obj2->SetOption("");
      gPad->SetGridx();
      gPad->SetGridy();

      return;
    }
    else if (dynamic_cast<TH1F*>(o.object))
    {
      postDrawTH1F(c, o);
    }
    else if (dynamic_cast<TH2F*>(o.object))
    {
      postDrawTH2F(c, o, imgInfo);
    }
    else if (dynamic_cast<TH2S*>(o.object))
    {
      postDrawTH2S(c, o);
    }
    else if (dynamic_cast<TProfile*>(o.object))
    {
      postDrawTProfile(c, o);
    }
    else if (dynamic_cast<TProfile2D*>(o.object))
    {
      postDrawTProfile2D(c, o);
    }
  }

private:
  SummaryChamber summaryCh;
  const int kEntriesColor_ = kAzure - 5;
  const int kEfficiencyColor_ = 46;

  void preDrawTH1F(TCanvas *, const VisDQMObject &o)
  {
    if (o.object == nullptr)
      return;

    bool setColor = true;
    if (o.name.rfind(" U") == o.name.size() - 2)
      setColor = false;
    if (o.name.rfind(" V") == o.name.size() - 2)
      setColor = false;
    if (o.name.find("events per BX") != std::string::npos)
      setColor = false;

    TH1F* obj = dynamic_cast<TH1F*>(o.object);
    assert(obj);

    if (setColor)
      obj->SetLineColor(2);

    obj->SetLineWidth(2);
  }

  void preDrawTH2F(TCanvas *, const VisDQMObject &o)
  {
    TH2F* obj = dynamic_cast<TH2F*>(o.object);
    assert(obj);

    obj->SetOption("colz");

    gPad->SetGridx();
    gPad->SetGridy();
  }

  void preDrawTH2S(TCanvas *, const VisDQMObject &o)
  {
    TH2S* obj = dynamic_cast<TH2S*>(o.object);
    assert(obj);

    obj->SetOption("colz");

    if (TPRegexp("^GEM/EventInfo/chamberStatus_inLumi_[\\w\\W]+$").MatchB(o.name))
    {
      drawLumiFunction(obj);
    }

    gPad->SetGridx();
    gPad->SetGridy();
  }

  void postDrawTH1F(TCanvas *c, const VisDQMObject &o)
  {
    TH1F* obj = dynamic_cast<TH1F*>(o.object);
    assert(obj);

    if (TPRegexp("^GEM/Efficiency/\\w+/muon_\\w+(?:_match)?_GE\\d{1,2}-(P|M)$").MatchB(o.name))
    {
      // e.g. "GEM/Efficiency/muonSTA/muon_eta_GE11-M"
      obj->SetOption("hist E");
      gStyle->SetOptStat("e");

      obj->SetLineColor(kEntriesColor_);
      obj->SetFillColorAlpha(kEntriesColor_, 0.3);

    }
    else if (TPRegexp("^GEM/Efficiency/\\w+/(chamber|ieta)(?:_match)?_GE\\d{1,2}-(P|M)-L\\d$").MatchB(o.name))
    {
      // ex) "GEM/Efficiency/{muonSTA,muonGLB,GEMCSCSegment}/{chamber,ieta}_GE21-P-L2"
      obj->SetOption("P");

      obj->SetMarkerStyle(4); //
      obj->SetMarkerSize(2);
      obj->SetMarkerColor(kEntriesColor_);
      obj->SetLineColorAlpha(kEntriesColor_, 0.0);

      applyBinNumbering(obj, "x");
    }
    else if (TPRegexp("^GEM/Efficiency/\\w+/eff_[\\S]+$").MatchB(o.name))
    {
      // common cosmetics for the offlien DQM
      obj->SetOption("E");
      obj->SetMinimum(0.0);
      obj->SetMaximum(1.0);
      obj->SetLineColor(kEfficiencyColor_);
      obj->SetLineWidth(2);
      obj->SetMarkerStyle(kFullSquare);
      obj->SetMarkerColor(kBlack);

      // no stat box
      obj->SetStats(false);
      gStyle->SetOptStat(0);

      if (TPRegexp("^GEM/Efficiency/\\w+/eff_(chamber|ieta)_GE\\d{1,2}-(P|M)-L\\d$").MatchB(o.name))
      {
        // e.g. "GEM/Efficiency/type1/Efficiency/eff_chamber_GE21-P-L2"
        applyBinNumbering(obj, "x");
      }
      else
      {
        obj->SetOption("E");
        gStyle->SetOptStat(10);
      }
    }
    else if (TPRegexp("^GEM/Efficiency/\\w+/residual_\\w+_GE\\d{1,2}-(P|M)-E\\d{1,2}$").MatchB(o.name))
    {
      obj->SetOption("hist E");
      gStyle->SetOptStat("emruos");

      obj->SetLineColor(kEntriesColor_);
      obj->SetFillColorAlpha(kEntriesColor_, 0.3);
    }
    else if (TPRegexp("^GEM/Digis/digis_per_[\\w\\W]+$").Match(o.name))
    {
      c->SetLogy(true);
    }
    else if (TPRegexp("^GEM/RecHits/rechits_per_[\\w\\W]+$").Match(o.name))
    {
      c->SetLogy(true);
    }
    else
    {
      gStyle->SetOptStat(10);
    }

    c->SetGridx();
    c->SetGridy();
  }

  void postDrawTH2F(TCanvas *c, const VisDQMObject &o, const VisDQMImgInfo &imgInfo)
  {
    TH2F* obj = dynamic_cast<TH2F*>(o.object);
    assert(obj);

    if (TPRegexp("^GEM/Efficiency/\\w+/chamber_ieta(?:_match)?_GE\\d{1,2}-(P|M)-L\\d$").MatchB(o.name))
    {
      // e.g. "GEM/Efficiency/type1/Efficiency/detector_GE11-P-L1"
      obj->SetOption("colz");
      gStyle->SetOptStat("e");

      applyBinNumbering(obj, "x");
      applyBinNumbering(obj, "y");
    }
    else if (TPRegexp("^GEM/Efficiency/\\w+/eff_chamber_ieta_GE\\d{1,2}-(P|M)-L\\d$").MatchB(o.name))
    {
      // e.g. "GEM/Efficiency/type1/Efficiency/eff_detector_GE11-P-L1"
      obj->SetOption("colz");
      obj->SetMinimum(0.00);
      obj->SetMaximum(1.00);

      applyBinNumbering(obj, "x");
      applyBinNumbering(obj, "y");

      // turn off the stat box
      gStyle->SetOptStat(0);
      gStyle->SetGridWidth(3);
    }
    else if (TPRegexp("^GEM/recHit/rechit_wheel_[\\w\\W]+$").Match(o.name))
    {
      float fR = obj->GetYaxis()->GetBinLowEdge(obj->GetNbinsY() + 1) * 1.1;
      float fRatioX = 1.0, fRatioY = 1.0, fRatio;
      if ( imgInfo.width > 0 && imgInfo.height > 0 ) {
        fRatio  = ( (float)imgInfo.width ) / ( (float)imgInfo.height );
        fRatioX = ( fRatio >= 1.0 ? fRatio : 1.0 );
        fRatioY = ( fRatio >= 1.0 ? 1.0    : 1.0 / fRatio );
      }
      auto hFrame = gPad->DrawFrame(-fR * fRatioX, -fR * fRatioY, fR * fRatioX, fR * fRatioY);
      hFrame->SetTitle(obj->GetTitle());
      hFrame->GetXaxis()->SetTitle(obj->GetXaxis()->GetTitle());
      hFrame->GetYaxis()->SetTitle(obj->GetYaxis()->GetTitle());
      obj->Draw("same colzpol");
    }
    else if (TPRegexp("^GEM/DAQStatus/vfat_statusSummary_[\\w\\W]+$").Match(o.name))
    {
      Int_t arrCol[ 2 ] = { 3, 2 };
      gStyle->SetPalette(2, arrCol);
      obj->SetMinimum(1.0);
      obj->SetMaximum(2.0);
      obj->SetOption("col");
    }
    else if (TPRegexp("^GEM/[\\w\\W]+/rphi_occ_[\\w\\W]+$").Match(o.name))
    {
      float fR = obj->GetYaxis()->GetBinLowEdge(obj->GetNbinsY() + 1) * 1.1;
      float fRatioX = 1.0, fRatioY = 1.0, fRatio;
      if ( imgInfo.width > 0 && imgInfo.height > 0 ) {
        fRatio  = ( (float)imgInfo.width ) / ( (float)imgInfo.height );
        fRatioX = ( fRatio >= 1.0 ? fRatio : 1.0 );
        fRatioY = ( fRatio >= 1.0 ? 1.0    : 1.0 / fRatio );
      }

      auto fXL = -fR * fRatioX;
      auto fXH =  fR * fRatioX;
      auto fYL = -fR * fRatioY;
      auto fYH =  fR * fRatioY;

      auto hFrame = gPad->DrawFrame(fXL, fYL, fXH, fYH);
      hFrame->SetTitle(obj->GetTitle());
      hFrame->GetXaxis()->SetTitle("X [cm]");
      hFrame->GetYaxis()->SetTitle("Y [cm]");

      if ( obj->GetNbinsX() > 100 && obj->GetNbinsY() > 100 ) {
        obj->SetStats(false);
        obj->Draw("same colz");
      } else {
        //obj->Draw("same colzpol");
        auto hFinal = drawWheelRecHitOcc(obj, fXL, fXH, fYL, fYH);
        hFinal->Draw("same colz");
      }
    }
    else if (TPRegexp("^GEM/EventInfo/vfat_statusSummary_[\\w\\W]+$").Match(o.name))
    {
      Int_t arrCol[ 4 ] = { 3, 2, 5, 801 };  // 1: Green(=3), 2: Red(=2), 3: Yellow(=5), 4: Orange(=801)
      gStyle->SetPalette(4, arrCol);
      obj->SetMinimum(1.0);
      obj->SetMaximum(4.0);
      obj->SetOption("col");
    }
    
    if (TPRegexp("^GEM/DAQStatus/[\\w\\W]+_status$").Match(o.name) || 
        TPRegexp("^GEM/DAQStatus/[\\w\\W]+_status_[\\w\\W]+$").Match(o.name)) 
    {
      Int_t nNumGood = 20;
      
      if ( nInitColorStatus < 0 ) {
        Double_t arrdS[ 4 ] = { 0.0, ( 990.0 - nNumGood ) / 990, ( 990.0 - nNumGood + 1.0 ) / 990, 1.0 };
        Double_t arrdR[ 4 ] = { 1.0, 1.0, 1.0, 0.0 };
        Double_t arrdG[ 4 ] = { 1.0, 0.0, 1.0, 1.0 };
        Double_t arrdB[ 4 ] = { 0.0, 0.0, 0.0, 0.0 };
        nInitColorStatus = TColor::CreateGradientColorTable(5, arrdS, arrdR, arrdG, arrdB, 990);
      }
      
      auto nColorInit = nInitColorStatus;
      Int_t arrnPalette[ 990 ];
      for ( Int_t i = 0 ; i < 990 ; i++ ) arrnPalette[ i ] = nColorInit + i;
      gStyle->SetPalette(990, arrnPalette);
      
      Float_t fMax = obj->GetMaximum();
      obj->SetMaximum(fMax * 990.0 / ( 990.0 - nNumGood ));
      Float_t fL = fMax * ( 990.0 - nNumGood + 1 ) / ( 990.0 - nNumGood );
      for ( Int_t i = 0 ; i < obj->GetNbinsX() ; i++ ) {
        Float_t fVal = obj->GetBinContent(i + 1, 1);
        if ( fVal < 1.0 ) continue;
        obj->SetBinContent(i + 1, 1, fL + fVal * ( nNumGood - 1 ) / ( 990.0 - nNumGood ));
      }
      
      if ( TPRegexp("^GEM/DAQStatus/oh_status_[\\w\\W]+$").Match(o.name) ) {
        c->SetLeftMargin(0.200);
      } else {
        c->SetLeftMargin(0.135);
      }
    }

    c->SetGridx();
    c->SetGridy();
  }

  void postDrawTH2S(TCanvas *, const VisDQMObject &o)
  {
    TH2S* obj = dynamic_cast<TH2S*>(o.object);
    assert(obj);

    if (TPRegexp("^GEM/EventInfo/chamberStatus_inLumi_[\\w\\W]+$").Match(o.name))
    {
      Int_t arrCol[ 4 ] = { 3, 2, 5, 801 };  // 1: Green(=3), 2: Red(=2), 3: Yellow(=5), 4: Orange(=801)
      gStyle->SetPalette(4, arrCol);
      obj->SetMinimum(1.0);
      obj->SetMaximum(4.0);
      obj->SetOption("col");
    }
  }

  void postDrawTProfile(TCanvas *c, const VisDQMObject &o)
  {
    TProfile* obj = dynamic_cast<TProfile*>(o.object);
    assert(obj);

    c->SetGridx();
    c->SetGridy();
  }

  void postDrawTProfile2D(TCanvas *c, const VisDQMObject &o)
  {
    TProfile2D* obj = dynamic_cast<TProfile2D*>(o.object);
    assert(obj);
    if (TPRegexp("^GEM/RecHits/rechit_average_[\\w\\W]+$").Match(o.name))
    {
      obj->SetOption("colz");
    }

    c->SetGridx();
    c->SetGridy();
  }

  void drawLumiFunction(TH2S *h2Curr)
  {
    Int_t nNbinsX = h2Curr->GetNbinsX();
    Int_t nNbinsY = h2Curr->GetNbinsY();
    Int_t nNbinsXActual = 0;

    unsigned int unMaskOcc   = 1;
    unsigned int unMaskError = ( 1 << 1 ) | ( 1 << 2 ) | ( 1 << 4 ) | ( 1 << 6 );
    unsigned int unMaskWarn  = ( 1 << 3 ) | ( 1 << 5 ) | ( 1 << 7 );

    for ( Int_t i = 1 ; i <= nNbinsX ; i++ )
    {
      nNbinsXActual = i;
      if ( h2Curr->GetBinContent(nNbinsXActual, 0) <= 0 ) break;

      for ( Int_t j = 1 ; j <= nNbinsY ; j++ ) {
        unsigned int unVal = h2Curr->GetBinContent(i, j);
        if ( unVal <= 0 ) continue;
        Bool_t bOcc   = 0 != ( unVal & unMaskOcc   );
        Bool_t bError = 0 != ( unVal & unMaskError );
        Bool_t bWarn  = 0 != ( unVal & unMaskWarn  );
        if      ( bError ) h2Curr->SetBinContent(i, j, 2);
        else if ( bWarn  ) h2Curr->SetBinContent(i, j, 3);
        else if ( bOcc   ) h2Curr->SetBinContent(i, j, 1);
        else               h2Curr->SetBinContent(i, j, 4);  // Something bad happened (bug on DQM...?)
      }
    }
    h2Curr->GetXaxis()->SetRange(1, nNbinsXActual);
  };

  TH2Poly *drawWheelRecHitOcc(TH2F *h2Curr, float fXL, float fXH, float fYL, float fYH)
  {
    // FIXME: Only for GE11; Find a way to obtain the geometry information of each station
    typedef std::pair<int, int> pairBin;
    typedef std::vector<pairBin> vectorBin;
    typedef std::pair<vectorBin, std::vector<float>> pairEtaPartition;
    
    std::vector<pairEtaPartition> listEtaPartition;
    
    std::vector<pairEtaPartition> listEtaPartitionGE11 = {
      { { { 1, 1 }, { 2, 1 }, { 3, 1 } }, { 219.56172500000002, -0.0883447, 236.38327500000003, 0.0888061 } }, 
      { { { 1, 2 }, { 2, 2 }, { 3, 2 } }, { 202.85672499999998, -0.0883447, 219.67827499999999, 0.0888061 } }, 
      { { { 1, 3 }, { 2, 3 }, { 3, 3 } }, { 188.762715, -0.0883447, 202.960285, 0.0888061 } }, 
      { { { 1, 4 }, { 2, 4 }, { 3, 4 } }, { 174.655715, -0.0883447, 188.853285, 0.0888061 } }, 
      { { { 1, 5 }, { 2, 5 }, { 3, 5 } }, { 162.659215, -0.0883447, 174.735785, 0.0888061 } }, 
      { { { 1, 6 }, { 2, 6 }, { 3, 6 } }, { 150.65221499999998, -0.0883447, 162.72878500000002, 0.0888061 } }, 
      { { { 1, 7 }, { 2, 7 }, { 3, 7 } }, { 140.40497, -0.0883447, 150.71303, 0.0888061 } }, 
      { { { 1, 8 }, { 2, 8 }, { 3, 8 } }, { 130.14897, -0.0883447, 140.45703, 0.0888061 } }, 
      { { { 7, 1 }, { 8, 1 }, { 9, 1 } }, { 219.56172500000002, 0.260721, 236.38327500000003, 0.437872 } }, 
      { { { 7, 2 }, { 8, 2 }, { 9, 2 } }, { 202.85672499999998, 0.260721, 219.67827499999999, 0.437872 } }, 
      { { { 7, 3 }, { 8, 3 }, { 9, 3 } }, { 188.762715, 0.260721, 202.960285, 0.437872 } }, 
      { { { 7, 4 }, { 8, 4 }, { 9, 4 } }, { 174.655715, 0.260721, 188.853285, 0.437872 } }, 
      { { { 7, 5 }, { 8, 5 }, { 9, 5 } }, { 162.659215, 0.260721, 174.735785, 0.437872 } }, 
      { { { 7, 6 }, { 8, 6 }, { 9, 6 } }, { 150.65221499999998, 0.260721, 162.72878500000002, 0.437872 } }, 
      { { { 7, 7 }, { 8, 7 }, { 9, 7 } }, { 140.40497, 0.260721, 150.71303, 0.437872 } }, 
      { { { 7, 8 }, { 8, 8 }, { 9, 8 } }, { 130.14897, 0.260721, 140.45703, 0.437872 } }, 
      { { { 13, 1 }, { 14, 1 }, { 15, 1 } }, { 219.56172500000002, 0.609787, 236.38327500000003, 0.786938 } }, 
      { { { 13, 2 }, { 14, 2 }, { 15, 2 } }, { 202.85672499999998, 0.609787, 219.67827499999999, 0.786938 } }, 
      { { { 13, 3 }, { 14, 3 }, { 15, 3 } }, { 188.762715, 0.609787, 202.960285, 0.786938 } }, 
      { { { 13, 4 }, { 14, 4 }, { 15, 4 } }, { 174.655715, 0.609787, 188.853285, 0.786938 } }, 
      { { { 13, 5 }, { 14, 5 }, { 15, 5 } }, { 162.659215, 0.609787, 174.735785, 0.786938 } }, 
      { { { 13, 6 }, { 14, 6 }, { 15, 6 } }, { 150.65221499999998, 0.609787, 162.72878500000002, 0.786938 } }, 
      { { { 13, 7 }, { 14, 7 }, { 15, 7 } }, { 140.40497, 0.609787, 150.71303, 0.786938 } }, 
      { { { 13, 8 }, { 14, 8 }, { 15, 8 } }, { 130.14897, 0.609787, 140.45703, 0.786938 } }, 
      { { { 19, 1 }, { 20, 1 }, { 21, 1 } }, { 219.56172500000002, 0.958853, 236.38327500000003, 1.136 } }, 
      { { { 19, 2 }, { 20, 2 }, { 21, 2 } }, { 202.85672499999998, 0.958853, 219.67827499999999, 1.136 } }, 
      { { { 19, 3 }, { 20, 3 }, { 21, 3 } }, { 188.762715, 0.958853, 202.960285, 1.136 } }, 
      { { { 19, 4 }, { 20, 4 }, { 21, 4 } }, { 174.655715, 0.958853, 188.853285, 1.136 } }, 
      { { { 19, 5 }, { 20, 5 }, { 21, 5 } }, { 162.659215, 0.958853, 174.735785, 1.136 } }, 
      { { { 19, 6 }, { 20, 6 }, { 21, 6 } }, { 150.65221499999998, 0.958853, 162.72878500000002, 1.136 } }, 
      { { { 19, 7 }, { 20, 7 }, { 21, 7 } }, { 140.40497, 0.958853, 150.71303, 1.136 } }, 
      { { { 19, 8 }, { 20, 8 }, { 21, 8 } }, { 130.14897, 0.958853, 140.45703, 1.136 } }, 
      { { { 25, 1 }, { 26, 1 }, { 27, 1 } }, { 219.56172500000002, 1.30792, 236.38327500000003, 1.48507 } }, 
      { { { 25, 2 }, { 26, 2 }, { 27, 2 } }, { 202.85672499999998, 1.30792, 219.67827499999999, 1.48507 } }, 
      { { { 25, 3 }, { 26, 3 }, { 27, 3 } }, { 188.762715, 1.30792, 202.960285, 1.48507 } }, 
      { { { 25, 4 }, { 26, 4 }, { 27, 4 } }, { 174.655715, 1.30792, 188.853285, 1.48507 } }, 
      { { { 25, 5 }, { 26, 5 }, { 27, 5 } }, { 162.659215, 1.30792, 174.735785, 1.48507 } }, 
      { { { 25, 6 }, { 26, 6 }, { 27, 6 } }, { 150.65221499999998, 1.30792, 162.72878500000002, 1.48507 } }, 
      { { { 25, 7 }, { 26, 7 }, { 27, 7 } }, { 140.40497, 1.30792, 150.71303, 1.48507 } }, 
      { { { 25, 8 }, { 26, 8 }, { 27, 8 } }, { 130.14897, 1.30792, 140.45703, 1.48507 } }, 
      { { { 31, 1 }, { 32, 1 }, { 33, 1 } }, { 219.56172500000002, 1.65698, 236.38327500000003, 1.83414 } }, 
      { { { 31, 2 }, { 32, 2 }, { 33, 2 } }, { 202.85672499999998, 1.65698, 219.67827499999999, 1.83414 } }, 
      { { { 31, 3 }, { 32, 3 }, { 33, 3 } }, { 188.762715, 1.65698, 202.960285, 1.83414 } }, 
      { { { 31, 4 }, { 32, 4 }, { 33, 4 } }, { 174.655715, 1.65698, 188.853285, 1.83414 } }, 
      { { { 31, 5 }, { 32, 5 }, { 33, 5 } }, { 162.659215, 1.65698, 174.735785, 1.83414 } }, 
      { { { 31, 6 }, { 32, 6 }, { 33, 6 } }, { 150.65221499999998, 1.65698, 162.72878500000002, 1.83414 } }, 
      { { { 31, 7 }, { 32, 7 }, { 33, 7 } }, { 140.40497, 1.65698, 150.71303, 1.83414 } }, 
      { { { 31, 8 }, { 32, 8 }, { 33, 8 } }, { 130.14897, 1.65698, 140.45703, 1.83414 } }, 
      { { { 37, 1 }, { 38, 1 }, { 39, 1 } }, { 219.56172500000002, 2.00605, 236.38327500000003, 2.1832 } }, 
      { { { 37, 2 }, { 38, 2 }, { 39, 2 } }, { 202.85672499999998, 2.00605, 219.67827499999999, 2.1832 } }, 
      { { { 37, 3 }, { 38, 3 }, { 39, 3 } }, { 188.762715, 2.00605, 202.960285, 2.1832 } }, 
      { { { 37, 4 }, { 38, 4 }, { 39, 4 } }, { 174.655715, 2.00605, 188.853285, 2.1832 } }, 
      { { { 37, 5 }, { 38, 5 }, { 39, 5 } }, { 162.659215, 2.00605, 174.735785, 2.1832 } }, 
      { { { 37, 6 }, { 38, 6 }, { 39, 6 } }, { 150.65221499999998, 2.00605, 162.72878500000002, 2.1832 } }, 
      { { { 37, 7 }, { 38, 7 }, { 39, 7 } }, { 140.40497, 2.00605, 150.71303, 2.1832 } }, 
      { { { 37, 8 }, { 38, 8 }, { 39, 8 } }, { 130.14897, 2.00605, 140.45703, 2.1832 } }, 
      { { { 43, 1 }, { 44, 1 }, { 45, 1 } }, { 219.56172500000002, 2.35512, 236.38327500000003, 2.53227 } }, 
      { { { 43, 2 }, { 44, 2 }, { 45, 2 } }, { 202.85672499999998, 2.35512, 219.67827499999999, 2.53227 } }, 
      { { { 43, 3 }, { 44, 3 }, { 45, 3 } }, { 188.762715, 2.35512, 202.960285, 2.53227 } }, 
      { { { 43, 4 }, { 44, 4 }, { 45, 4 } }, { 174.655715, 2.35512, 188.853285, 2.53227 } }, 
      { { { 43, 5 }, { 44, 5 }, { 45, 5 } }, { 162.659215, 2.35512, 174.735785, 2.53227 } }, 
      { { { 43, 6 }, { 44, 6 }, { 45, 6 } }, { 150.65221499999998, 2.35512, 162.72878500000002, 2.53227 } }, 
      { { { 43, 7 }, { 44, 7 }, { 45, 7 } }, { 140.40497, 2.35512, 150.71303, 2.53227 } }, 
      { { { 43, 8 }, { 44, 8 }, { 45, 8 } }, { 130.14897, 2.35512, 140.45703, 2.53227 } }, 
      { { { 49, 1 }, { 50, 1 }, { 51, 1 } }, { 219.56172500000002, 2.70418, 236.38327500000003, 2.88133 } }, 
      { { { 49, 2 }, { 50, 2 }, { 51, 2 } }, { 202.85672499999998, 2.70418, 219.67827499999999, 2.88133 } }, 
      { { { 49, 3 }, { 50, 3 }, { 51, 3 } }, { 188.762715, 2.70418, 202.960285, 2.88133 } }, 
      { { { 49, 4 }, { 50, 4 }, { 51, 4 } }, { 174.655715, 2.70418, 188.853285, 2.88133 } }, 
      { { { 49, 5 }, { 50, 5 }, { 51, 5 } }, { 162.659215, 2.70418, 174.735785, 2.88133 } }, 
      { { { 49, 6 }, { 50, 6 }, { 51, 6 } }, { 150.65221499999998, 2.70418, 162.72878500000002, 2.88133 } }, 
      { { { 49, 7 }, { 50, 7 }, { 51, 7 } }, { 140.40497, 2.70418, 150.71303, 2.88133 } }, 
      { { { 49, 8 }, { 50, 8 }, { 51, 8 } }, { 130.14897, 2.70418, 140.45703, 2.88133 } }, 
      { { { 55, 1 }, { 56, 1 }, { 57, 1 } }, { 219.56172500000002, 3.05325, 236.38327500000003, 3.2304 } }, 
      { { { 55, 2 }, { 56, 2 }, { 57, 2 } }, { 202.85672499999998, 3.05325, 219.67827499999999, 3.2304 } }, 
      { { { 55, 3 }, { 56, 3 }, { 57, 3 } }, { 188.762715, 3.05325, 202.960285, 3.2304 } }, 
      { { { 55, 4 }, { 56, 4 }, { 57, 4 } }, { 174.655715, 3.05325, 188.853285, 3.2304 } }, 
      { { { 55, 5 }, { 56, 5 }, { 57, 5 } }, { 162.659215, 3.05325, 174.735785, 3.2304 } }, 
      { { { 55, 6 }, { 56, 6 }, { 57, 6 } }, { 150.65221499999998, 3.05325, 162.72878500000002, 3.2304 } }, 
      { { { 55, 7 }, { 56, 7 }, { 57, 7 } }, { 140.40497, 3.05325, 150.71303, 3.2304 } }, 
      { { { 55, 8 }, { 56, 8 }, { 57, 8 } }, { 130.14897, 3.05325, 140.45703, 3.2304 } }, 
      { { { 61, 1 }, { 62, 1 }, { 63, 1 } }, { 219.56172500000002, -2.88087, 236.38327500000003, -2.70372 } }, 
      { { { 61, 2 }, { 62, 2 }, { 63, 2 } }, { 202.85672499999998, -2.88087, 219.67827499999999, -2.70372 } }, 
      { { { 61, 3 }, { 62, 3 }, { 63, 3 } }, { 188.762715, -2.88087, 202.960285, -2.70372 } }, 
      { { { 61, 4 }, { 62, 4 }, { 63, 4 } }, { 174.655715, -2.88087, 188.853285, -2.70372 } }, 
      { { { 61, 5 }, { 62, 5 }, { 63, 5 } }, { 162.659215, -2.88087, 174.735785, -2.70372 } }, 
      { { { 61, 6 }, { 62, 6 }, { 63, 6 } }, { 150.65221499999998, -2.88087, 162.72878500000002, -2.70372 } }, 
      { { { 61, 7 }, { 62, 7 }, { 63, 7 } }, { 140.40497, -2.88087, 150.71303, -2.70372 } }, 
      { { { 61, 8 }, { 62, 8 }, { 63, 8 } }, { 130.14897, -2.88087, 140.45703, -2.70372 } }, 
      { { { 67, 1 }, { 68, 1 }, { 69, 1 } }, { 219.56172500000002, -2.53181, 236.38327500000003, -2.35466 } }, 
      { { { 67, 2 }, { 68, 2 }, { 69, 2 } }, { 202.85672499999998, -2.53181, 219.67827499999999, -2.35466 } }, 
      { { { 67, 3 }, { 68, 3 }, { 69, 3 } }, { 188.762715, -2.53181, 202.960285, -2.35466 } }, 
      { { { 67, 4 }, { 68, 4 }, { 69, 4 } }, { 174.655715, -2.53181, 188.853285, -2.35466 } }, 
      { { { 67, 5 }, { 68, 5 }, { 69, 5 } }, { 162.659215, -2.53181, 174.735785, -2.35466 } }, 
      { { { 67, 6 }, { 68, 6 }, { 69, 6 } }, { 150.65221499999998, -2.53181, 162.72878500000002, -2.35466 } }, 
      { { { 67, 7 }, { 68, 7 }, { 69, 7 } }, { 140.40497, -2.53181, 150.71303, -2.35466 } }, 
      { { { 67, 8 }, { 68, 8 }, { 69, 8 } }, { 130.14897, -2.53181, 140.45703, -2.35466 } }, 
      { { { 73, 1 }, { 74, 1 }, { 75, 1 } }, { 219.56172500000002, -2.18274, 236.38327500000003, -2.00559 } }, 
      { { { 73, 2 }, { 74, 2 }, { 75, 2 } }, { 202.85672499999998, -2.18274, 219.67827499999999, -2.00559 } }, 
      { { { 73, 3 }, { 74, 3 }, { 75, 3 } }, { 188.762715, -2.18274, 202.960285, -2.00559 } }, 
      { { { 73, 4 }, { 74, 4 }, { 75, 4 } }, { 174.655715, -2.18274, 188.853285, -2.00559 } }, 
      { { { 73, 5 }, { 74, 5 }, { 75, 5 } }, { 162.659215, -2.18274, 174.735785, -2.00559 } }, 
      { { { 73, 6 }, { 74, 6 }, { 75, 6 } }, { 150.65221499999998, -2.18274, 162.72878500000002, -2.00559 } }, 
      { { { 73, 7 }, { 74, 7 }, { 75, 7 } }, { 140.40497, -2.18274, 150.71303, -2.00559 } }, 
      { { { 73, 8 }, { 74, 8 }, { 75, 8 } }, { 130.14897, -2.18274, 140.45703, -2.00559 } }, 
      { { { 79, 1 }, { 80, 1 }, { 81, 1 } }, { 219.56172500000002, -1.83367, 236.38327500000003, -1.65652 } }, 
      { { { 79, 2 }, { 80, 2 }, { 81, 2 } }, { 202.85672499999998, -1.83367, 219.67827499999999, -1.65652 } }, 
      { { { 79, 3 }, { 80, 3 }, { 81, 3 } }, { 188.762715, -1.83367, 202.960285, -1.65652 } }, 
      { { { 79, 4 }, { 80, 4 }, { 81, 4 } }, { 174.655715, -1.83367, 188.853285, -1.65652 } }, 
      { { { 79, 5 }, { 80, 5 }, { 81, 5 } }, { 162.659215, -1.83367, 174.735785, -1.65652 } }, 
      { { { 79, 6 }, { 80, 6 }, { 81, 6 } }, { 150.65221499999998, -1.83367, 162.72878500000002, -1.65652 } }, 
      { { { 79, 7 }, { 80, 7 }, { 81, 7 } }, { 140.40497, -1.83367, 150.71303, -1.65652 } }, 
      { { { 79, 8 }, { 80, 8 }, { 81, 8 } }, { 130.14897, -1.83367, 140.45703, -1.65652 } }, 
      { { { 85, 1 }, { 86, 1 }, { 87, 1 } }, { 219.56172500000002, -1.48461, 236.38327500000003, -1.30746 } }, 
      { { { 85, 2 }, { 86, 2 }, { 87, 2 } }, { 202.85672499999998, -1.48461, 219.67827499999999, -1.30746 } }, 
      { { { 85, 3 }, { 86, 3 }, { 87, 3 } }, { 188.762715, -1.48461, 202.960285, -1.30746 } }, 
      { { { 85, 4 }, { 86, 4 }, { 87, 4 } }, { 174.655715, -1.48461, 188.853285, -1.30746 } }, 
      { { { 85, 5 }, { 86, 5 }, { 87, 5 } }, { 162.659215, -1.48461, 174.735785, -1.30746 } }, 
      { { { 85, 6 }, { 86, 6 }, { 87, 6 } }, { 150.65221499999998, -1.48461, 162.72878500000002, -1.30746 } }, 
      { { { 85, 7 }, { 86, 7 }, { 87, 7 } }, { 140.40497, -1.48461, 150.71303, -1.30746 } }, 
      { { { 85, 8 }, { 86, 8 }, { 87, 8 } }, { 130.14897, -1.48461, 140.45703, -1.30746 } }, 
      { { { 91, 1 }, { 92, 1 }, { 93, 1 } }, { 219.56172500000002, -1.13554, 236.38327500000003, -0.958392 } }, 
      { { { 91, 2 }, { 92, 2 }, { 93, 2 } }, { 202.85672499999998, -1.13554, 219.67827499999999, -0.958392 } }, 
      { { { 91, 3 }, { 92, 3 }, { 93, 3 } }, { 188.762715, -1.13554, 202.960285, -0.958392 } }, 
      { { { 91, 4 }, { 92, 4 }, { 93, 4 } }, { 174.655715, -1.13554, 188.853285, -0.958392 } }, 
      { { { 91, 5 }, { 92, 5 }, { 93, 5 } }, { 162.659215, -1.13554, 174.735785, -0.958392 } }, 
      { { { 91, 6 }, { 92, 6 }, { 93, 6 } }, { 150.65221499999998, -1.13554, 162.72878500000002, -0.958392 } }, 
      { { { 91, 7 }, { 92, 7 }, { 93, 7 } }, { 140.40497, -1.13554, 150.71303, -0.958392 } }, 
      { { { 91, 8 }, { 92, 8 }, { 93, 8 } }, { 130.14897, -1.13554, 140.45703, -0.958392 } }, 
      { { { 97, 1 }, { 98, 1 }, { 99, 1 } }, { 219.56172500000002, -0.786477, 236.38327500000003, -0.609326 } }, 
      { { { 97, 2 }, { 98, 2 }, { 99, 2 } }, { 202.85672499999998, -0.786477, 219.67827499999999, -0.609326 } }, 
      { { { 97, 3 }, { 98, 3 }, { 99, 3 } }, { 188.762715, -0.786477, 202.960285, -0.609326 } }, 
      { { { 97, 4 }, { 98, 4 }, { 99, 4 } }, { 174.655715, -0.786477, 188.853285, -0.609326 } }, 
      { { { 97, 5 }, { 98, 5 }, { 99, 5 } }, { 162.659215, -0.786477, 174.735785, -0.609326 } }, 
      { { { 97, 6 }, { 98, 6 }, { 99, 6 } }, { 150.65221499999998, -0.786477, 162.72878500000002, -0.609326 } }, 
      { { { 97, 7 }, { 98, 7 }, { 99, 7 } }, { 140.40497, -0.786477, 150.71303, -0.609326 } }, 
      { { { 97, 8 }, { 98, 8 }, { 99, 8 } }, { 130.14897, -0.786477, 140.45703, -0.609326 } }, 
      { { { 103, 1 }, { 104, 1 }, { 105, 1 } }, { 219.56172500000002, -0.437411, 236.38327500000003, -0.26026 } }, 
      { { { 103, 2 }, { 104, 2 }, { 105, 2 } }, { 202.85672499999998, -0.437411, 219.67827499999999, -0.26026 } }, 
      { { { 103, 3 }, { 104, 3 }, { 105, 3 } }, { 188.762715, -0.437411, 202.960285, -0.26026 } }, 
      { { { 103, 4 }, { 104, 4 }, { 105, 4 } }, { 174.655715, -0.437411, 188.853285, -0.26026 } }, 
      { { { 103, 5 }, { 104, 5 }, { 105, 5 } }, { 162.659215, -0.437411, 174.735785, -0.26026 } }, 
      { { { 103, 6 }, { 104, 6 }, { 105, 6 } }, { 150.65221499999998, -0.437411, 162.72878500000002, -0.26026 } }, 
      { { { 103, 7 }, { 104, 7 }, { 105, 7 } }, { 140.40497, -0.437411, 150.71303, -0.26026 } }, 
      { { { 103, 8 }, { 104, 8 }, { 105, 8 } }, { 130.14897, -0.437411, 140.45703, -0.26026 } }, 
      { { { 4, 1 }, { 5, 1 }, { 6, 1 } }, { 231.597975, 0.0857268, 251.197025, 0.262878 } }, 
      { { { 4, 2 }, { 5, 2 }, { 6, 2 } }, { 212.142975, 0.0857268, 231.742025, 0.262878 } }, 
      { { { 4, 3 }, { 5, 3 }, { 6, 3 } }, { 196.002465, 0.0857268, 212.270535, 0.262878 } }, 
      { { { 4, 4 }, { 5, 4 }, { 6, 4 } }, { 179.845465, 0.0857268, 196.11353499999998, 0.262878 } }, 
      { { { 4, 5 }, { 5, 5 }, { 6, 5 } }, { 166.35271999999998, 0.0857268, 179.94328000000002, 0.262878 } }, 
      { { { 4, 6 }, { 5, 6 }, { 6, 6 } }, { 152.84671999999998, 0.0857268, 166.43728000000002, 0.262878 } }, 
      { { { 4, 7 }, { 5, 7 }, { 6, 7 } }, { 141.500465, 0.0857268, 152.920535, 0.262878 } }, 
      { { { 4, 8 }, { 5, 8 }, { 6, 8 } }, { 130.143465, 0.0857268, 141.563535, 0.262878 } }, 
      { { { 10, 1 }, { 11, 1 }, { 12, 1 } }, { 231.597975, 0.434793, 251.197025, 0.611944 } }, 
      { { { 10, 2 }, { 11, 2 }, { 12, 2 } }, { 212.142975, 0.434793, 231.742025, 0.611944 } }, 
      { { { 10, 3 }, { 11, 3 }, { 12, 3 } }, { 196.002465, 0.434793, 212.270535, 0.611944 } }, 
      { { { 10, 4 }, { 11, 4 }, { 12, 4 } }, { 179.845465, 0.434793, 196.11353499999998, 0.611944 } }, 
      { { { 10, 5 }, { 11, 5 }, { 12, 5 } }, { 166.35271999999998, 0.434793, 179.94328000000002, 0.611944 } }, 
      { { { 10, 6 }, { 11, 6 }, { 12, 6 } }, { 152.84671999999998, 0.434793, 166.43728000000002, 0.611944 } }, 
      { { { 10, 7 }, { 11, 7 }, { 12, 7 } }, { 141.500465, 0.434793, 152.920535, 0.611944 } }, 
      { { { 10, 8 }, { 11, 8 }, { 12, 8 } }, { 130.143465, 0.434793, 141.563535, 0.611944 } }, 
      { { { 16, 1 }, { 17, 1 }, { 18, 1 } }, { 231.597975, 0.783858, 251.197025, 0.961009 } }, 
      { { { 16, 2 }, { 17, 2 }, { 18, 2 } }, { 212.142975, 0.783858, 231.742025, 0.961009 } }, 
      { { { 16, 3 }, { 17, 3 }, { 18, 3 } }, { 196.002465, 0.783858, 212.270535, 0.961009 } }, 
      { { { 16, 4 }, { 17, 4 }, { 18, 4 } }, { 179.845465, 0.783858, 196.11353499999998, 0.961009 } }, 
      { { { 16, 5 }, { 17, 5 }, { 18, 5 } }, { 166.35271999999998, 0.783858, 179.94328000000002, 0.961009 } }, 
      { { { 16, 6 }, { 17, 6 }, { 18, 6 } }, { 152.84671999999998, 0.783858, 166.43728000000002, 0.961009 } }, 
      { { { 16, 7 }, { 17, 7 }, { 18, 7 } }, { 141.500465, 0.783858, 152.920535, 0.961009 } }, 
      { { { 16, 8 }, { 17, 8 }, { 18, 8 } }, { 130.143465, 0.783858, 141.563535, 0.961009 } }, 
      { { { 22, 1 }, { 23, 1 }, { 24, 1 } }, { 231.597975, 1.13292, 251.197025, 1.31008 } }, 
      { { { 22, 2 }, { 23, 2 }, { 24, 2 } }, { 212.142975, 1.13292, 231.742025, 1.31008 } }, 
      { { { 22, 3 }, { 23, 3 }, { 24, 3 } }, { 196.002465, 1.13292, 212.270535, 1.31008 } }, 
      { { { 22, 4 }, { 23, 4 }, { 24, 4 } }, { 179.845465, 1.13292, 196.11353499999998, 1.31008 } }, 
      { { { 22, 5 }, { 23, 5 }, { 24, 5 } }, { 166.35271999999998, 1.13292, 179.94328000000002, 1.31008 } }, 
      { { { 22, 6 }, { 23, 6 }, { 24, 6 } }, { 152.84671999999998, 1.13292, 166.43728000000002, 1.31008 } }, 
      { { { 22, 7 }, { 23, 7 }, { 24, 7 } }, { 141.500465, 1.13292, 152.920535, 1.31008 } }, 
      { { { 22, 8 }, { 23, 8 }, { 24, 8 } }, { 130.143465, 1.13292, 141.563535, 1.31008 } }, 
      { { { 28, 1 }, { 29, 1 }, { 30, 1 } }, { 231.597975, 1.48199, 251.197025, 1.65914 } }, 
      { { { 28, 2 }, { 29, 2 }, { 30, 2 } }, { 212.142975, 1.48199, 231.742025, 1.65914 } }, 
      { { { 28, 3 }, { 29, 3 }, { 30, 3 } }, { 196.002465, 1.48199, 212.270535, 1.65914 } }, 
      { { { 28, 4 }, { 29, 4 }, { 30, 4 } }, { 179.845465, 1.48199, 196.11353499999998, 1.65914 } }, 
      { { { 28, 5 }, { 29, 5 }, { 30, 5 } }, { 166.35271999999998, 1.48199, 179.94328000000002, 1.65914 } }, 
      { { { 28, 6 }, { 29, 6 }, { 30, 6 } }, { 152.84671999999998, 1.48199, 166.43728000000002, 1.65914 } }, 
      { { { 28, 7 }, { 29, 7 }, { 30, 7 } }, { 141.500465, 1.48199, 152.920535, 1.65914 } }, 
      { { { 28, 8 }, { 29, 8 }, { 30, 8 } }, { 130.143465, 1.48199, 141.563535, 1.65914 } }, 
      { { { 34, 1 }, { 35, 1 }, { 36, 1 } }, { 231.597975, 1.83106, 251.197025, 2.00821 } }, 
      { { { 34, 2 }, { 35, 2 }, { 36, 2 } }, { 212.142975, 1.83106, 231.742025, 2.00821 } }, 
      { { { 34, 3 }, { 35, 3 }, { 36, 3 } }, { 196.002465, 1.83106, 212.270535, 2.00821 } }, 
      { { { 34, 4 }, { 35, 4 }, { 36, 4 } }, { 179.845465, 1.83106, 196.11353499999998, 2.00821 } }, 
      { { { 34, 5 }, { 35, 5 }, { 36, 5 } }, { 166.35271999999998, 1.83106, 179.94328000000002, 2.00821 } }, 
      { { { 34, 6 }, { 35, 6 }, { 36, 6 } }, { 152.84671999999998, 1.83106, 166.43728000000002, 2.00821 } }, 
      { { { 34, 7 }, { 35, 7 }, { 36, 7 } }, { 141.500465, 1.83106, 152.920535, 2.00821 } }, 
      { { { 34, 8 }, { 35, 8 }, { 36, 8 } }, { 130.143465, 1.83106, 141.563535, 2.00821 } }, 
      { { { 40, 1 }, { 41, 1 }, { 42, 1 } }, { 231.597975, 2.18012, 251.197025, 2.35727 } }, 
      { { { 40, 2 }, { 41, 2 }, { 42, 2 } }, { 212.142975, 2.18012, 231.742025, 2.35727 } }, 
      { { { 40, 3 }, { 41, 3 }, { 42, 3 } }, { 196.002465, 2.18012, 212.270535, 2.35727 } }, 
      { { { 40, 4 }, { 41, 4 }, { 42, 4 } }, { 179.845465, 2.18012, 196.11353499999998, 2.35727 } }, 
      { { { 40, 5 }, { 41, 5 }, { 42, 5 } }, { 166.35271999999998, 2.18012, 179.94328000000002, 2.35727 } }, 
      { { { 40, 6 }, { 41, 6 }, { 42, 6 } }, { 152.84671999999998, 2.18012, 166.43728000000002, 2.35727 } }, 
      { { { 40, 7 }, { 41, 7 }, { 42, 7 } }, { 141.500465, 2.18012, 152.920535, 2.35727 } }, 
      { { { 40, 8 }, { 41, 8 }, { 42, 8 } }, { 130.143465, 2.18012, 141.563535, 2.35727 } }, 
      { { { 46, 1 }, { 47, 1 }, { 48, 1 } }, { 231.597975, 2.52919, 251.197025, 2.70634 } }, 
      { { { 46, 2 }, { 47, 2 }, { 48, 2 } }, { 212.142975, 2.52919, 231.742025, 2.70634 } }, 
      { { { 46, 3 }, { 47, 3 }, { 48, 3 } }, { 196.002465, 2.52919, 212.270535, 2.70634 } }, 
      { { { 46, 4 }, { 47, 4 }, { 48, 4 } }, { 179.845465, 2.52919, 196.11353499999998, 2.70634 } }, 
      { { { 46, 5 }, { 47, 5 }, { 48, 5 } }, { 166.35271999999998, 2.52919, 179.94328000000002, 2.70634 } }, 
      { { { 46, 6 }, { 47, 6 }, { 48, 6 } }, { 152.84671999999998, 2.52919, 166.43728000000002, 2.70634 } }, 
      { { { 46, 7 }, { 47, 7 }, { 48, 7 } }, { 141.500465, 2.52919, 152.920535, 2.70634 } }, 
      { { { 46, 8 }, { 47, 8 }, { 48, 8 } }, { 130.143465, 2.52919, 141.563535, 2.70634 } }, 
      { { { 52, 1 }, { 53, 1 }, { 54, 1 } }, { 231.597975, 2.87825, 251.197025, 3.0554 } }, 
      { { { 52, 2 }, { 53, 2 }, { 54, 2 } }, { 212.142975, 2.87825, 231.742025, 3.0554 } }, 
      { { { 52, 3 }, { 53, 3 }, { 54, 3 } }, { 196.002465, 2.87825, 212.270535, 3.0554 } }, 
      { { { 52, 4 }, { 53, 4 }, { 54, 4 } }, { 179.845465, 2.87825, 196.11353499999998, 3.0554 } }, 
      { { { 52, 5 }, { 53, 5 }, { 54, 5 } }, { 166.35271999999998, 2.87825, 179.94328000000002, 3.0554 } }, 
      { { { 52, 6 }, { 53, 6 }, { 54, 6 } }, { 152.84671999999998, 2.87825, 166.43728000000002, 3.0554 } }, 
      { { { 52, 7 }, { 53, 7 }, { 54, 7 } }, { 141.500465, 2.87825, 152.920535, 3.0554 } }, 
      { { { 52, 8 }, { 53, 8 }, { 54, 8 } }, { 130.143465, 2.87825, 141.563535, 3.0554 } }, 
      { { { 58, 1 }, { 59, 1 }, { 60, 1 } }, { 231.597975, -3.05587, 251.197025, -2.87872 } }, 
      { { { 58, 2 }, { 59, 2 }, { 60, 2 } }, { 212.142975, -3.05587, 231.742025, -2.87872 } }, 
      { { { 58, 3 }, { 59, 3 }, { 60, 3 } }, { 196.002465, -3.05587, 212.270535, -2.87872 } }, 
      { { { 58, 4 }, { 59, 4 }, { 60, 4 } }, { 179.845465, -3.05587, 196.11353499999998, -2.87872 } }, 
      { { { 58, 5 }, { 59, 5 }, { 60, 5 } }, { 166.35271999999998, -3.05587, 179.94328000000002, -2.87872 } }, 
      { { { 58, 6 }, { 59, 6 }, { 60, 6 } }, { 152.84671999999998, -3.05587, 166.43728000000002, -2.87872 } }, 
      { { { 58, 7 }, { 59, 7 }, { 60, 7 } }, { 141.500465, -3.05587, 152.920535, -2.87872 } }, 
      { { { 58, 8 }, { 59, 8 }, { 60, 8 } }, { 130.143465, -3.05587, 141.563535, -2.87872 } }, 
      { { { 64, 1 }, { 65, 1 }, { 66, 1 } }, { 231.597975, -2.7068, 251.197025, -2.52965 } }, 
      { { { 64, 2 }, { 65, 2 }, { 66, 2 } }, { 212.142975, -2.7068, 231.742025, -2.52965 } }, 
      { { { 64, 3 }, { 65, 3 }, { 66, 3 } }, { 196.002465, -2.7068, 212.270535, -2.52965 } }, 
      { { { 64, 4 }, { 65, 4 }, { 66, 4 } }, { 179.845465, -2.7068, 196.11353499999998, -2.52965 } }, 
      { { { 64, 5 }, { 65, 5 }, { 66, 5 } }, { 166.35271999999998, -2.7068, 179.94328000000002, -2.52965 } }, 
      { { { 64, 6 }, { 65, 6 }, { 66, 6 } }, { 152.84671999999998, -2.7068, 166.43728000000002, -2.52965 } }, 
      { { { 64, 7 }, { 65, 7 }, { 66, 7 } }, { 141.500465, -2.7068, 152.920535, -2.52965 } }, 
      { { { 64, 8 }, { 65, 8 }, { 66, 8 } }, { 130.143465, -2.7068, 141.563535, -2.52965 } }, 
      { { { 70, 1 }, { 71, 1 }, { 72, 1 } }, { 231.597975, -2.35773, 251.197025, -2.18058 } }, 
      { { { 70, 2 }, { 71, 2 }, { 72, 2 } }, { 212.142975, -2.35773, 231.742025, -2.18058 } }, 
      { { { 70, 3 }, { 71, 3 }, { 72, 3 } }, { 196.002465, -2.35773, 212.270535, -2.18058 } }, 
      { { { 70, 4 }, { 71, 4 }, { 72, 4 } }, { 179.845465, -2.35773, 196.11353499999998, -2.18058 } }, 
      { { { 70, 5 }, { 71, 5 }, { 72, 5 } }, { 166.35271999999998, -2.35773, 179.94328000000002, -2.18058 } }, 
      { { { 70, 6 }, { 71, 6 }, { 72, 6 } }, { 152.84671999999998, -2.35773, 166.43728000000002, -2.18058 } }, 
      { { { 70, 7 }, { 71, 7 }, { 72, 7 } }, { 141.500465, -2.35773, 152.920535, -2.18058 } }, 
      { { { 70, 8 }, { 71, 8 }, { 72, 8 } }, { 130.143465, -2.35773, 141.563535, -2.18058 } }, 
      { { { 76, 1 }, { 77, 1 }, { 78, 1 } }, { 231.597975, -2.00867, 251.197025, -1.83152 } }, 
      { { { 76, 2 }, { 77, 2 }, { 78, 2 } }, { 212.142975, -2.00867, 231.742025, -1.83152 } }, 
      { { { 76, 3 }, { 77, 3 }, { 78, 3 } }, { 196.002465, -2.00867, 212.270535, -1.83152 } }, 
      { { { 76, 4 }, { 77, 4 }, { 78, 4 } }, { 179.845465, -2.00867, 196.11353499999998, -1.83152 } }, 
      { { { 76, 5 }, { 77, 5 }, { 78, 5 } }, { 166.35271999999998, -2.00867, 179.94328000000002, -1.83152 } }, 
      { { { 76, 6 }, { 77, 6 }, { 78, 6 } }, { 152.84671999999998, -2.00867, 166.43728000000002, -1.83152 } }, 
      { { { 76, 7 }, { 77, 7 }, { 78, 7 } }, { 141.500465, -2.00867, 152.920535, -1.83152 } }, 
      { { { 76, 8 }, { 77, 8 }, { 78, 8 } }, { 130.143465, -2.00867, 141.563535, -1.83152 } }, 
      { { { 82, 1 }, { 83, 1 }, { 84, 1 } }, { 231.597975, -1.6596, 251.197025, -1.48245 } }, 
      { { { 82, 2 }, { 83, 2 }, { 84, 2 } }, { 212.142975, -1.6596, 231.742025, -1.48245 } }, 
      { { { 82, 3 }, { 83, 3 }, { 84, 3 } }, { 196.002465, -1.6596, 212.270535, -1.48245 } }, 
      { { { 82, 4 }, { 83, 4 }, { 84, 4 } }, { 179.845465, -1.6596, 196.11353499999998, -1.48245 } }, 
      { { { 82, 5 }, { 83, 5 }, { 84, 5 } }, { 166.35271999999998, -1.6596, 179.94328000000002, -1.48245 } }, 
      { { { 82, 6 }, { 83, 6 }, { 84, 6 } }, { 152.84671999999998, -1.6596, 166.43728000000002, -1.48245 } }, 
      { { { 82, 7 }, { 83, 7 }, { 84, 7 } }, { 141.500465, -1.6596, 152.920535, -1.48245 } }, 
      { { { 82, 8 }, { 83, 8 }, { 84, 8 } }, { 130.143465, -1.6596, 141.563535, -1.48245 } }, 
      { { { 88, 1 }, { 89, 1 }, { 90, 1 } }, { 231.597975, -1.31054, 251.197025, -1.13339 } }, 
      { { { 88, 2 }, { 89, 2 }, { 90, 2 } }, { 212.142975, -1.31054, 231.742025, -1.13339 } }, 
      { { { 88, 3 }, { 89, 3 }, { 90, 3 } }, { 196.002465, -1.31054, 212.270535, -1.13339 } }, 
      { { { 88, 4 }, { 89, 4 }, { 90, 4 } }, { 179.845465, -1.31054, 196.11353499999998, -1.13339 } }, 
      { { { 88, 5 }, { 89, 5 }, { 90, 5 } }, { 166.35271999999998, -1.31054, 179.94328000000002, -1.13339 } }, 
      { { { 88, 6 }, { 89, 6 }, { 90, 6 } }, { 152.84671999999998, -1.31054, 166.43728000000002, -1.13339 } }, 
      { { { 88, 7 }, { 89, 7 }, { 90, 7 } }, { 141.500465, -1.31054, 152.920535, -1.13339 } }, 
      { { { 88, 8 }, { 89, 8 }, { 90, 8 } }, { 130.143465, -1.31054, 141.563535, -1.13339 } }, 
      { { { 94, 1 }, { 95, 1 }, { 96, 1 } }, { 231.597975, -0.961471, 251.197025, -0.78432 } }, 
      { { { 94, 2 }, { 95, 2 }, { 96, 2 } }, { 212.142975, -0.961471, 231.742025, -0.78432 } }, 
      { { { 94, 3 }, { 95, 3 }, { 96, 3 } }, { 196.002465, -0.961471, 212.270535, -0.78432 } }, 
      { { { 94, 4 }, { 95, 4 }, { 96, 4 } }, { 179.845465, -0.961471, 196.11353499999998, -0.78432 } }, 
      { { { 94, 5 }, { 95, 5 }, { 96, 5 } }, { 166.35271999999998, -0.961471, 179.94328000000002, -0.78432 } }, 
      { { { 94, 6 }, { 95, 6 }, { 96, 6 } }, { 152.84671999999998, -0.961471, 166.43728000000002, -0.78432 } }, 
      { { { 94, 7 }, { 95, 7 }, { 96, 7 } }, { 141.500465, -0.961471, 152.920535, -0.78432 } }, 
      { { { 94, 8 }, { 95, 8 }, { 96, 8 } }, { 130.143465, -0.961471, 141.563535, -0.78432 } }, 
      { { { 100, 1 }, { 101, 1 }, { 102, 1 } }, { 231.597975, -0.612405, 251.197025, -0.435254 } }, 
      { { { 100, 2 }, { 101, 2 }, { 102, 2 } }, { 212.142975, -0.612405, 231.742025, -0.435254 } }, 
      { { { 100, 3 }, { 101, 3 }, { 102, 3 } }, { 196.002465, -0.612405, 212.270535, -0.435254 } }, 
      { { { 100, 4 }, { 101, 4 }, { 102, 4 } }, { 179.845465, -0.612405, 196.11353499999998, -0.435254 } }, 
      { { { 100, 5 }, { 101, 5 }, { 102, 5 } }, { 166.35271999999998, -0.612405, 179.94328000000002, -0.435254 } }, 
      { { { 100, 6 }, { 101, 6 }, { 102, 6 } }, { 152.84671999999998, -0.612405, 166.43728000000002, -0.435254 } }, 
      { { { 100, 7 }, { 101, 7 }, { 102, 7 } }, { 141.500465, -0.612405, 152.920535, -0.435254 } }, 
      { { { 100, 8 }, { 101, 8 }, { 102, 8 } }, { 130.143465, -0.612405, 141.563535, -0.435254 } }, 
      { { { 106, 1 }, { 107, 1 }, { 108, 1 } }, { 231.597975, -0.263339, 251.197025, -0.0861883 } }, 
      { { { 106, 2 }, { 107, 2 }, { 108, 2 } }, { 212.142975, -0.263339, 231.742025, -0.0861883 } }, 
      { { { 106, 3 }, { 107, 3 }, { 108, 3 } }, { 196.002465, -0.263339, 212.270535, -0.0861883 } }, 
      { { { 106, 4 }, { 107, 4 }, { 108, 4 } }, { 179.845465, -0.263339, 196.11353499999998, -0.0861883 } }, 
      { { { 106, 5 }, { 107, 5 }, { 108, 5 } }, { 166.35271999999998, -0.263339, 179.94328000000002, -0.0861883 } }, 
      { { { 106, 6 }, { 107, 6 }, { 108, 6 } }, { 152.84671999999998, -0.263339, 166.43728000000002, -0.0861883 } }, 
      { { { 106, 7 }, { 107, 7 }, { 108, 7 } }, { 141.500465, -0.263339, 152.920535, -0.0861883 } }, 
      { { { 106, 8 }, { 107, 8 }, { 108, 8 } }, { 130.143465, -0.263339, 141.563535, -0.0861883 } }
    };
    
    listEtaPartition = listEtaPartitionGE11;
    
    std::string strNamePoly = std::string(h2Curr->GetName()) + "_polyver";
    TH2Poly *hPoly = new TH2Poly(
                         strNamePoly.c_str(), 
                         h2Curr->GetTitle(), 
                         fXL, 
                         fXH, 
                         fYL, 
                         fYH);
    
    for ( auto etaPartition : listEtaPartition ) {
      auto listBinEtaPartition   = etaPartition.first;
      auto listShapeEtaPartition = etaPartition.second;
      
      auto fRL     = listShapeEtaPartition[ 0 ];
      auto fAngleL = listShapeEtaPartition[ 1 ];
      auto fRH     = listShapeEtaPartition[ 2 ];
      auto fAngleH = listShapeEtaPartition[ 3 ];
      int nNumPart = (int)listBinEtaPartition.size();
      std::vector<int> listBin;
      AddBinInEtaPartition(fRL, fRH, fAngleL, fAngleH, nNumPart, hPoly, listBin);

      for ( int i = 0 ; i < nNumPart ; i++ ) {
        auto val = h2Curr->GetBinContent(listBinEtaPartition[ i ].first, listBinEtaPartition[ i ].second);
        if ( val < 0.001 ) continue;
        hPoly->SetBinContent(listBin[ i ], val);
      }
    }
    
    return hPoly;
  };

  void CalcPosFullVFAT(double fRL, double fRH, double fAngleL, double fAngleH, double *pfX, double *pfY)
  {
    pfX[ 0 ] = fRH * cos(fAngleL); pfY[ 0 ] = fRH * sin(fAngleL);
    pfX[ 1 ] = fRH * cos(fAngleH); pfY[ 1 ] = fRH * sin(fAngleH);
    pfX[ 2 ] = fRL * cos(fAngleH); pfY[ 2 ] = fRL * sin(fAngleH);
    pfX[ 3 ] = fRL * cos(fAngleL); pfY[ 3 ] = fRL * sin(fAngleL);
  };

  void AddBinInEtaPartition(double fRL, 
                            double fRH, 
                            double fAngleL, 
                            double fAngleH, 
                            int nNumPart, 
                            TH2Poly *hPoly, 
                            std::vector<int> &listBin)
  {
    double arrfXFull[ 4 ], arrfYFull[ 4 ];
    CalcPosFullVFAT(fRL, fRH, fAngleL, fAngleH, arrfXFull, arrfYFull);

    double arrfXPart[ 4 ], arrfYPart[ 4 ];
    listBin.clear();

    for ( Int_t i = 0 ; i < nNumPart ; i++ ) {
      arrfXPart[ 0 ] = arrfXFull[ 0 ] + ( arrfXFull[ 1 ] - arrfXFull[ 0 ] ) / nNumPart *   i      ;
      arrfXPart[ 1 ] = arrfXFull[ 0 ] + ( arrfXFull[ 1 ] - arrfXFull[ 0 ] ) / nNumPart * ( i + 1 );
      arrfXPart[ 2 ] = arrfXFull[ 3 ] + ( arrfXFull[ 2 ] - arrfXFull[ 3 ] ) / nNumPart * ( i + 1 );
      arrfXPart[ 3 ] = arrfXFull[ 3 ] + ( arrfXFull[ 2 ] - arrfXFull[ 3 ] ) / nNumPart *   i      ;
      arrfYPart[ 0 ] = arrfYFull[ 0 ] + ( arrfYFull[ 1 ] - arrfYFull[ 0 ] ) / nNumPart *   i      ;
      arrfYPart[ 1 ] = arrfYFull[ 0 ] + ( arrfYFull[ 1 ] - arrfYFull[ 0 ] ) / nNumPart * ( i + 1 );
      arrfYPart[ 2 ] = arrfYFull[ 3 ] + ( arrfYFull[ 2 ] - arrfYFull[ 3 ] ) / nNumPart * ( i + 1 );
      arrfYPart[ 3 ] = arrfYFull[ 3 ] + ( arrfYFull[ 2 ] - arrfYFull[ 3 ] ) / nNumPart *   i      ;
      listBin.push_back(hPoly->AddBin(4, arrfXPart, arrfYPart));
    }
  };

  void applyBinNumbering(TH1* obj, const TString&& axis_name) {
    TAxis* axis = nullptr;
    if (axis_name.EqualTo("x"))
      axis = obj->GetXaxis();
    else if (axis_name.EqualTo("y"))
      axis = obj->GetYaxis();
    else
      return;

    if (axis == nullptr) {
      return;
    }

    const int nbins = axis->GetNbins();
    obj->SetNdivisions(-nbins, axis_name);
    for (int bin = 1; bin <= nbins; bin++) {
      const char* label = Form("%d", bin);
      axis->SetBinLabel(bin, label);
    }
  }
};

//----------------------------------------------------------------------------------------------------
static GEMRenderPlugin instance;
