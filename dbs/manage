#!/bin/sh

##H Usage: manage ACTION [SECURITY-STRING]
##H
##H Available actions:
##H   help        show this help
##H   version     get current version of the service
##H   status      show current service's status
##H   sysboot     start server from crond if not running
##H   restart     (re)start the service
##H   start       (re)start the service
##H   stop        stop the service
##H   setinstances fetch instances configuration
##H
##H For more details please refer to operations page:
##H   https://twiki.cern.ch/twiki/bin/view/CMS/DBS3Operations

if [ $(id -un)  = cmsweb ]; then
  echo "ERROR: please use another account" 1>&2
  exit 1
fi

echo_e=-e bsdstart=bsdstart
case $(uname) in Darwin )
  md5sum() { md5 -r ${1+"$@"}; }
  echo_e= bsdstart=start
  ;;
esac

ME=$(basename $(dirname $0))
TOP=$(cd $(dirname $0)/../../.. && pwd)
ROOT=$(cd $(dirname $0)/../.. && pwd)
CFGDIR=$(dirname $0)
LOGDIR=$TOP/logs/$ME
STATEDIR=$TOP/state/$ME
CFGFILE=DBSDef.py
CFGFILE_GR=DBSGlobalReader.py
CFGFILE_GW=DBSGlobalWriter.py
CFGFILE_P3R=DBSPhys03Reader.py
CFGFILE_P3W=DBSPhys03Writer.py
CFGFILE_MG=DBSMigrate.py

JSONURL="https://github.com/dmwm/DBS/raw/master/view_instances.json"
COLOR_OK="\\033[0;32m"
COLOR_WARN="\\033[0;31m"
COLOR_NORMAL="\\033[0;39m"

. $ROOT/apps/$ME/etc/profile.d/init.sh

#set-up x509 environment
export X509_USER_PROXY=$STATEDIR/proxy/proxy.cert
export X509_USER_CERT=$X509_USER_PROXY
export X509_USER_KEY=$X509_USER_PROXY

# Necessary to evaluate the configuration
export DBS3_VERSION

# Start service conditionally on crond restart.
sysboot()
{
  if [ $(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE" | wc -l) = 0 ]; then
    start_dbs $CFGFILE
  fi

  if [ $(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_GR" | wc -l) = 0 ]; then
    start_dbs $CFGFILE_GR
  fi

  if [ $(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_GW" | wc -l) = 0 ]; then
    start_dbs $CFGFILE_GW
  fi

  if [ $(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_P3R" | wc -l) = 0 ]; then
    start_dbs $CFGFILE_P3R
  fi

  if [ $(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_P3W" | wc -l) = 0 ]; then
    start_dbs $CFGFILE_P3W
  fi

  if [ $(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_MG" | wc -l) = 0 ]; then
    start_dbs $CFGFILE_MG
  fi
}

# Start the service.
start_dbs()
{
  cd $STATEDIR
  echo "starting $(echo $1|cut -d'.' -f 1)"
  LD_PRELOAD=$JEMALLOC_ROOT/lib/libjemalloc.so python -u $DBS3_ROOT/lib/python*/site-packages/WMCore/WebTools/Root.py --ini=$CFGDIR/$1 \
    </dev/null 2>&1 | rotatelogs $LOGDIR/$(echo $1| cut -d'.' -f 1)-%Y%m%d.log 86400 >/dev/null 2>&1 &
}

start()
{
  start_dbs $CFGFILE
  start_dbs $CFGFILE_GR
  start_dbs $CFGFILE_GW
  start_dbs $CFGFILE_P3R
  start_dbs $CFGFILE_P3W
  start_dbs $CFGFILE_MG
}

# Stop the service.
stop_dbs()
{
  echo "stopping $(echo $1| cut -d'.' -f 1)"
  for PID in $(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$1" | sort -rn); do
    PSLINE=$(ps -o pid=,$bsdstart=,args= $PID |
             perl -n -e 'print join(" ", (split)[0..6])')
    echo "Stopping $PID ($PSLINE):"
    kill -9 $PID
  done

}
stop()
{
  stop_dbs $CFGFILE
  stop_dbs $CFGFILE_GR
  stop_dbs $CFGFILE_GW
  stop_dbs $CFGFILE_P3R
  stop_dbs $CFGFILE_P3W
  stop_dbs $CFGFILE_MG 
}

# Check if the server is running.
status_dbs()
{
  pid=$(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$1" | sort -n)
  if [ X"$pid" = X ]; then
    echo $echo_e "$(echo $1| cut -d'.' -f 1) is ${COLOR_WARN}NOT RUNNING${COLOR_NORMAL}."
  else
    echo $echo_e "$(echo $1| cut -d'.' -f 1) is ${COLOR_OK}RUNNING${COLOR_NORMAL}, PID" $pid
  fi
}

status()
{
  status_dbs $CFGFILE
  status_dbs $CFGFILE_GR
  status_dbs $CFGFILE_GW
  status_dbs $CFGFILE_P3R
  status_dbs $CFGFILE_P3W
  status_dbs $CFGFILE_MG  
}


setinstances()
{
  f=$(curl -ksL $JSONURL)
  if echo "$f" | python $CFGDIR/validate.py; then
    [ "$(echo $f)" == "$(cat $STATEDIR/view_instances.json)" ] || {
      echo $f > $STATEDIR/view_instances.json
      if [ X"$(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE" | sort -n)" != X ]; then
        stop_dbs $CFGFILE
        start_dbs $CFGFILE
      fi
      if [ X"$(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_GR" | sort -n)" != X ]; then
        stop_dbs $CFGFILE_GR
        start_dbs $CFGFILE_GR
      fi
      if [ X"$(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_GW" | sort -n)" != X ]; then
        stop_dbs $CFGFILE_GW
        start_dbs $CFGFILE_GW
      fi
      if [ X"$(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_P3R" | sort -n)" != X ]; then
        stop_dbs $CFGFILE_P3R
        start_dbs $CFGFILE_P3R
      fi
      if [ X"$(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_MG" | sort -n)" != X ]; then
        stop_dbs $CFGFILE_MG
        start_dbs $CFGFILE_MG
      fi
    }
  else
    exit 3
  fi
}

# Verify the security string.
check()
{
  CHECK=$(echo "$1" | md5sum | awk '{print $1}')
  if [ $CHECK != 94e261a5a70785552d34a65068819993 ]; then
    echo "$0: cannot complete operation, please check documentation." 1>&2
    exit 2;
  fi
}

# Main routine, perform action requested on command line.
case ${1:-status} in
  sysboot )
    sysboot
    ;;

  start | restart )
    check "$2"
    stop
    start
    ;;

  status )
    status
    ;;

  stop )
    check "$2"
    stop
    ;;

  setinstances )
    check "$2"
    setinstances
    ;;

  help )
    perl -ne '/^##H/ && do { s/^##H ?//; print }' < $0
    ;;

  version )
    echo "$DBS3_VERSION"
    ;;

  * )
    echo "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
    exit 1
    ;;
esac
