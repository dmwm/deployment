#!/bin/sh

##H Usage: manage ACTION [SECURITY-STRING]
##H
##H Available actions:
##H   help        show this help
##H   version     get current version of the service
##H   status      show current service's status
##H   sysboot     start server from crond if not running
##H   restart     (re)start the service
##H   start       (re)start the service
##H   stop        stop the service
##H   setinstances fetch instances configuration
##H
##H For more details please refer to operations page:
##H   https://twiki.cern.ch/twiki/bin/view/CMS/DBS3Operations

if [ $(id -un)  = cmsweb ]; then
  echo "ERROR: please use another account" 1>&2
  exit 1
fi

echo_e=-e bsdstart=bsdstart
case $(uname) in Darwin )
  md5sum() { md5 -r ${1+"$@"}; }
  echo_e= bsdstart=start
  ;;
esac

ME=$(basename $(dirname $0))
TOP=$(cd $(dirname $0)/../../.. && pwd)
ROOT=$(cd $(dirname $0)/../.. && pwd)
CFGDIR=$(dirname $0)
LOGDIR=$TOP/logs/$ME
STATEDIR=$TOP/state/$ME
CFGFILE=DBSDef.py
CFGFILE_GR=DBSGlobalReader.py
CFGFILE_GW=DBSGlobalWriter.py
CFGFILE_P3R=DBSPhys03Reader.py
CFGFILE_P3W=DBSPhys03Writer.py
CFGFILE_MG=DBSMigrate.py
JSONURL="@@JSONURL@@"
JSONURL_DEF="@@JSONURL_DEF@@"
JSONURL_GR="@@JSONURL_GR@@"
JSONURL_GW="@@JSONURL_GW@@"
JSONURL_P3R="@@JSONURL_P3R@@"
JSONURL_P3W="@@JSONURL_P3W@@"
JSONURL_MG="@@JSONURL_MG@@"

COLOR_OK="\\033[0;32m"
COLOR_WARN="\\033[0;31m"
COLOR_NORMAL="\\033[0;39m"

. $ROOT/apps/$ME/etc/profile.d/init.sh

#set-up x509 environment
export X509_USER_PROXY=$STATEDIR/proxy/proxy.cert
export X509_USER_CERT=$X509_USER_PROXY
export X509_USER_KEY=$X509_USER_PROXY

# Necessary to evaluate the configuration
export DBS3_VERSION

checkCfg()
{

if [ -f $CFGDIR/$CFGFILE ]; then
    echo $CFGDIR/$CFGFILE 
fi

if [ -f $CFGDIR/$CFGFILE_GR ]; then
    echo $CFGDIR/$CFGFILE_GR 
fi

if [ -f $CFGDIR/$CFGFILE_GW ]; then
    echo $CFGDIR/$CFGFILE_GW  
fi

if [ -f $CFGDIR/$CFGFILE_P3R ]; then
    echo $CFGDIR/$CFGFILE_P3R 
fi

if [ -f $CFGDIR/$CFGFILE_P3W ]; then
    echo $CFGDIR/$CFGFILE_P3W 
fi

if [ -f $CFGDIR/$CFGFILE_MG ]; then
    echo $CFGDIR/$CFGFILE_MG 
fi


}

# Start service conditionally on crond restart.
sysboot()
{
  if [ $(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE" | wc -l) = 0 ]; then
    start_dbs $CFGDIR/$CFGFILE
  fi

  if [ $(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_GR" | wc -l) = 0 ]; then
    start_dbs $CFGDIR/$CFGFILE_GR
  fi

  if [ $(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_GW" | wc -l) = 0 ]; then
    start_dbs $CFGDIR/$CFGFILE_GW
  fi

  if [ $(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_P3R" | wc -l) = 0 ]; then
    start_dbs $CFGDIR/$CFGFILE_P3R
  fi

  if [ $(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_P3W" | wc -l) = 0 ]; then
    start_dbs $CFGDIR/$CFGFILE_P3W
  fi

  if [ $(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_MG" | wc -l) = 0 ]; then
    start_dbs $CFGDIR/$CFGFILE_MG
  fi
}

# Start the service.
start_dbs()
{
  cd $STATEDIR
  fname=$(basename $1)
  bname=$(echo $fname|cut -d'.' -f 1)
  echo "starting $bname"
  LD_PRELOAD=$JEMALLOC_ROOT/lib/libjemalloc.so python -u $DBS3_ROOT/lib/python*/site-packages/WMCore/WebTools/Root.py --ini=$1 \
    </dev/null 2>&1 | rotatelogs $LOGDIR/$bname-%Y%m%d.log 86400 >/dev/null 2>&1 &
}

start()
{
  if [ -f $CFGDIR/$CFGFILE ]; then
      start_dbs $CFGDIR/$CFGFILE
  fi

  if [ -f $CFGDIR/$CFGFILE_GR ]; then
      start_dbs $CFGDIR/$CFGFILE_GR
  fi
 
  if [ -f $CFGDIR/$CFGFILE_GW ]; then
      start_dbs $CFGDIR/$CFGFILE_GW
  fi
 
  if [ -f $CFGDIR/$CFGFILE_P3R ]; then
      start_dbs $CFGDIR/$CFGFILE_P3R
  fi
 
  if [ -f $CFGDIR/$CFGFILE_P3W ]; then
      start_dbs $CFGDIR/$CFGFILE_P3W
  fi
  
  if [ -f $CFGDIR/$CFGFILE_MG ]; then
      start_dbs $CFGDIR/$CFGFILE_MG
  fi
}

# Stop the service.
stop_dbs()
{
  echo "stopping $(echo $1| cut -d'.' -f 1)"
  for PID in $(pgrep -u $(id -u) -f "Root.py.*[=]$1" | sort -rn); do
    PSLINE=$(ps -o pid=,$bsdstart=,args= $PID |
             perl -n -e 'print join(" ", (split)[0..6])')
    echo "Stopping $PID ($PSLINE):"
    kill -9 $PID
  done

}
stop()
{
  if [ -f $CFGDIR/$CFGFILE ]; then
      stop_dbs $CFGDIR/$CFGFILE
  fi

  if [ -f $CFGDIR/$CFGFILE_GR ]; then
      stop_dbs $CFGDIR/$CFGFILE_GR
  fi

  if [ -f $CFGDIR/$CFGFILE_GW ]; then
      stop_dbs $CFGDIR/$CFGFILE_GW
  fi

  if [ -f $CFGDIR/$CFGFILE_P3R ]; then
      stop_dbs $CFGDIR/$CFGFILE_P3R
  fi
   
  if [ -f $CFGDIR/$CFGFILE_P3W ]; then
      stop_dbs $CFGDIR/$CFGFILE_P3W
  fi

  if [ -f $CFGDIR/$CFGFILE_MG ]; then
      stop_dbs $CFGDIR/$CFGFILE_MG
  fi
 
}

# Check if the server is running.
status_dbs()
{
  pid=$(pgrep -u $(id -u) -f "Root.py.*[=]$1" | sort -n)
  if [ X"$pid" = X ]; then
    echo $echo_e "$(echo $1| cut -d'.' -f 1) is ${COLOR_WARN}NOT RUNNING${COLOR_NORMAL}."
  else
    echo $echo_e "$(echo $1| cut -d'.' -f 1) is ${COLOR_OK}RUNNING${COLOR_NORMAL}, PID" $pid
  fi
}

status()
{

  if [ -f $CFGDIR/$CFGFILE ]; then
      status_dbs $CFGDIR/$CFGFILE
  fi      

  if [ -f $CFGDIR/$CFGFILE_GR ]; then
      status_dbs $CFGDIR/$CFGFILE_GR
  fi

  if [ -f $CFGDIR/$CFGFILE_GW ]; then
      status_dbs $CFGDIR/$CFGFILE_GW
  fi

  if [ -f $CFGDIR/$CFGFILE_P3R ]; then
      status_dbs $CFGDIR/$CFGFILE_P3R
  fi

  if [ -f $CFGDIR/$CFGFILE_P3W ]; then
      status_dbs $CFGDIR/$CFGFILE_P3W
  fi

  if [ -f $CFGDIR/$CFGFILE_MG ]; then
      status_dbs $CFGDIR/$CFGFILE_MG
  fi
  
}


setinstances()
{
  f=$(curl -ksL $JSONURL)
  f_def=$(curl -ksL $JSONURL_DEF)
  f_gr=$(curl -ksL $JSONURL_GR)
  f_gw=$(curl -ksL $JSONURL_GW)
  f_p3r=$(curl -ksL $JSONURL_P3R)
  f_p3w=$(curl -ksL $JSONURL_P3W)
  f_mg=$(curl -ksL $JSONURL_MG)
  if echo "$f" | python $CFGDIR/validate.py "def" &&
     echo "$f_gr" | python $CFGDIR/validate.py "reader"  &&
     echo "$f_gw" | python $CFGDIR/validate.py "writer" &&
     echo "$f_p3r" | python $CFGDIR/validate.py "reader"  &&
     echo "$f_p3w" | python $CFGDIR/validate.py "writer" &&
     echo "$f_mg" | python $CFGDIR/validate.py "def" &&
     echo "$f_def" | python $CFGDIR/validate.py "reader&writer" ; then
   {
    [ "$(echo $f)" == "$(cat $STATEDIR/view_instances.json)" ] &&  [ "$(echo $f_def)" == "$(cat $STATEDIR/view_instances_def.json)" ] && [ "$(echo $f_gr)" == "$(cat $STATEDIR/view_instances_gr.json)" ] && [ "$(echo $f_gw)" == "$(cat $STATEDIR/view_instances_gw.json)" ] && [ "$(echo $f_p3r)" == "$(cat $STATEDIR/view_instances_p3r.json)" ] && [ "$(echo $f_p3w)" == "$(cat $STATEDIR/view_instances_p3w.json)" ] && [ "$(echo $f_mg)" == "$(cat $STATEDIR/view_instances_mg.json)" ] 
   } || {
      echo $f > $STATEDIR/view_instances.json
      echo $f_def > $STATEDIR/view_instances_def.json
      echo $f_gr > $STATEDIR/view_instances_gr.json
      echo $f_gw > $STATEDIR/view_instances_gw.json
      echo $f_p3r > $STATEDIR/view_instances_p3r.json
      echo $f_p3w > $STATEDIR/view_instances_p3w.json
      echo $f_mg > $STATEDIR/view_instances_mg.json
      if [ X"$(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE" | sort -n)" != X ]; then
        stop_dbs $CFGDIR/$CFGFILE
        start_dbs $CFGDIR/$CFGFILE
      fi
      if [ X"$(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_GR" | sort -n)" != X ]; then
        stop_dbs $CFGDIR/$CFGFILE_GR
        start_dbs $CFGDIR/$CFGFILE_GR
      fi
      if [ X"$(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_GW" | sort -n)" != X ]; then
        stop_dbs $CFGDIR/$CFGFILE_GW
        start_dbs $CFGDIR/$CFGFILE_GW
      fi
      if [ X"$(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_P3R" | sort -n)" != X ]; then
        stop_dbs $CFGDIR/$CFGFILE_P3R
        start_dbs $CFGDIR/$CFGFILE_P3R
      fi
      if [ X"$(pgrep -u $(id -u) -f "Root.py.*[=]$CFGDIR/$CFGFILE_MG" | sort -n)" != X ]; then
        stop_dbs $CFGDIR/$CFGFILE_MG
        start_dbs $CFGDIR/$CFGFILE_MG
      fi
    }
  else
    exit 3
  fi
}

# Verify the security string.
check()
{
  CHECK=$(echo "$1" | md5sum | awk '{print $1}')
  if [ $CHECK != 94e261a5a70785552d34a65068819993 ]; then
    echo "$0: cannot complete operation, please check documentation." 1>&2
    exit 2;
  fi
}

# Main routine, perform action requested on command line.
case ${1:-status} in
  sysboot )
    sysboot
    ;;
  checkCfg )
    checkCfg
    ;;

  start | restart )
    check "$2"
    stop
    start
    ;;

  status )
    status
    ;;

  stop )
    check "$2"
    stop
    ;;

  setinstances )
    check "$2"
    setinstances
    ;;

  help )
    perl -ne '/^##H/ && do { s/^##H ?//; print }' < $0
    ;;

  version )
    echo "$DBS3_VERSION"
    ;;

  * )
    echo "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
    exit 1
    ;;
esac
