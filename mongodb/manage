#!/bin/sh

##H Usage: manage ACTION [SECURITY-STRING]
##H
##H Available actions:
##H   help        show this help
##H   version     get current version of the service
##H   status      show current service's status
##H   sysboot     start server from crond if not running
##H   restart     (re)start the service
##H   start       (re)start the service
##H   stop        stop the service
##H
##H For more details please refer to operations page:
##H   https://twiki.cern.ch/twiki/bin/view/CMS/DASOperation

if [ $(id -un)  = cmsweb ]; then
  echo "ERROR: please use another account" 1>&2
  exit 1
fi

echo_e=-e
case $(uname) in Darwin )
  md5sum() { md5 -r ${1+"$@"}; }
  echo_e=
  ;;
esac

ME=$(basename $(dirname $0))
TOP=$(cd $(dirname $0)/../../.. && pwd)
ROOT=$(cd $(dirname $0)/../.. && pwd)
CFGDIR=$(dirname $0)
LOGDIR=$TOP/logs/$ME
STATEDIR=$TOP/state/$ME
COLOR_OK="\\033[0;32m"
COLOR_WARN="\\033[0;31m"
COLOR_NORMAL="\\033[0;39m"

. $ROOT/apps/mongo/etc/profile.d/init.sh
cd $STATEDIR

# Update DAS maps
updatemaps()
{
    # names
    das_map_src="update_das_db.js"
    das_clean_src="clean_das_db.js"
    val_cmd_src="das_map_validator.py"
    stagedir=$STATEDIR/stagingarea

    # get map and validator script from configuration
    das_map=`cat $CFGDIR/maps.conf | grep $das_map_src`
    validator=`cat $CFGDIR/maps.conf | grep $val_cmd_src | sed "s,__ROOT__,$ROOT/config/mongodb,"`

    # Fetch DAS map JSON file from given URI
    regex='(https|http)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
    if  [ -f $das_map ]; then
        dasmaps=$das_map
    elif [[ $das_map =~ $regex ]]; then
        curl -s $das_map > $stagedir/$das_map_src
        dasmaps=$stagedir/$das_map_src
    else
        echo "Invalid DAS map input, please provide either URL or full file name"
    fi

    # Calculate MD5 checksum, compare it to existing one
    stamp=$(cat $dasmaps | md5sum)

    # Validate DAS map JSON file
    $validator $dasmaps
    validator_status=$?
    if  [ "$validator_status" -ne "0" ]; then
        echo "Fail DAS map validation"
        exit 1
    fi

    # Clean-up DAS databases and prepare for deployment
    if [ ! -f $stagedir/$das_clean_src ]; then
cat > $stagedir/$das_clean_src << EOF
parser = db.getSisterDB("parser");
parser.db.drop();
das = db.getSisterDB("das");
das.dropDatabase();
mapping = db.getSisterDB("mapping");
mapping.dropDatabase();
EOF
    fi

    # Deploy DAS map JSON file into MongoDB
    oldstamp=$(cat $stagedir/mapping_db-schema-stamp 2>/dev/null)
    if [ ! -f $stagedir/mapping_db-schema-stamp ] || [ X"$oldstamp" != X"$stamp" ]; then
        set -e
        mongo --port 8230 $stagedir/$das_clean_src
        mongoimport --port 8230 --db mapping --collection db --file $dasmaps
        echo "$stamp" > $stagedir/mapping_db-schema-stamp
        set +e
    fi
}

# Start service conditionally on crond restart.
sysboot()
{
  PID=$(cat $STATEDIR/db/mongod.lock 2>/dev/null)
  if [ X"$PID" = X ] || [ $(ps -o pid= -p $PID | wc -l) = 0 ]; then
    # must clean-up improper shutdown
    rm -rf $STATEDIR/db/*
    rm -f $PWD/stagingarea/*-schema-stamp
    start
  fi
}

# Start the service.
start()
{
  echo "starting $ME"
  if  [ -f /usr/bin/numactl ]; then
      cmd="numactl --interleave=all"
  else
      cmd=""
  fi
  $cmd $MONGO_ROOT/bin/mongod --dbpath=$STATEDIR/db \
      --port 8230 --nohttpinterface --bind_ip 127.0.0.1 \
      </dev/null 2>&1 | rotatelogs $LOGDIR/mongodb-%Y%m%d.log 86400 >/dev/null 2>&1 &

  n=0 started=false
  while [ $n -le 100 ]; do
    curl -s 127.0.0.1:8230 | grep -q 'You are trying to access MongoDB' &&
      started=true && break
    echo "waiting for $ME..."
    sleep 1
    n=$(expr $n + 1)
  done

  if $started; then
    echo "$ME is ready"
  else
    echo "$ME did not start, not cleaning nor updating."
    exit 1
  fi
}

# Stop the service.
stop()
{
  echo "stopping $ME"
  PID=$(cat $STATEDIR/db/mongod.lock 2>/dev/null)
  if [ X"$PID" != X ]; then
    kill -INT $PID
    n=0
    while [ -s $STATEDIR/db/mongod.lock -a $n -le 10 ]; do
      echo "Waiting for mongod to exit..."
      n=$(expr $n + 1)
      sleep 1
    done
  fi
}

# Check if the server is running.
status()
{
  PID=$(cat $STATEDIR/db/mongod.lock 2>/dev/null)
  if [ X"$PID" != X ] && [ $(ps -p $PID | wc -l) != 0 ]; then
    echo $echo_e "$ME is ${COLOR_OK}RUNNING${COLOR_NORMAL}, PID" $PID
  else
    echo $echo_e "$ME is ${COLOR_WARN}NOT RUNNING${COLOR_NORMAL}."
  fi
}

# Verify the security string.
check()
{
  CHECK=$(echo "$1" | md5sum | awk '{print $1}')
  if [ $CHECK != 94e261a5a70785552d34a65068819993 ]; then
    echo "$0: cannot complete operation, please check documentation." 1>&2
    exit 2;
  fi
}

# Main routine, perform action requested on command line.
case ${1:-status} in
  sysboot )
    sysboot
    ;;

  start | restart )
    check "$2"
    stop
    start
    updatemaps
    ;;

  status )
    status
    ;;

  stop )
    check "$2"
    stop
    ;;

  updatemaps )
    updatemaps
    ;;

  help )
    perl -ne '/^##H/ && do { s/^##H ?//; print }' < $0
    ;;

  version )
    echo "$MONGO_VERSION"
    ;;

  * )
    echo "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
    exit 1
    ;;
esac
