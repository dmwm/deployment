#!/bin/sh

##H Usage: manage ACTION [SECURITY-STRING]
##H
##H Available actions:
##H   help        show this help
##H   version     get current version of the service
##H   status      show current service's status
##H   sysboot     start server from crond if not running
##H   restart     (re)start the service
##H   start       (re)start the service
##H   rgraphs     (re)start only the graphs service
##H   graceful    restart the service gracefully
##H   stop        stop the service
##H
##H For more details please refer to operations page:
##H   https://twiki.cern.ch/twiki/bin/view/CMS/PhedexOperationsWebSite

if [ $(id -un)  = cmsweb ]; then
  echo "ERROR: please use another account" 1>&2
  exit 1
fi

echo_e=-e bsdstart=bsdstart
case $(uname) in Darwin )
  md5sum() { md5 -r ${1+"$@"}; }
  echo_e= bsdstart=start
  ;;
esac

ME=$(basename $(dirname $0))
TOP=$(cd $(dirname $0)/../../.. && pwd)
ROOT=$(cd $(dirname $0)/../.. && pwd)
CFGDIR=$(dirname $0)
LOGDIR=$TOP/logs/$ME
STATEDIR=$TOP/state/$ME
PHEDEX_PATTERN="/httpd -f $STATEDIR/server.conf"
GRAPHS_PATTERN="[/]tools/phedex-web.py"
COLOR_OK="\\033[0;32m"
COLOR_WARN="\\033[0;31m"
COLOR_NORMAL="\\033[0;39m"

for app in PHEDEX-{datasvc,web,webapp}; do
  . $ROOT/apps/$app/etc/profile.d/init.sh
done
PHEDEX_GRAPHS_ROOT=$PHEDEX_WEB_ROOT/Documentation/WebSite/PlotConfig
GLOBAL_GRAPHS_ROOT=$WEBTOOLS_ROOT/lib/python`echo $PYTHON_VERSION | cut -f1,2 -d.`/site-packages/Tools/GraphTool
export PYTHONPATH=$PHEDEX_GRAPHS_ROOT/src:$GLOBAL_GRAPHS_ROOT/src:$PYTHONPATH
export GLOBAL_GRAPHS_ROOT # for the .xml files
export MPLCONFIGDIR=$STATEDIR

# Start just the graphs server.
start_graphs()
{
  cd $STATEDIR
  ulimit -v $(( 4096 * 1024 )) # max 4GB vsize
  python -u $PHEDEX_GRAPHS_ROOT/tools/phedex-web.py $STATEDIR/etc/graphs_website_prod.xml \
    </dev/null 2>&1 | rotatelogs $LOGDIR/graphs-%Y%m%d.log 86400 >/dev/null 2>&1 &
}

# Stop just the graphs server.
kill_graphs()
{
  for PID in $(pgrep -u $(id -u) -f "$GRAPHS_PATTERN" | sort -rn); do
    PSLINE=$(ps -o pid=,$bsdstart=,args= $PID |
             perl -n -e 'print join(" ", (split)[0..6])')
    [ $(ps h $PID | wc -l) = 0 ] && break
    echo "Stopping $PID ($PSLINE):"
    kill -9 $PID
  done
}

# Start service conditionally on crond restart.
sysboot()
{
  if [ $(pgrep -u $(id -u) -f "$PHEDEX_PATTERN" | wc -l) = 0 ] ||
     [ $(pgrep -u $(id -u) -f "$GRAPHS_PATTERN" | wc -l) = 0 ]; then
    start
  fi
}

# Start the service.
start()
{
  cd $STATEDIR
  echo "starting $ME"
  $STATEDIR/etc/httpd restart </dev/null 2>&1
  start_graphs
}

# Stop the service.
stop()
{
  echo "stopping $ME"
  for pat in "$PHEDEX_PATTERN" "$GRAPHS_PATTERN"; do
    for PID in $(pgrep -u $(id -u) -f "$pat" | sort -n); do
      PSLINE=$(ps -o pid=,$bsdstart=,args= $PID |
               perl -n -e 'print join(" ", (split)[0..6])')
      [ $(ps h $PID | wc -l) = 0 ] && break
      echo "Stopping $PID ($PSLINE):"
      kill -INT $PID
      sleep 1
      kill -9 $PID 2>/dev/null
    done
  done
}

# Check if the server is running.
status()
{
  pid=$(pgrep -u $(id -u) -f "$PHEDEX_PATTERN" | sort -n)
  if [ X"$pid" = X ]; then
    echo $echo_e "$ME is ${COLOR_WARN}NOT RUNNING${COLOR_NORMAL}."
  else
    echo $echo_e "$ME is ${COLOR_OK}RUNNING${COLOR_NORMAL}, PID" $pid
  fi

  pid=$(pgrep -u $(id -u) -f "$GRAPHS_PATTERN" | sort -rn)
  if [ X"$pid" = X ]; then
    echo $echo_e "$ME grapher is ${COLOR_WARN}NOT RUNNING${COLOR_NORMAL}."
  else
    echo $echo_e "$ME grapher is ${COLOR_OK}RUNNING${COLOR_NORMAL}, PID" $pid
  fi
}

graceful()
{
  echo "restarting $ME gracefully"
  $STATEDIR/etc/httpd graceful
}

# Verify the security string.
check()
{
  CHECK=$(echo "$1" | md5sum | awk '{print $1}')
  if [ $CHECK != 94e261a5a70785552d34a65068819993 ]; then
    echo "$0: cannot complete operation, please check documentation." 1>&2
    exit 2;
  fi
}

# Main routine, perform action requested on command line.
case ${1:-status} in
  sysboot )
    sysboot
    ;;

  start | restart )
    check "$2"
    stop
    start
    ;;

  status )
    status
    ;;

  stop )
    check "$2"
    stop
    ;;

  graceful )
    check "$2"
    graceful
    ;;

  rgraphs )
    check "$2"
    kill_graphs
    start_graphs
    ;;

  help )
    perl -ne '/^##H/ && do { s/^##H ?//; print }' < $0
    ;;

  version )
    echo "$PHEDEX_WEB_VERSION $PHEDEX_DATASVC_VERSION $PHEDEX_WEBAPP_VERSION"
    ;;

  * )
    echo "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
    exit 1
    ;;
esac
