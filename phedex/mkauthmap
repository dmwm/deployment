#!/usr/bin/env python
"""mkauthmap -c url.conf -o FILE
Queries CRIC roles .json and put it into FILE
"""

import json
import os
import os.path
import re
import sys
import requests
from optparse import OptionParser
from pprint import pprint  # to debug objects content
from tempfile import mkstemp
from urlparse import urlsplit, urlunparse

# Global vars
opts = ''
args = ''
roles = ''
sitemap = {}
sites = ''


def current_umask():
    """Get current umask"""
    val = os.umask(0)
    os.umask(val)
    return val


def getFecthDetails(fname):
    with open(fname) as fp:
        content = fp.readlines()

    for line in content:
        m = re.match(r"^url (cric?:\S+)$", line.strip())
        if not m:
            print "%s: %d: line not understood" % (fname, line)
            sys.exit(1)
        ml = m.group(1)
        url = ml[5:]
        return url

def request(uri, opts):
    content = ''
    url = "https:" + uri
    apimap = {
        'group-responsibilities':'/api/accounts/user',
        'roles': '/accounts/user',
        'site-names&rcsite_state=ANY': '/api/cms/site',
        'people': '/api/accounts/user',
        'site-responsibilities': '/api/accounts/user'
    }
    (scheme, netloc, path, query, frag) = urlsplit(url)
    path = apimap[query] + path
    query = "json&preset=" + query
    url = urlunparse((scheme, netloc, path, '', query, frag))
    cert = None
    if opts.cert and opts.key:
        cert = (opts.cert, opts.key)
    try:
        result = requests.get(url, cert=cert, verify=opts.ca_cert or True)
        result.raise_for_status()
    except requests.exceptions.HTTPError as errh:
        print ("Http Error:", errh)
        print ("URL", url)
    except requests.exceptions.ConnectionError as errc:
        print ("Error Connecting:", errc)
        print ("URL:", url)
    except requests.exceptions.Timeout as errt:
        print ("Timeout Error:", errt)
        print ("URL", url)
    except requests.exceptions.RequestException as err:
        print ("Request error", err)
        print ("URL:", url)
    else:
        content = result.text
    return content


def updateFile(opts, jsondata):
    if jsondata:
        # compare this against the current one (create it if it does not exist)
        try:
            with open(opts.out) as fp:
                oldjsondata = fp.read()
        except IOError:
            print "File %s does not exist yet." % opts.out
            oldjsondata = ''

        if jsondata != oldjsondata:
            # then let's write out a new file and replace the current one
            try:
              fd, tmpname= mkstemp(dir = os.path.dirname(opts.out))
              tmpfile = os.fdopen(fd, "w")
              tmpfile.write(jsondata)
              tmpfile.close()
            except(IOError, OSError) as e: 
              print "An error ocurred:"
              pprint(e)

            myumask = current_umask()
            os.chmod(tmpname, 0666 & ~myumask)
            os.rename(tmpname, opts.out)


##Main
# Getting command line options
opt = OptionParser(__doc__)
opt.add_option("-c", "--conf", dest="conf", metavar="FILE", help="configuration file")
opt.add_option("-o", "--out", dest="out", metavar="FILE", help="output file")
opt.add_option("-v", "--verbose", action="store_true", help="increase output verbosity")
opt.add_option("-e", "--cert", dest="cert", help="path to cert file")
opt.add_option("-k", "--key", dest="key", help="path to cert key")
opt.add_option("-b", "--ca-cert", dest="ca_cert", help="path to ca cert bundle")

opts, args = opt.parse_args()
# Checking command line options
if not opts.conf:
    print >> sys.stderr, "Config file name file is required"
    exit(1)

if not opts.out:
    print >> sys.stderr, "Output file name is required"
    exit(1)

##Calling core functions
#Identifiying api to fetch
path = opts.out
apil = path.split("/")
api = apil[len(apil)-1]

uri = getFecthDetails(opts.conf)

if api == "group-responsibilities.json":
    uri = uri + "group-responsibilities"
    ncontent = request(uri, opts)

if api == "people.json":
    uri = uri + "people"
    ncontent = request(uri, opts)

if api == "site-names.json":
    uri = uri + "site-names&rcsite_state=ANY"
    ncontent = request(uri, opts)

if api == "site-responsibilities.json":
    uri = uri + "site-responsibilities"
    ncontent = request(uri, opts)

updateFile(opts, ncontent)
exit(0)
