# Disable keep-alive with Safari.  See various bugs on Google.
BrowserMatch Safari nokeepalive

# Standard stanza for MSIE SSL bugs.
BrowserMatch "MSIE [456]" nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0

# Always return server processing time.
Header set CMS-Server-Time "%D %t"

@INCLUDE perl.conf@
@INCLUDE error.conf@
@INCLUDE status.conf@
@INCLUDE nukehdr.conf@
@INCLUDE backends.conf@

# Define server virtual host.
Listen 80
<VirtualHost *:80>
  SSLEngine off

  # Disable all request methods except GET. Anything else must come
  # over HTTPS. GET needs to be supported so people can type URLs in
  # web browser location bar, and get a redirect to HTTPS.
  RewriteEngine on
  RewriteCond %{REQUEST_METHOD} !^GET$
  RewriteRule ^ - [F]

  # Capture the URI for the backend; need mod_rewrite to grab it.
  RewriteCond %{ENV:REDIRECT_REQUEST_URI} !^$
  RewriteRule ^ - [E=CMS_REQUEST_URI:%{ENV:REDIRECT_REQUEST_URI}]
  RewriteCond %{ENV:REDIRECT_REQUEST_URI} ^$
  RewriteRule ^ - [E=CMS_REQUEST_URI:%{REQUEST_URI}]
  RequestHeader set CMS-Request-URI %{CMS_REQUEST_URI}e

  # Add 'escape' rewrite map to name space.  Extract query for redirects.
  RewriteMap escape int:escape
  RewriteCond %{QUERY_STRING} ^$
  RewriteRule ^ - [E=CMS_QUERY:]
  RewriteCond %{QUERY_STRING} !^$
  RewriteRule ^ - [E=CMS_QUERY:?%{QUERY_STRING}]

  # Application configurations.
  @INCLUDE app_*_nossl.conf@
</VirtualHost>

# This is the configuration file for the HTTPS web server, listening
# on the port 443.  It defines the basic SSL server, then includes
# "content" rules from ssl_rewrites.d directory.
#
# The server configuration features are as follows:
#  - Listening on port 443
#  - Requires SSL, i.e. no HTTP on HTTPS port.  A common exploit is
#    to fool browsers talking in "clear" on a supposedly secure port.
#    Note that this doesn't prevent browsers from revealing secret
#    information at the network level, but does prevent the server
#    from disclosing any information on an unsecure channel, and does
#    prevent the client from completing transactions with the server.
#  - Requires strong authentication; weak encryption is not accepted.
#  - Uses CERN CA signed host keys.  In a load balanced cluster all
#    the hosts share a single key for the DNS alias, not keys for the
#    actual host name (e.g. "cmsweb.cern.ch", rather than "vocmsnn").
#  - CA certificates and CRL lists for all grid sites.  These will be
#    used when SSL client verification is needed, to identify grid
#    certificates.  Certificates from general bodies (Thawte, Verisign
#    and so on) are deliberately not accepted; we only take grid certs.
#  - SSL certificate verification details, where used, are exported
#    to web services hosted on the server, and the back-end proxies.
#  - Try authenticating clients with X509 certificates.  Here the
#    check is merely optional, more complete checks are elsewhere.
#    This has been moved to global server level to avoid issues with
#    re-negotiation triggered by location-specific checks.  This has
#    the unfortunate side effect that accessing the https server, i.e.
#    for almost every access to the server, the client is prompted for
#    a certificate, even if the certificate isn't used for anything.
Listen 443
<VirtualHost *:443>
  SSLEngine on
  SSLProtocol ALL -SSLv2 -SSLv3
  SSLCipherSuite HIGH:!SSLv2:!ADH:!aNULL:!eNULL:!NULL:@STRENGTH
  SSLCertificateFile /data/certs/hostcert.pem
  SSLCertificateKeyFile /data/certs/hostkey.pem
  SSLCACertificatePath /etc/grid-security/certificates
  SSLCARevocationPath /etc/grid-security/certificates
  SSLCARevocationCheck chain
  SSLOptions +StrictRequire +StdEnvVars +ExportCertData +LegacyDNStringFormat
  SSLVerifyClient optional
  SSLVerifyDepth 10
  <Location />
    # Require strong encryption.  This is defence in depth, this is
    # technically unnecessary due to SSLCipherSuite definition.
    SSLRequire (%{SSL_CIPHER_USEKEYSIZE} >= 128 and %{SSL_CIPHER} !~ m/^(EXP|NULL)/)

    # Always require SSL when talking to this port.  This will not
    # prevent a client from compromising itself (the request will
    # already have been sent in clear on the wire by the time it is
    # rejected), but does protect the server, does prevent reasonable
    # web browser clients from sending "secure" cookies over an
    # insecure connection, and does limit malicious attempts to
    # fool humans the access is secure when in fact it is not.
    SSLRequireSSL

    # Increase SSL renegotiation buffer size.
    SSLRenegBufferSize 1048576
  </Location>

  # If we've verified certificate, pass the info to the back-end.
  RequestHeader set SSL_CLIENT_CERT %{SSL_CLIENT_CERT}e
  RequestHeader set SSL_CLIENT_S_DN %{SSL_CLIENT_S_DN}e
  RequestHeader set SSL_CLIENT_VERIFY %{SSL_CLIENT_VERIFY}e
  RequestHeader set HTTPS %{HTTPS}e

  # Tell backends the request was https
  RequestHeader set X-Forwarded-Proto "https"

  # Enable rewrite engine and disable (again) all request methods except
  # HEAD, POST, GET, PUT and DELETE.  In particular make sure TRACE and
  # TRACK cannot be used.  This is defence in depth, the "TraceEnable Off"
  # in the main server configuration should already disable these methods;
  # the rules below are just a precaution to avoid accidents.
  RewriteEngine on
  RewriteCond %{REQUEST_METHOD} !^(HEAD|POST|GET|PUT|DELETE)$
  RewriteRule ^ - [F]

  # Capture the URI for the backend; need mod_rewrite to grab it.
  RewriteCond %{ENV:REDIRECT_REQUEST_URI} !^$
  RewriteRule ^ - [E=CMS_REQUEST_URI:%{ENV:REDIRECT_REQUEST_URI}]
  RewriteCond %{ENV:REDIRECT_REQUEST_URI} ^$
  RewriteRule ^ - [E=CMS_REQUEST_URI:%{REQUEST_URI}]
  RequestHeader set CMS-Request-URI %{CMS_REQUEST_URI}e

  # Add 'escape' rewrite map to name space.  Extract query for redirects.
  RewriteMap escape int:escape
  RewriteCond %{QUERY_STRING} ^$
  RewriteRule ^ - [E=CMS_QUERY:]
  RewriteCond %{QUERY_STRING} !^$
  RewriteRule ^ - [E=CMS_QUERY:?%{QUERY_STRING}]

  # Application configurations.
  @INCLUDE auth.conf@
  @INCLUDE app_*_ssl.conf@
</VirtualHost>
