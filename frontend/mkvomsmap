#!/usr/bin/env python3
""" mkvomsmap -c url.conf -o FILE
Queries CRIC roles .json and put it into FILE
"""

import json
import os
import os.path
import re
import sys
import requests
from optparse import OptionParser
from pprint import pprint  # to debug objects content
from tempfile import mkstemp
from urllib.parse import urlsplit, urlunparse

# Global vars
opts = ''
args = ''
roles = ''
sitemap = {}
sites = ''


def current_umask():
    """Get current umask"""
    val = os.umask(0)
    os.umask(val)
    return val


def convertToHeadersStyle(siteInfo):
    """  
     - all lower case
     - whitespaces and underscores replaced by dashes
    """
    try:
        result = siteInfo.replace('_', '-').replace(' ', '-')
    except AttributeError as e:
        print(('ERROR: ', e))
        result = 'none'
    return result.lower()


def getFecthDetails(fname):
    with open(fname) as fp:
        content = fp.readlines()

    for line in content:
        m = re.match(r"^url (cric?:\S+)$", line.strip())
        if not m:
            print("%s: %d: line not understood" % (fname, line))
            sys.exit(1)
        ml = m.group(1)
        url = ml[5:]
        return url


def request(uri, opts):
    content = ''
    url = "https:" + uri
    apimap = {
        'roles': '/api/accounts/user',
        'site-names&rcsite_state=ANY': '/api/cms/site',
        'people': '/api/accounts/user',
        'site-responsibilities': '/api/accounts/user'
    }
    (scheme, netloc, path, query, frag) = urlsplit(url)
    path = apimap[query] + path
    query = "json&preset=" + query
    url = urlunparse((scheme, netloc, path, '', query, frag))
    cert = None
    if opts.cert and opts.key:
        cert = (opts.cert, opts.key)
    try:
        result = requests.get(url, cert=cert, verify=opts.ca_cert or True)
        result.raise_for_status()
    except requests.exceptions.HTTPError as errh:
        print(("Http Error:", errh))
        print(("URL", url))
    except requests.exceptions.ConnectionError as errc:
        print(("Error Connecting:", errc))
        print(("URL", url))
    except requests.exceptions.Timeout as errt:
        print(("Timeout Error:", errt))
        print(("URL", url))
    except requests.exceptions.RequestException as err:
        print(("Request error", err))
        print(("URL", url))
    else:
        content = result.text
    return content


def buildSiteMap(sites):
    # Following the format of 'roles' API, all names are prepended by 'site:'
    sitemap = {}
    for entry in json.loads(sites)['result']:
        if entry[0] == 'phedex':
            sitename = "site:" + convertToHeadersStyle(entry[1])
            nodename = "site:" + convertToHeadersStyle(entry[2])
            if sitename in sitemap:
                sitemap[sitename].append(nodename)
            else:
                sitemap[sitename] = [nodename]
    return sitemap


def updateFile(opts, roles, sitemap):
    if not roles or not sitemap:
        print("Either roles or sitemap is empty, aborting...", file=sys.stderr)
        exit(2)

    struct = json.loads(roles)
    output_lines = []


  # Validate keys and normalize roles
    #validateMapKeys(struct)
    #rolesToLower(struct)

    # Generate output lines in the required format
    for entry in struct:
        dn = entry['DN']
        output_line = f'"{dn}" cms'
        output_lines.append(output_line)

    # Serialize to a plain string with newline characters
    output_data = "\n".join(output_lines) + "\n"

    # Read the existing file to compare content
    try:
        with open(opts.out, 'r', encoding='utf-8') as fp:
            old_data = fp.read()
    except IOError:
        print(f"File {opts.out} does not exist yet.")
        old_data = ''

    # If data has changed, write out a new file
    if output_data != old_data:
        try:
            fd, tmpname = mkstemp(dir=os.path.dirname(opts.out))
            with os.fdopen(fd, "w", encoding='utf-8') as tmpfile:
                tmpfile.write(output_data)
            os.chmod(tmpname, 0o666 & ~current_umask())
            os.rename(tmpname, opts.out)
            print("Info: json content has changed, updating it...")
        except (IOError, OSError) as e:
            print("An error occurred during file operation:")
            print(e)

def current_umask():
    return os.umask(0)
# Getting command line options
opt = OptionParser(__doc__)
opt.add_option("-c", "--conf", dest="conf", metavar="FILE", help="configuration file")
opt.add_option("-o", "--out", dest="out", metavar="FILE", help="output file")
opt.add_option("-v", "--verbose", action="store_true", help="increase output verbosity")
opt.add_option("-e", "--cert", dest="cert", help="path to cert file")
opt.add_option("-k", "--key", dest="key", help="path to cert key")
opt.add_option("-b", "--ca-cert", dest="ca_cert", help="path to ca cert bundle")
opts, args = opt.parse_args()
# Checking command line options
if not opts.conf:
    print("Config file name file is required", file=sys.stderr)
    exit(1)

if not opts.out:
    print("Output file name is required", file=sys.stderr)
    exit(1)
    
##Calling core functions
uri = getFecthDetails(opts.conf)
roles = request(uri, opts)
# sites = request (uri.replace('roles','site-names'))
sites = request(uri.replace('roles', 'site-names&rcsite_state=ANY'), opts)
sitemap = buildSiteMap(sites)
updateFile(opts, roles, sitemap)
# content = request(uri)
# updateFile(opts, content)
exit(0)
