# vim: set ft=sh sw=2 ts=8 et :
deploy_frontend_variants="default prod preprod dev"
deploy_frontend_deps()
{
  deploy $stage wmcore-auth
}

deploy_frontend_prep()
{
  mkproj var etc/keys{,/{auth-{hn,csrf,sid,pass},cert-cookie,host-map}}
  setgroup ug+rw,o-w _config $PWD{,/etc{,/keys}}
}

deploy_frontend_sw()
{
  deploy_pkg -a frontend/sitedbread.py comp cms+frontend

  $authlink || if grep -q Oracle $project_auth/sitedbread.py; then :; else
    deploy_frontend_fakeauth $project_auth/users.db
  fi

  # New mod_perl2 version contains breaking api changes, fix it here
  # while supporting both old and new architecture
  case $arch in
    slc6_amd64_gcc493 | slc7_amd64_gcc630 )
      perl -p -i -e 's|connection->remote_addr|connection->client_addr|g' \
           $root/$cfgversion/config/$project/cmsauth.pm
      ;;
    * )
      ;;
  esac
}

deploy_frontend_post()
{
  local certs
  if [ -r $root/certs/hostkey.pem ]; then
    certs=$root/certs
  elif [ -r /data/certs/hostkey.pem ]; then
    certs=/data/certs
  elif [ -r /etc/grid-security/hostkey.pem ]; then
    certs=/etc/grid-security
  else
    note "ERROR: cannot find hostcert/key to use"
    exit 1
  fi

  local backends opts name user issuer
  case $variant in
    prod )
      opts="" name="-n cmsweb.cern.ch" issuer="cmsweb.cern.ch"
      backends=backends-prod.txt ;;
    preprod )
      opts="" name="-n cmsweb-testbed.cern.ch" issuer="cmsweb-testbed.cern.ch"
      backends=backends-preprod.txt ;;
    dev )
      opts="-DTEST" 
      case $host in
        vocms0126 ) name="-n cmsweb-sec.cern.ch" issuer="cmsweb-sec.cern.ch";;
        * ) name="-n cmsweb-dev.cern.ch" issuer="cmsweb-dev.cern.ch";;
      esac
      backends=backends-dev.txt ;;
    * )
      opts="-DTEST" name="" issuer="`hostname`"
      backends=backends-dev.txt ;;
  esac
  if $nogroups; then user="-u $(id -un):$(id -gn)"; else user="-u _frontend:_frontend"; fi

  # This hack is needed while supporting old and new deployment procedures
  $nogroups || { sudo chown -R $USER:_config $PWD/{*.conf,htdocs,etc} || true; }

  # fix path in x509_scitokens_issuer configs before we'll make server configuration
  perl -p -i -e "s|\@STATEDIR\@|$project_state|g" \
    $project_config/x509_scitokens_issuer/x509_scitokens_issuer_app.json
  perl -p -i -e "s|\@STATEDIR\@|$project_state|g" \
    $project_config/x509_scitokens_issuer/x509_scitokens_issuer_http.conf
  perl -p -i -e "s|cmsweb.cern.ch|$issuer|g" \
      $project_config/x509_scitokens_issuer/openid-configuration
  perl -p -i -e "s|cmsweb.cern.ch|$issuer|g" \
      $project_config/x509_scitokens_issuer/00-defaults.cfg

  # Generate apache httpd server configuration
  (. $root/current/apps/frontend/etc/profile.d/init.sh
   export AUTH_JSON_MAP=$PWD/etc/authmap.json
   export HOST_MAP_FILE=$project_config/$backends
   export CONFIG_DIR=$project_config
   mkserver                                           \
   $name                                              \
   -r $PWD                                            \
   -l $project_logs                                   \
   -a $APACHE24_ROOT                                  \
   $user                                              \
   -o "$opts"                                         \
   -p $project_config/mpm.conf                        \
   -c $project_config/frontend.conf                   \
   -d $project_config/htdocs                          \
   -e "$APACHE24_SETUP_ROOT/etc/env.d/*.sh"           \
   -e "$FRONTEND_ROOT/etc/env.d/*.sh"                 \
   -m perl_module:$MOD_PERL24_ROOT/modules/mod_perl.so \
   -m wsgi_module:$MOD_WSGI24_ROOT/modules/mod_wsgi.so)
# we may use mod_gridsite for x509_scitoken_issuer, if so take line below,
# uncomment it, and put it one line above (after mod_perl)
#   -m gridsite_module:$MOD_GRIDSITE24_ROOT/usr/local/lib/httpd/modules/mod_gridsite.so \
#   -m evasive20_module:$MOD_EVASIVE24_ROOT/modules/mod_evasive20.so)
  [ $? = 0 ]
  rm -f $PWD/etc/keys/authz-headers
  setgroup -R ugo+r,go-w _config $PWD/{*.conf,htdocs,etc/env.d,etc/keys}
  setgroup ugo+r,go-w _config $PWD/{etc/,etc/{httpd,options.txt}}
  setgroup ug+rw,o-w _frontend $PWD/var

  ### x509-scitokens-issuer setup
  (. $root/current/apps/frontend/etc/profile.d/init.sh

  chmod 644 $project_config/x509_scitokens_issuer/x509_scitokens_issuer_app.json

  mkdir -p $project_state/wsgi
  mkdir -p $project_state/logs
  mkdir -p $project_state/x509_scitokens_issuer
  mkdir -p $project_state/htdocs/.well-known
  mkdir -p $project_state/htdocs/oauth2

  scitokens-admin-create-key --create-keys --pem-private --pem-public > /tmp/issuer.pem
  scitokens-admin-create-key --private-keyfile /tmp/issuer.pem --jwks-private > /tmp/issuer_key.jwks
  scitokens-admin-create-key --public-keyfile /tmp/issuer.pem --jwks-public > /tmp/issuer_public.jwks

  cp -f /tmp/issuer_public.jwks $project_state/htdocs/oauth2/certs
  cp -f /tmp/issuer_key.jwks $project_state/x509_scitokens_issuer
  cp -f /tmp/issuer_public.jwks $project_state/x509_scitokens_issuer
  chmod 444 $project_state/x509_scitokens_issuer/issuer_key.jwks
  chmod 644 $project_state/x509_scitokens_issuer/issuer_public.jwks
  rm /tmp/issuer.pem /tmp/issuer_key.jwks /tmp/issuer_public.jwks

  cat $project_config/x509_scitokens_issuer/openid-configuration | sed -e "s,cmsweb.cern.ch,$issuer,"\
    > $project_state/htdocs/.well-known/openid-configuration
  cp -f $project_config/x509_scitokens_issuer/* $project_state/x509_scitokens_issuer/
  cp -f $X509_SCITOKENS_ISSUER_ROOT/wsgi/x509-scitokens-issuer.wsgi $project_state/wsgi)
  ### end of x509-scitokens-issuer setup

  # Hardlink to key used to hmac request headers
  sudo ln $root/$cfgversion/auth/wmcore-auth/header-auth-key $PWD/etc/keys/authz-headers

  # Do not require root access when running on single-user mode
  if $nogroups; then
    perl -p -i \
      -e 's,Listen 80,Listen 8080,g;'                                          \
      -e 's,\*:80,\*:8080,g;'                                                  \
      -e 's,Listen 443,Listen 8443,g;'                                         \
      -e 's,\*:443,\*:8443,g;'                                                 \
      -e "s,SSLCertificateFile.*,SSLCertificateFile $certs/hostcert.pem,g;"    \
      -e "s,SSLCertificateKeyFile.*,SSLCertificateKeyFile $certs/hostkey.pem,g"\
      $PWD/server.conf
  else :; fi

  case $host in * ) enable ;; esac
  (mkcrontab | { egrep -v -e '^(PATH|X509_[A-Z_]*)=' || true; }
   echo "@reboot sudo bashs -l -c \"$project_config/manage restart 'I did read documentation'\""
   echo "13 */3 * * * $project_config/mkvomsmap --key $certs/hostkey.pem" \
        "--cert $certs/hostcert.pem -c $project_config/mkgridmap.conf" \
        "-o $PWD/etc/voms-gridmap.txt --vo cms --git-token-path $project_auth/gitlab_token.txt"
   case $host in vocms* ) silent= ;; * ) silent= ;; esac
   echo "*/4 * * * * . $root/current/apps/frontend/etc/profile.d/init.sh &&" \
        "PYTHONPATH=$root/current/auth/frontend:\$PYTHONPATH $project_config/mkauthmap" \
        "$silent -c $project_config/mkauth.conf -o $PWD/etc/authmap.json"

   case $variant:$host in
     prod:vocms0160 | prod:vocms0760 )
       echo "23 */6 * * * $project_config/update-keys $PWD vocms0158 vocms0162 vocms0164" ;;
     preprod:vocms0134 | preprod:vocms0734 )
       echo "23 */6 * * * $project_config/update-keys $PWD vocms0135" ;;
     dev:vocms0117 | default:* )
       echo "23 */6 * * * $project_config/update-keys $PWD" ;;
     * ) ;;
   esac
  ) | crontab -

  # Run crontabs to generate initial auth files in state dir
  (crontab -l | grep -e '^[A-Z0-9_]*=' -e $project_config/ |
   perl -pe 's|^[/*0-9 ]* ||; s|(^[A-Z0-9_]+=)|export $1|') | sh -x

  # This is needed on OSX only
  $nogroups || sudo rm -f $PWD/etc/httpd.plist
  perl -p -i -e "s|\@STATEDIR\@|$PWD|g" \
    < $project_config/httpd.plist.in \
    > $PWD/etc/httpd.plist
  chmod 644 $PWD/etc/httpd.plist
  $nogroups || sudo chown root:$(id -gn) $PWD/etc/httpd.plist

  # Set to start frontend system wide
  if $nogroups; then
    :
  elif [ -d /etc/rc.d/init.d ]; then
    sudo rm -f /etc/rc.d/init.d/httpd
    case $arch in
      slc6*) sudo ln -s $PWD/etc/httpd /etc/rc.d/init.d/httpd ;;
      slc7*) sudo cp $PWD/etc/httpd /etc/rc.d/init.d/ ;;
    esac
    sudo /sbin/chkconfig --add httpd
    sudo /sbin/chkconfig --levels 2345 httpd on
  elif [ -d /Library/LaunchDaemons ]; then
    sudo rm -f /Library/LaunchDaemons/ch.cern.cms.httpd.plist
    sudo ln -s $PWD/etc/httpd.plist /Library/LaunchDaemons/ch.cern.cms.httpd.plist
  else
    note "ERROR: how do you install a httpd service on this system?"
    exit 1
  fi
}

deploy_frontend_auth()
{
  echo "import sqlite3"
  echo "db = { 'type': sqlite3, 'database': '$project_auth/users.db' }"
}

deploy_frontend_fakeauth()
{
  [ ! -f $1 ] || return 0

  local user=${SUDO_USER:-$(id -un)}
  local pass=$(perl -e 'print map{chr(1+32*(2+int(rand(2)))+int(rand(26)))} 1..15')
  local passcrypt=$(perl -e "print crypt('$pass', reverse time())")
  local homedir=$(finger -m -p -l $user | perl -ne '/Directory: (\S+)/ && print $1')
  local name=$(finger -m -p -l $user | perl -ne '/Name: (.*)/ && print $1')
  local forename=$(echo "$name" | cut -f1 -d\ )
  local surname=$(echo "$name" | cut -f2- -d\ )
  if [ -r $homedir/.globus/usercert.pem ]; then
    local dn=$(openssl x509 -noout -subject -in $homedir/.globus/usercert.pem | cut -f2- -d\ )
  else
    local dn=
  fi

  note "INFO: generating fake login with user $user password $pass dn '$dn'"
  (echo "create table cms_name"
   echo " (id integer not null primary key,"
   echo "  name varchar(100) not null unique);"
   echo "create table site"
   echo " (id integer not null primary key,"
   echo "  name varchar(100) not null unique);"
   echo "create table site_cms_name_map"
   echo " (site_id integer not null,"
   echo "  cms_name_id integer not null);"
   echo "create table user_passwd"
   echo " (username varchar(60) not null primary key,"
   echo "  passwd varchar(30) not null);"
   echo "create table contact"
   echo " (id integer not null primary key,"
   echo "  surname varchar(1000) not null,"
   echo "  forename varchar(1000) not null,"
   echo "  username varchar(60) unique,"
   echo "  dn varchar(1000) unique);"
   echo "create table role"
   echo " (id integer not null primary key,"
   echo "  title varchar(100) not null unique);"
   echo "create table user_group"
   echo " (id integer not null primary key,"
   echo "  name varchar(100) not null unique);"
   echo "create table site_responsibility"
   echo " (contact integer not null,"
   echo "  role integer not null,"
   echo "  site integer not null,"
   echo "  primary key (contact, role, site));"
   echo "create table group_responsibility"
   echo " (contact integer not null,"
   echo "  role integer not null,"
   echo "  user_group integer not null,"
   echo "  primary key (contact, role, user_group));"
   echo "insert into cms_name values (1, 'T3_NX_Foobar');"
   echo "insert into site values (1, 'Foobar');"
   echo "insert into site_cms_name_map values (1, 1);"
   echo "insert into user_passwd values ('$user', '$passcrypt');"
   echo "insert into contact values (1, '$surname', '$forename', '$user', '$dn');"
   echo "insert into user_group values (1, 'foo');"
   echo "insert into role values (1, 'bar');"
   echo "insert into site_responsibility values (1, 1, 1);"
   echo "insert into group_responsibility values (1, 1, 1);") | sqlite3 $1
  setgroup ugo+r,go-wx _config $project_auth/users.db
}
