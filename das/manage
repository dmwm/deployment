##H Usage: manage ACTION [ATTRIBUTE] [SECURITY-STRING]
##H
##H Available actions:
##H   help        show this help
##H   version     get current version of the service
##H   status      show current service's status
##H   sysboot     start server from crond if not running
##H   restart     (re)start the service
##H   start       (re)start the service
##H   stop        stop the service
##H   fetchmaps   fetch DAS maps
##H
##H Available attributes:
##H   das2go      name of das2go server
##H   das2py      name of das2py server
##H   das_dbs_update name of cronjob
##H   das_cleanup    name of cronjob
##H
##H For more details please refer to operations page:
##H   https://twiki.cern.ch/twiki/bin/view/CMS/DASOperation

if [ $(id -un)  = cmsweb ]; then
  echo "ERROR: please use another account" 1>&2
  exit 1
fi

echo_e=-e
case $(uname) in Darwin )
  md5sum() { md5 -r ${1+"$@"}; }
  echo_e=
  ;;
esac

# setup DASSERVER by providing third parameter on command line to manage script
DASSERVER="das2go" # default server
msg=${@: -1} # last argument
attr=$2 # possible attribute value, either server or cron name
if [ "$attr" == "das2py" ]; then
   DASSERVER="das2py"
fi

ME=$(basename $(dirname $0))
TOP=$(cd $(dirname $0)/../../.. && pwd)
ROOT=$(cd $(dirname $0)/../.. && pwd)
LOGDIR=$TOP/logs/$ME
STATEDIR=$TOP/state/$ME
COLOR_OK="\\033[0;32m"
COLOR_WARN="\\033[0;31m"
COLOR_NORMAL="\\033[0;39m"

. $ROOT/apps/$ME/etc/profile.d/init.sh

export DAS_ROOT YUI_ROOT
export PYTHONUNBUFFERED=1
PYTHONV=`echo $PYTHON_VERSION | cut -f1,2 -d.`
export DAS_PYTHONPATH=$DAS_ROOT/lib/python$PYTHONV/site-packages
export DAS_JSPATH=$DAS_ROOT/lib/python$PYTHONV/site-packages/web/js
export DAS_CSSPATH=$DAS_ROOT/lib/python$PYTHONV/site-packages/web/css
export DAS_TMPLPATH=$DAS_ROOT/lib/python$PYTHONV/site-packages/web/jinja_templates
export DAS_IMAGESPATH=$DAS_ROOT/lib/python$PYTHONV/site-packages/web/images
export X509_USER_PROXY=$STATEDIR/proxy/proxy.cert
export X509_USER_CERT=$X509_USER_PROXY
export X509_USER_KEY=$X509_USER_PROXY
export STAGEDIR=$STATEDIR/stagingarea
export DASMAPS_DIR=$STAGEDIR
export DAS_CONFIG=$ROOT/config/$ME/das.cfg
export DAS2GO_CONFIG=$ROOT/config/$ME/das2go-config.json
export DAS_CONFIG_CLI=$ROOT/config/$ME/das_cli.cfg
mkdir -p $STAGEDIR

cd $STATEDIR
host=`hostname -s`

# download metadata and stage it for update
# change is applied on next updatedata() call
fetchmaps(){
  set -e
  # fetch DAS maps
  DASMAPS_URL="https://raw.github.com/dmwm/DASMaps/master/js"
  DASMAPS_DIR=$STAGEDIR/DASMaps
  mkdir -p $DASMAPS_DIR
  $DAS_ROOT/bin/das_js_fetch $DASMAPS_URL $DASMAPS_DIR

  # validate DAS maps
  $DAS_ROOT/bin/das_js_validate $DASMAPS_DIR

  # clean-up STEGEDIR area
  rm -f $STAGEDIR/*.js $STAGEDIR/*-schema-stamp

  # copy DAS maps into STAGEDIR
  cp -r $DASMAPS_DIR/* $STAGEDIR

  # mark that we updated MongoDB with DAS maps
  echo "Fetched maps: `date`" > $STAGEDIR/das_maps_status

  # clean-up DASMAPS_DIR
  rm -rf $DASMAPS_DIR

  set +e
}

# use global variable to assign MongoDB status
mongo_status="no"

# helper function to check MongoDB status
check4db() {
    port=8230
    mongo_ok=`pymongostat | awk '{z=split($0,a," "); print a[z]}'`
    if  [ -n "$mongo_ok" ]; then
        mongo_status="ok"
        return
    fi
    mongo_status="no"
    return
}

# helper function to wait for MongoDB appearance
# it will incrementally increase waiting time with 20 iterations (~3minute)
wait4db() {
    local counter=0
    # check if mongodb is running
    while [  $counter -lt 20 ]; do
        check4db
        if [ "$mongo_status" == "ok" ]; then
            return
        fi
        let counter=counter+1
        echo "MongoDB is not running, check in $counter sec"
        sleep $counter
    done
    check4db
    if [ "$mongo_status" == "no" ]; then
        echo "MongoDB is not running, unable to start DAS server"
        exit 1
    fi
}

# Helper function to upload DAS maps before we start DAS server
load_das_maps()
{
    if [ -z `env | grep DASMAPS_DIR` ]; then
        echo "Envinronment DASMAPS_DIR is not set"
        exit 1
    fi
    if [ ! -d $DASMAPS_DIR ]; then
        echo "DAS map directory DASMAPS_DIR=$DASMAPS_DIR does not exists"
        exit 1
    fi
    echo "Update DAS maps from $DASMAPS_DIR"
    $DAS_ROOT/bin/das_js_import $DASMAPS_DIR
}

# DAS action functions
sysboot_das()
{
    if  [ "$DASSERVER" == "das2go" ]; then
        sysboot_das2go
    else
        sysboot_das2py
    fi
}

start_das()
{
    if  [ "$DASSERVER" == "das2go" ]; then
        start_das2go
    else
        start_das2py
    fi
}

stop_das()
{
    if  [ "$DASSERVER" == "das2go" ]; then
        stop_das2go
    else
        stop_das2py
    fi
}
status_das()
{
    if  [ "$DASSERVER" == "das2go" ]; then
        status_das2go
    else
        status_das2py
    fi
}

# Start service conditionally on crond restart.
sysboot_das2py()
{
  dostart=false
  if [ $(pgrep -u $(id -u) -f "[/]das_server.py" | wc -l) = 0 ]; then
      dostart=true
  fi
  $dostart && start_das2py
}

start_das2py()
{
  wait4db
  load_das_maps
  echo "starting $ME"
  # choose correct DAS map file
  case $host in vocms012[67] | vocms0132 | vocms0731 ) tbed="_testbed" dbspace="_int";; * ) tbed="" dbspace="_prod";; esac
  local mapfile=$STAGEDIR/das${tbed}_maps_dbs${dbspace}.js
  cp -f $mapfile $STAGEDIR/update_mapping_db.js
  # start DAS service (it will load DAS maps into MongoDB and start DAS server)
  DASMAPS_DIR=$STAGEDIR LD_PRELOAD=$JEMALLOC_ROOT/lib/libjemalloc.so $DAS_ROOT/bin/das_server start \
      </dev/null 2>&1 | rotatelogs $LOGDIR/das-%Y%m%d.log 86400 >/dev/null 2>&1 &
}

# Stop the service.
stop_das2py()
{
  echo "stopping $ME"
  for das_pid in $(pgrep -u $(id -u) -f "[/]das_server"); do
      kill -9 $das_pid
  done
}

# Check if the server is running.
status_das2py()
{
  local pid=$(pgrep -u $(id -u) -f "[/]das_server" | sort -n)
  if [ X"$pid" = X ]; then
    echo $echo_e "$ME $pat is ${COLOR_WARN}NOT RUNNING${COLOR_NORMAL}."
  else
    echo $echo_e "$ME $pat is ${COLOR_OK}RUNNING${COLOR_NORMAL}, PID" $pid
  fi
}


# Runs actions to be done through cronjobs
cron()
{
  local action=$1
  case $action in
    das_cleanup )
      $DAS_ROOT/bin/das_cleanup --verbose \
          </dev/null 2>&1 | rotatelogs $LOGDIR/das_cleanup-%Y%m%d.log 86400 >/dev/null 2>&1 &
      ;;
    das_dbs_update )
      $DAS_ROOT/bin/das_dbs_update --verbose \
          </dev/null 2>&1 | rotatelogs $LOGDIR/das_dbs_update-%Y%m%d.log 86400 >/dev/null 2>&1 &
      ;;
    * )
      echo "You must specify the cron action to run: das_dbs_update|das_cleanup "
      exit 1
      ;;
  esac
}

# Verify the security string.
check()
{
  CHECK=$(echo "$1" | md5sum | awk '{print $1}')
  if [ $CHECK != 94e261a5a70785552d34a65068819993 ]; then
    echo "$0: cannot complete operation, please check documentation." 1>&2
    exit 2;
  fi
}

# das2go action functions
sysboot_das2go()
{
  dostart=false
  if [ $(pgrep -u $(id -u) -f "[/]das2go_server" | wc -l) = 0 ]; then
      dostart=true
  fi
  $dostart && start_das2go
}

start_das2go()
{
    wait4db
    load_das_maps
    echo "Starting das2go service..."
    # choose correct DAS map file
    case $host in vocms012[67] | vocms0132 | vocms0731 ) tbed="_testbed" dbspace="_int";; * ) tbed="" dbspace="_prod";; esac
    local mapfile=$STAGEDIR/das${tbed}_maps_dbs${dbspace}.js
    cp -f $mapfile $STAGEDIR/update_mapping_db.js
    nohup das2go_server $DAS2GO_CONFIG </dev/null 2>&1 | rotatelogs $LOGDIR/das2go-%Y%m%d.log 86400 >/dev/null 2>&1 &
}

stop_das2go()
{
    local pid=`ps auxwww | egrep "das2go_server|das2go -config" | grep -v grep | awk 'BEGIN{ORS=" "} {print $2}'`
    echo "Stop das2go service... ${pid}"
    if [ -n "${pid}" ]; then
        kill -9 ${pid}
    fi
}

status_das2go()
{
    local pid=`ps auxwww | egrep "das2go_server|das2go -config" | grep -v grep | awk 'BEGIN{ORS=" "} {print $2}'`

    if  [ -z "${pid}" ]; then
        echo "das2go is not running"
        return
    fi
    if  [ `uname` == "Darwin" ]; then
        nth=`ps -M -p $pid | grep -v USER | wc -l | awk '{print $1}'`
    else
        nth=`ps -L -p $pid | grep -v PID | wc -l | awk '{print $1}'`
    fi
    echo "das2go server runs with $nth threads"
    if [ ! -z "${pid}" ]; then
        echo $echo_e "das2go service is ${COLOR_OK}RUNNING${COLOR_NORMAL}, PID=${pid}"
        ps -f -wwww -p ${pid}
    else
        echo $echo_e "das2go service is ${COLOR_WARN}NOT RUNNING${COLOR_NORMAL}"
    fi
}

# Main routine, perform action requested on command line.
case ${1:-status} in
  sysboot )
    sysboot_das
    ;;

  start | restart )
    check "$msg"
    stop_das
    start_das
    ;;

  status )
    status_das
    ;;

  fetchmaps )
    check "$msg"
    fetchmaps
    ;;

  stop )
    check "$msg"
    stop_das
    ;;

  cron )
    check "$msg"
    cron $attr
    ;;

  help )
    perl -ne '/^##H/ && do { s/^##H ?//; print }' < $0
    ;;

  version )
    echo "$DAS_VERSION"
    ;;

  * )
    echo "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
    exit 1
    ;;
esac
