#!/usr/bin/env python

import os, json
import httplib, urllib2

class HTTPSClientAuthHandler(urllib2.HTTPSHandler):
    """
    Simple HTTPS client authentication class based on provided
    key/ca information
    """
    def __init__(self, key=None, cert=None, debug=0):
        if  debug:
            urllib2.HTTPSHandler.__init__(self, debuglevel=1)
        else:
            urllib2.HTTPSHandler.__init__(self)
        self.key = key
        self.cert = cert

    def https_open(self, req):
        """Open request method"""
        #Rather than pass in a reference to a connection class, we pass in
        # a reference to a function which, for all intents and purposes,
        # will behave as a constructor
        return self.do_open(self.get_connection, req)

    def get_connection(self, host, timeout=300):
        """Connection method"""
        if  self.key:
            return httplib.HTTPSConnection(host, key_file=self.key,
                                                cert_file=self.cert)
        return httplib.HTTPSConnection(host)

px = os.path.join(os.environ['TOP'], 'current/auth/proxy/proxy.cert')
opener  = urllib2.build_opener(HTTPSClientAuthHandler(px, px))
opener.addheaders = [('Accept', 'application/json;text/json')]

base_url = 'https://cmsweb.cern.ch/sitedb/data/prod/'
data = opener.open(base_url+'site-names')
j = json.load(data)
namemap = {}
rolemap = {}
for [type,sitename,name] in j['result']:
  if type == 'cms':
    namemap[sitename] = name
    rolemap[name] = set()

data = opener.open(base_url+'site-responsibilities')
j = json.load(data)
for [user,sitename,role] in j['result']:
  if role in ['Site Admin', 'Site Executive']:
    if '@' not in user:
      rolemap[namemap[sitename]].add(user)
#
# Now we spit out the authz file used to configure the repository acl
#
print "# This file is automatically generated from the users information in SiteDB."
print "# Do not change this file as these changes eventually get overwritten."
print
print "repo siteconf"
print "\tconfig gitweb.owner = cms-http-group-service"
print "\tconfig gitweb.description = CMS Site Configuration"
print
print "# General repository permissions:"
print "#   The http group can do anything, cms registered users and cmsweb can read anything,"
print "#   cms registered users can only push to the master branch"
print "\tRW+ = @cms-http-group"
print "\tR = @cms-authorized-users"
print "\tR = cmsweb"
print
print "# Additional per-path restrictions that are _additionally_ checked:"
print "#   Site admins and executives can write to their site configuration directory only,"
print "#   The site support team and the http group can write to any file/dir,"
print "#   Other cms registered users and cmsweb cannot write anywhere,"
print "#   but can read any files."
print "\tRW VREF/NAME/ = @cms-http-group @cms-comp-ops-site-support-team"
print "\tR VREF/NAME/ = cmsweb @cms-authorized-users"
for cmssite in sorted(rolemap.keys()):
  if len(rolemap[cmssite]) > 0:
    print "\tRW VREF/NAME/%s =" % cmssite, ' '.join(rolemap[cmssite])
print "\t- VREF/NAME/ = @cms-authorized-users"
